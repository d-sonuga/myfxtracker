{"version":3,"file":"static/js/898.aeca0dab.chunk.js","mappings":"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","sources":["apps/trader-app/components/trader-app-navbar/navbar-text.tsx","apps/trader-app/components/trader-app-navbar/sub-menu.tsx","apps/trader-app/components/trader-app-navbar/navbar-item.tsx","visuals/svgs/house-icon.tsx","visuals/svgs/calendar-icon.tsx","visuals/svgs/notes-icon.tsx","visuals/svgs/analytics-chart-icon.tsx","visuals/svgs/settings-icon.tsx","visuals/svgs/log-out-icon.tsx","apps/trader-app/components/trader-app-navbar/const.tsx","apps/trader-app/components/trader-app-navbar/utils.ts","apps/trader-app/components/trader-app-navbar/navbar-list.tsx","apps/trader-app/components/trader-app-navbar/index.tsx","apps/trader-app/const/index.ts","apps/trader-app/components/trader-app-container/index.tsx","apps/trader-app/components/page-container/index.tsx","apps/trader-app/components/page-heading/index.tsx","apps/trader-app/components/account-selector/index.tsx","apps/trader-app/components/graphs/graph-heading.tsx","apps/trader-app/components/graphs/line-graph.tsx","apps/trader-app/components/graphs/bar-chart.tsx","apps/trader-app/components/graphs/graph.tsx","apps/trader-app/components/table/index.tsx","apps/trader-app/components/recalc/index.ts","apps/trader-app/components/page-still-loading/index.tsx","apps/trader-app/pages/overview/const/default-overview-calc.ts","apps/trader-app/pages/overview/utils/index.ts","apps/trader-app/pages/overview/overview-cards/base-card.tsx","apps/trader-app/pages/overview/overview-cards/balance-card.tsx","apps/trader-app/pages/overview/overview-cards/no-of-trades-card.tsx","apps/trader-app/pages/overview/overview-cards/win-rate-card.tsx","apps/trader-app/pages/overview/overview-cards/abs-gain-card.tsx","apps/trader-app/pages/overview/overview-cards/index.tsx","apps/trader-app/pages/overview/account-returns-graph/index.tsx","apps/trader-app/utils/index.ts","apps/trader-app/pages/overview/overview-stats/create-rows.tsx","apps/trader-app/pages/overview/overview-stats/index.tsx","apps/trader-app/pages/overview/weekly-summary/create-rows.tsx","apps/trader-app/pages/overview/weekly-summary/index.tsx","apps/trader-app/pages/overview/index.tsx","apps/trader-app/pages/cash-and-gains/cash-graph/index.tsx","apps/trader-app/pages/cash-and-gains/const.ts","apps/trader-app/pages/cash-and-gains/gains-graph/format-data.ts","apps/trader-app/pages/cash-and-gains/gains-graph/index.tsx","apps/trader-app/pages/cash-and-gains/index.tsx","apps/trader-app/pages/expenses/create-rows.tsx","apps/trader-app/pages/expenses/const.ts","apps/trader-app/pages/expenses/index.tsx","apps/trader-app/pages/long-short-analysis/long-short-comparison-table/create-rows.tsx","apps/trader-app/pages/long-short-analysis/long-short-comparison-table/index.tsx","apps/trader-app/pages/long-short-analysis/long-short-bar-graph/index.tsx","apps/trader-app/pages/long-short-analysis/long-balance-graph/index.tsx","apps/trader-app/pages/long-short-analysis/short-balance-graph/index.tsx","apps/trader-app/pages/long-short-analysis/const.ts","apps/trader-app/pages/long-short-analysis/index.tsx","apps/trader-app/pages/pairs-analysis/ave-return-per-pair-graph/index.tsx","apps/trader-app/pages/pairs-analysis/ave-rrr-per-pair-graph/index.tsx","apps/trader-app/pages/pairs-analysis/pairs-table/create-rows.tsx","apps/trader-app/pages/pairs-analysis/pairs-table/index.tsx","apps/trader-app/pages/pairs-analysis/const.ts","apps/trader-app/pages/pairs-analysis/index.tsx","apps/trader-app/pages/period-analysis/const.ts","apps/trader-app/pages/period-analysis/index.tsx","apps/trader-app/pages/time-analysis/time-analysis-graph/index.tsx","apps/trader-app/pages/time-analysis/trade-duration-table/create-rows.tsx","apps/trader-app/pages/time-analysis/trade-duration-table/index.tsx","apps/trader-app/pages/time-analysis/open-hour-table/create-rows.tsx","apps/trader-app/pages/time-analysis/open-hour-table/index.tsx","apps/trader-app/pages/time-analysis/const.ts","apps/trader-app/pages/time-analysis/index.tsx","apps/trader-app/pages/settings/email-section/index.tsx","apps/trader-app/pages/settings/change-password-section/index.tsx","apps/trader-app/pages/settings/subscribe-section/index.tsx","apps/trader-app/pages/settings/delete-account/index.tsx","apps/trader-app/pages/settings/ds-username-section/index.tsx","apps/trader-app/pages/settings/index.tsx","apps/trader-app/models/global-data.ts","apps/trader-app/models/utils.ts","apps/trader-app/models/use-global-data.ts","apps/trader-app/data-source-setup-instructions/index.tsx","apps/trader-app/index.tsx","apps/trader-app/pages/journal/index.tsx","apps/trader-app/pages/notes/models/index.tsx","apps/trader-app/pages/notes/note-list/note-list-item.tsx","apps/trader-app/pages/notes/note-list/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/text-format-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/align-content-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/undo-redo-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/list-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/create-table-node.ts","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/no-of-rows-input.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/no-of-columns-input.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-image-button.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-link-button.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/headers-and-quote-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/index.tsx","apps/trader-app/pages/notes/note-editor/plugins/link-element.tsx","apps/trader-app/pages/notes/note-editor/plugins/td-element.tsx","apps/trader-app/pages/notes/note-editor/plugins/index.tsx","apps/trader-app/pages/notes/note-editor/title-input.tsx","apps/trader-app/pages/notes/note-editor/index.tsx","apps/trader-app/pages/notes/main-toolbar/index.tsx","apps/trader-app/pages/notes/no-notes-found.tsx","apps/trader-app/pages/notes/index.tsx","apps/trader-app/services/ea-download-url.ts","apps/trader-app/services/get-note-data.ts","apps/trader-app/services/http.ts","components/dialog/buttons.tsx","components/dialog/index.tsx","../calculator/src/cash-and-gains-calculations/cash-graph-calc.ts","../calculator/src/cash-and-gains-calculations/gains-graph-calc.ts","../calculator/src/cash-and-gains-calculations/index.ts","../calculator/src/common-calc.ts","../calculator/src/expenses-calculations/expenses-table-calc.ts","../calculator/src/expenses-calculations/index.ts","../calculator/src/index.ts","../calculator/src/long-short-analysis-calculations/common-calc.ts","../calculator/src/long-short-analysis-calculations/index.ts","../calculator/src/long-short-analysis-calculations/long-balance-graph-calc.ts","../calculator/src/long-short-analysis-calculations/long-short-comp-graph-calc.ts","../calculator/src/long-short-analysis-calculations/long-short-comp-table-calc.ts","../calculator/src/long-short-analysis-calculations/short-balance-graph-calc.ts","../calculator/src/overview-calculations/account-returns-graph-calc.ts","../calculator/src/overview-calculations/index.ts","../calculator/src/overview-calculations/overview-cards-calc.ts","../calculator/src/overview-calculations/overview-stats-calc.ts","../calculator/src/overview-calculations/weekly-summary-calc.ts","../calculator/src/pairs-analysis-calculations/ave-returns-per-pair-graph-calc.ts","../calculator/src/pairs-analysis-calculations/ave-rrr-per-pair-graph-calc.ts","../calculator/src/pairs-analysis-calculations/index.ts","../calculator/src/pairs-analysis-calculations/pairs-analysis-table-calc.ts","../calculator/src/pairs-analysis-calculations/utils.ts","../calculator/src/period-analysis-calculations/index.ts","../calculator/src/period-analysis-calculations/returns-per-period-graph-calc.ts","../calculator/src/trading-time-analysis-calculations/index.ts","../calculator/src/trading-time-analysis-calculations/open-hour-table-calc.ts","../calculator/src/trading-time-analysis-calculations/time-analysis-graph-calc.ts","../calculator/src/trading-time-analysis-calculations/trade-duration-table-calc.ts","../calculator/src/utils/date-utils.ts","../calculator/src/utils/index.ts"],"sourcesContent":["import {P} from '@components/text'\nimport {getColor} from '@conf/utils'\n\n\nconst NavbarText = ({children, style}: {children: string, style?: {[key: string]: string}}) => {\n    return(\n        <P style={{\n            color: getColor('dark-gray'),\n            fontFamily: '\"Open Sans\", sans-serif',\n            ...style\n        }}>{children}</P>\n    );\n}\n\nexport default NavbarText","import {ListItemButton} from '@mui/material'\nimport {List, Collapse} from '@mui/material'\nimport NavbarText from './navbar-text'\nimport {SubMenuPropTypes} from './types'\n\n\nconst SubMenu = ({subMenu, subMenuIsOpen, subMenuName, selectedSubMenuName,\n        selectedSubMenuItemIndex, onSubMenuItemSelect}: SubMenuPropTypes) => {\n    return(\n        <Collapse in={subMenuIsOpen && selectedSubMenuName === subMenuName} timeout='auto' unmountOnExit>\n            <List disablePadding component='div'>\n                {(() => {\n                    // Had to explicitly use this function to satisfy the Typescript compiler\n                    if(subMenu !== undefined){\n                        return subMenu.map((item, i) => (\n                            <ListItemButton \n                                key={i}\n                                sx={{width: '200px', pl: 8}}\n                                selected={i === selectedSubMenuItemIndex}\n                                onClick={(e) => {\n                                    onSubMenuItemSelect(subMenuName, i, item);\n                                }}>\n                                <NavbarText>{item.name}</NavbarText>\n                            </ListItemButton>\n                        ))\n                    }\n                    return null;\n                })()}\n            </List>\n        </Collapse>\n    )\n}\n\nexport default SubMenu","import {ListItem, ListItemButton, ListItemIcon} from '@mui/material'\nimport {ExpandLess, ExpandMore} from '@mui/icons-material'\nimport {getColor, getDimen} from '@conf/utils'\nimport NavbarText from './navbar-text'\nimport SubMenu from './sub-menu'\nimport {NavbarItemPropTypes} from './types'\n\n\nconst NavbarItem = ({Icon, children, onClick, index, selected, subMenu, onSubMenuItemSelect,\n        subMenuIsOpen, selectedSubMenuItemIndex, selectedSubMenuName}: NavbarItemPropTypes) => {\n    const hasSubMenu = () => subMenu !== undefined;\n    const hasIcon = () => Icon !== undefined;\n\n    \n    return(\n        <ListItem disableGutters sx={{\n                width: '200px',\n                padding: 0,\n                marginTop: index === 0 ? getDimen('padding-md') : undefined,\n                flexDirection: subMenu ? 'column' : undefined\n            }}>\n            <ListItemButton selected={selected} onClick={(e) => {\n                onClick(e, index);\n            }}>\n                {hasIcon() ? \n                    <ListItemIcon>\n                        <Icon />\n                    </ListItemIcon>\n                    : null\n                }   \n                <NavbarText style={{fontSize: '1.1rem'}}>\n                    {children}\n                </NavbarText>\n                {hasSubMenu() ? \n                    subMenuIsOpen ? \n                        <ExpandLess sx={{color: getColor('dark-gray')}} />\n                        : <ExpandMore sx={{color: getColor('dark-gray')}} />\n                    : null\n                }\n            </ListItemButton>\n            {subMenu !== undefined ?\n                <SubMenu\n                    subMenu={subMenu}\n                    subMenuIsOpen={subMenuIsOpen}\n                    subMenuName={children}\n                    selectedSubMenuName={selectedSubMenuName}\n                    selectedSubMenuItemIndex={selectedSubMenuItemIndex}\n                    onSubMenuItemSelect={onSubMenuItemSelect} />\n                : null\n            }\n        </ListItem>\n    );\n}\n\nexport default NavbarItem","import {SvgIcon} from '@mui/material'\n\n\nconst HouseIcon = ({fontSize, style}: HouseIconTypes) => {\n    return(\n        <SvgIcon fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width='16' fill=\"currentColor\" className=\"bi bi-house-door sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\ntype HouseIconTypes = {\n    fontSize?: 'small' | 'inherit' | 'large' | 'medium',\n    style?: {[key: string]: any}\n}\n\nexport default HouseIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst CalendarIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-calendar-week sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z\"/>\n                <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default CalendarIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst NotesIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-journal-text sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>\n                <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\"/>\n                <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\"/>    \n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default NotesIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst AnalyticsChartIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-graph-up-arrow sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path fillRule=\"evenodd\" d=\"M0 0h1v15h15v1H0V0Zm10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4.9l-3.613 4.417a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61L13.445 4H10.5a.5.5 0 0 1-.5-.5Z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default AnalyticsChartIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst SettingsIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-gear sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"/>\n                <path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default SettingsIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst LogOutIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-box-arrow-right sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path fillRule=\"evenodd\" d=\"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\"/>\n                <path fillRule=\"evenodd\" d=\"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default LogOutIcon","import HouseIcon from '@visuals/svgs/house-icon'\nimport CalendarIcon from '@visuals/svgs/calendar-icon'\nimport NotesIcon from '@visuals/svgs/notes-icon'\nimport GalleryIcon from '@visuals/svgs/gallery-icon'\nimport AnalyticsChartIcon from '@visuals/svgs/analytics-chart-icon'\nimport SettingsIcon from '@visuals/svgs/settings-icon'\nimport LogOutIcon from '@visuals/svgs/log-out-icon'\nimport {RouteConst} from '@conf/const'\nimport {MenuItemObject} from './types'\n\n\nconst {TRADER_OVERVIEW_ROUTE, TRADER_JOURNAL_ROUTE, TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE,\n    TRADER_CASH_AND_GAINS_ROUTE, TRADER_SETTINGS_ROUTE, TRADER_PAIRS_ANALYSIS_ROUTE,\n    TRADER_TIME_ANALYSIS_ROUTE, TRADER_PERIOD_ANALYSIS_ROUTE, TRADER_EXPENSES_ROUTE,\n    TRADER_NOTES_ROUTE\n} = RouteConst;\n\nconst analyticsMenuItems: MenuItemObject[] = [\n    {name: 'Cash and Gains', route: TRADER_CASH_AND_GAINS_ROUTE},\n    {name: 'Long / Short Analysis', route: TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE},\n    {name: 'Pairs Analysis', route: TRADER_PAIRS_ANALYSIS_ROUTE},\n    {name: 'Trading Time Analysis', route: TRADER_TIME_ANALYSIS_ROUTE},\n    {name: 'Period Analysis', route: TRADER_PERIOD_ANALYSIS_ROUTE},\n    {name: 'Expenses', route: TRADER_EXPENSES_ROUTE},\n];\n\nconst mainMenuItems: MenuItemObject[] = [\n    {icon: HouseIcon, name: 'Overview', route: TRADER_OVERVIEW_ROUTE},\n    {icon: CalendarIcon, name: 'Journal', route: TRADER_JOURNAL_ROUTE},\n    {icon: AnalyticsChartIcon, name: 'Analytics', subMenu: analyticsMenuItems},\n    //{icon: GalleryIcon, name: 'Gallery'},\n    {icon: NotesIcon, name: 'Notes', route: TRADER_NOTES_ROUTE}\n];\n\nconst bottomMenuItems = (logout: Function): MenuItemObject[] => {\n    return [\n        {icon: SettingsIcon, name: 'Settings', route: TRADER_SETTINGS_ROUTE},\n        {icon: LogOutIcon, name: 'Log Out', action: () => logout()},\n    ];\n}\n\nconst menuItems = (logout: Function) => {\n    return {\n        mainMenuItems,\n        bottomMenuItems: bottomMenuItems(logout)\n    }\n}\nexport default menuItems","/**\n * To determine the initial state for the navbar on page load\n */\n\nimport {useLocation, useNavigate, Location} from 'react-router'\nimport {MenuItemObject} from './types'\n\n\nconst getPageRouteName = (location: Location) => {\n    const locationList = location.pathname.split('/app');\n    let route = stripSlashes(locationList[locationList.length - 1]);\n    return route;\n}\n\nconst getIntialNavbarListStateValues = (location: Location, menuItems: {[key: string]: MenuItemObject[]}) => {\n    const pageRoute = getPageRouteName(location);\n    let [initialSubMenuName, initialMainMenuItemIndex] = getMenuInfo(pageRoute, menuItems);\n    let initialSubMenuIsOpen = false;\n    let initialSubMenuItemSelected = false;\n    let initialSelectedSubMenuItemIndex = -1;\n    if(initialSubMenuName.length !== 0){\n        initialSubMenuIsOpen = true;\n        initialSelectedSubMenuItemIndex = initialMainMenuItemIndex;\n        initialMainMenuItemIndex = -1;\n    }\n    return {\n        initialSubMenuName, initialMainMenuItemIndex, initialSubMenuItemSelected,\n        initialSelectedSubMenuItemIndex, initialSubMenuIsOpen\n    }\n}\n\n/**\n * Find the index of the menu item associated with a @param: route\n * and its subMenuName, if it belongs to a subMenu\n * */\nconst getMenuInfo = (route: string, menuItems: {[key: string]: MenuItemObject[]}): [string, number] => {\n    for(const itemsKey of Object.keys(menuItems)){\n        for(let i=0; i<menuItems[itemsKey].length; i++){\n            const item = menuItems[itemsKey][i];\n            if(item.subMenu !== undefined){\n                let [subMenuName, menuItemIndex] = getMenuInfo(route, {'submenu': item.subMenu});\n                subMenuName = item.name;\n                if(menuItemIndex !== -1){\n                    menuItemIndex = adjustIndexForBottomMenuItems(menuItemIndex, itemsKey, menuItems);\n                    return [subMenuName, menuItemIndex];\n                }\n            } else {\n                if(item.route === route){\n                    i = adjustIndexForBottomMenuItems(i, itemsKey, menuItems);\n                    return ['', i];\n                }\n            }\n        }\n    }\n    return ['', -1];\n}\n\nconst adjustIndexForBottomMenuItems = (menuItemIndex: number, itemsKey: string,\n        menuItems: {[key: string]: MenuItemObject[]}) => {\n    // Adjust the index for bottomMenuItems,\n    // so its indexes dont clash with the topMenuItems's\n    if(itemsKey === 'bottomMenuItems'){\n        menuItemIndex += menuItems['mainMenuItems'].length\n    }\n    return menuItemIndex;\n}\n\nconst stripSlashes = (route: string) => {\n    if(route.startsWith('/')){\n        route = route.substr(1);\n    }\n    if(route.endsWith('/')){\n        route = route.substr(0, route.length - 1);\n    }\n    return route;\n}\n\nexport default getIntialNavbarListStateValues","import {useState} from 'react'\nimport {useLocation, useNavigate} from 'react-router'\nimport {List, Divider} from '@mui/material'\nimport Logo from '@components/logo'\nimport {getDimen} from '@conf/utils'\nimport NavbarItem from './navbar-item'\nimport menuItems from './const'\nimport getIntialNavbarListStateValues from './utils'\n\n\nconst NavbarList = ({setMenuIsOpen, logout}: {setMenuIsOpen: Function, logout: Function}) => {\n    const location = useLocation();\n\n    const {mainMenuItems, bottomMenuItems} = menuItems(logout);\n    const {initialMainMenuItemIndex, initialSubMenuItemSelected, initialSubMenuName,\n        initialSelectedSubMenuItemIndex, initialSubMenuIsOpen\n    } = getIntialNavbarListStateValues(location, menuItems(logout));\n    /** Menu index of currently selected menu item */\n    const [selectedMainMenuItemIndex, setSelectedMainMenuItemIndex] = useState(initialMainMenuItemIndex);\n    /** Has a sub menu item being selected */\n    const [subMenuItemSelected, setSubMenuItemSelected] = useState(initialSubMenuItemSelected);\n    /** The array index of the sub menu item that has \n     * been selected in the array of its menu items */\n    const [selectedSubMenuItemIndex, setSelectedSubMenuItemIndex] = useState(initialSelectedSubMenuItemIndex);\n    /** The name that appears on the button of the drop down menu that has the sub menu */\n    const [selectedSubMenuName, setSelectedSubMenuName] = useState(initialSubMenuName);\n    /** Is a sub menu currently open */\n    const [subMenuIsOpen, setSubMenuIsOpen] = useState(initialSubMenuIsOpen);\n\n    const navigate = useNavigate();\n    const doesntHaveSubMenu = (item: {[key: string]: any}) => item.subMenu === undefined;\n    const unselectSubMenu = () => {\n        setSelectedSubMenuItemIndex(-1);\n        setSelectedSubMenuName('');\n    }\n    const unselectMainMenuItem = () => setSelectedMainMenuItemIndex(-1);\n    const selectSubMenuItem = (name: string, index: number) => {\n        setSubMenuItemSelected(true);\n        setSelectedSubMenuItemIndex(index);\n        setSelectedSubMenuName(name);\n    }\n    const closeSubMenu = () => {\n        setSubMenuIsOpen(false);\n        //setSelectedSubMenuItemIndex(-1);\n        //setSelectedSubMenuName('');\n    }\n    const closeMenu = () => setMenuIsOpen(false);\n    const carryOutItemAction = (item: {[key: string]: any}) => {\n        if(item.route !== undefined){\n            navigate(item.route);\n        } else {\n            item.action();\n        }\n    }\n    const itemInSubMenuIsSelected = (item: {[key: string]: any}) => \n        selectedMainMenuItemIndex === -1 && selectedSubMenuName === item.name;\n    const openSubMenu = (item: {[key: string]: any}) => {\n        setSubMenuIsOpen(true);\n        setSelectedSubMenuName(item.name);\n    }\n    const itemInASubMenuHasBeenSelected = () => selectedSubMenuItemIndex !== -1;\n\n    const onMainMenuItemClick = (e: Event, itemJustSelectedIndex: number, item: {[key: string]: any}) => {\n        // If item has sub menu, then it's a dropdown,\n        // not a link to a page\n        if(doesntHaveSubMenu(item)){\n            // Close any open sub menu first if any are open\n            if(subMenuItemSelected){\n                // Unselect the sub menus\n                unselectSubMenu();\n            }\n            // Sub menu might be open, even if none of its items have been selected\n            closeSubMenu();\n            setSelectedMainMenuItemIndex(itemJustSelectedIndex);\n            /** For small screens, close the menu on clicking an item */\n            closeMenu();\n            carryOutItemAction(item);\n        } else {\n            if(subMenuIsOpen){\n                closeSubMenu();\n                if(itemInSubMenuIsSelected(item)){\n                    setSelectedMainMenuItemIndex(itemJustSelectedIndex);\n                }\n            } else {\n                openSubMenu(item);\n                if(itemInASubMenuHasBeenSelected() && selectedSubMenuName === item.name){\n                    unselectMainMenuItem();\n                }\n            }\n        }\n    }\n    const onSubMenuItemSelect = (name: string, index: number, item: {[key: string]: any}) => {\n        // Unselect main menu items when sub menu item is selected\n        unselectMainMenuItem();\n        selectSubMenuItem(name, index);\n        carryOutItemAction(item);\n        /** For small screens */\n        closeMenu();\n    }\n\n    return(\n            <>\n                <List sx={{alignItems: 'center', padding: getDimen('padding-md')}}>\n                    <Logo style={{marginBottom: getDimen('padding-xbig')}} />\n                    {mainMenuItems.map((item, i) => (\n                        createNavbarItem(item, i, selectedMainMenuItemIndex, onMainMenuItemClick,\n                            onSubMenuItemSelect, selectedSubMenuItemIndex, subMenuIsOpen, selectedSubMenuName)\n                    ))}\n                </List>\n                <Divider sx={{mx: getDimen('padding-md')}}/>\n                <List sx={{alignItems: 'center', padding: getDimen('padding-md')}}>\n                    {bottomMenuItems.map((item, i) => (\n                        createNavbarItem(item, i + mainMenuItems.length, selectedMainMenuItemIndex,\n                            onMainMenuItemClick, onSubMenuItemSelect, selectedSubMenuItemIndex,\n                            subMenuIsOpen, selectedSubMenuName)\n                    ))}\n                </List>\n            </>\n    )\n}\n\nconst createNavbarItem = (item: {[key: string]: any}, i: number, selectedMainMenuItemIndex: number,\n        onMainMenuItemClick: Function, onSubMenuItemSelect: Function, selectedSubMenuItemIndex:number,\n        subMenuIsOpen: boolean, selectedSubMenuName: string) => {\n    return(\n        <NavbarItem\n            key={i}\n            Icon={item.icon}\n            index={i}\n            onClick={(e: Event, i: number) => onMainMenuItemClick(e, i, item)}\n            selected={selectedMainMenuItemIndex === i}\n            subMenu={item.subMenu ? item.subMenu : undefined}\n            onSubMenuItemSelect={onSubMenuItemSelect}\n            selectedSubMenuItemIndex={selectedSubMenuItemIndex}\n            subMenuIsOpen={subMenuIsOpen}\n            selectedSubMenuName={selectedSubMenuName}>\n                {item.name}\n        </NavbarItem>\n    );\n}\n\n\n\nexport default NavbarList","import {useContext, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport {Drawer, SwipeableDrawer} from '@mui/material'\nimport {useScreenIsSmall} from '@conf/utils'\nimport Navbar from '@components/navbar'\nimport {NAVBAR_WIDTH} from '@apps/trader-app/const'\nimport Http, {HttpErrorType} from '@services/http'\nimport NavbarList from './navbar-list'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport {ToastContext} from '@components/toast'\n\n\nconst TraderAppNavbar = () => {\n    const Toast = useContext(ToastContext);\n    const navigate = useNavigate();\n    /** Is the menu open. For small screens */\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n    const isScreenSmall = useScreenIsSmall();\n    const logout = () => {\n        const {BASE_URL, LOGOUT_URL} = HttpConst\n        Http.delete({\n            url: `${BASE_URL}/${LOGOUT_URL}/`,\n            successFunc: () => {\n                localStorage.removeItem('KEY');\n                const {INFO_LOGIN_ROUTE} = RouteConst;\n                navigate(`/${INFO_LOGIN_ROUTE}`);\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log(err);\n                Toast.error('Sorry. Something went wrong.');\n            }\n        })\n    }\n    \n    return(\n        <>\n            <Navbar\n                dontShowOnBigScreen={true}\n                links={[]}\n                sidebar={\n                    <SwipeableDrawer\n                        variant={isScreenSmall ? 'temporary' : 'permanent'}\n                        open={menuIsOpen}\n                        onClose={() => setMenuIsOpen(false)}\n                        onOpen={() => setMenuIsOpen(true)}\n                        sx={{width: `${NAVBAR_WIDTH}px`}}>\n                            <NavbarList setMenuIsOpen={setMenuIsOpen} logout={logout} />\n                    </SwipeableDrawer>\n                }\n                showLogo={false}\n                onSidebarMenuButtonClick={(e: Event) => setMenuIsOpen(menuIsOpen => !menuIsOpen)}\n            />\n            <Drawer\n                variant={isScreenSmall ? 'temporary' : 'permanent'}\n                open={menuIsOpen}\n                ModalProps={{\n                    keepMounted: true\n                }}\n                sx={{width: `${NAVBAR_WIDTH}px`}}>\n                    <NavbarList setMenuIsOpen={setMenuIsOpen} logout={logout} />\n            </Drawer>\n        </>\n    );\n}\n\nexport default TraderAppNavbar","const NAVBAR_WIDTH = 270;\n\nexport {\n    NAVBAR_WIDTH\n}","import {ColumnBox} from '@components/containers'\nimport {getDimen, getDimenInNo, useScreenIsSmall} from '@conf/utils'\nimport {NAVBAR_WIDTH} from '@apps/trader-app/const'\nimport {ReactNode} from 'react'\n\n/**\n * A container to wrap all pages in the trader app\n * Gives every page margins to avoid navbar and sidebar\n * overlaps\n */\n\nconst TraderAppContainer = ({children}: {children: ReactNode}) => {\n    /** \n     * If screen is small, then there will be a navbar.\n     * A margin has to be added on top of the container\n     * to stay below the navbar.\n     */\n    const screenIsSmall = useScreenIsSmall();\n\n    return(\n        <div \n            style={{\n                marginTop: screenIsSmall ? `${getDimenInNo('navbar-height') + 32}px` : 0,\n                marginLeft: !screenIsSmall ? `${NAVBAR_WIDTH}px` : 0,\n                height: '100vh',\n                overflowY: 'scroll'\n            }}>\n                {children}\n        </div>\n    )\n}\n\nexport default TraderAppContainer","import {ColumnBox} from '@components/containers'\nimport {getDimen} from '@conf/utils'\nimport {PageContainerPropTypes} from './types'\n\nconst PageContainer = ({children, style, className}: PageContainerPropTypes) => {\n    return(\n        <ColumnBox\n            style={{\n                marginLeft: getDimen('padding-big'),\n                marginRight: getDimen('padding-big'),\n                marginBottom: getDimen('padding-big'),\n                ...style\n            }}\n            className={className ? className : ''}>\n            {children}\n        </ColumnBox>\n    )\n}\n\nexport default PageContainer","import {RowBox} from '@components/containers'\nimport {H4} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {AccountSelector} from '..'\nimport {PageHeadingPropTypes} from './types'\n\n/**\n * A component to display the heading of all pages in the\n * trader app\n * @prop heading: the heading to show at the top of the page\n * @prop dontShowSelector: should the account selector show?\n */\n\nconst PageHeading = ({heading, dontShowSelector}: PageHeadingPropTypes) => {\n    return(\n        <RowBox \n            style={{\n                justifyContent: 'space-between',\n                marginTop: getDimen('padding-md'),\n                marginBottom: getDimen('padding-md')\n            }}>\n            <H4>{heading}</H4>\n            {\n                dontShowSelector === undefined || !dontShowSelector ?\n                    <AccountSelector />\n                    : null\n            }\n        </RowBox>\n    )\n}\n\nexport default PageHeading","import {useContext, useState} from 'react'\nimport {SelectInput} from '@components/inputs'\nimport {GlobalDataContext, CurrentAccountChangerContext} from '@apps/trader-app'\n\n\nconst AccountSelector = () => {\n    const globalData = useContext(GlobalDataContext);\n    const accounts = globalData.getTradeAccountNames();\n    const currentAccountName = globalData.getCurrentTradeAccountName();\n    const onCurrentAccountChange = useContext(CurrentAccountChangerContext);\n    \n    return(\n        <SelectInput\n            value={currentAccountName}\n            onChange={(e) => onCurrentAccountChange(globalData.getTradeAccountIdOf(e.target.value))}\n            options={accounts}\n            placeholder='Accounts' />\n    )\n}\n\nexport default AccountSelector","import {RowBox} from '@components/containers'\nimport {H6} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {ChipSelectInput} from '@components/inputs'\nimport {GraphHeadingPropTypes} from './types'\n\n\nconst GraphHeading = ({title, selectorOptions, onSelectorSelectedOptionChange, paddingLeft, paddingTop}: GraphHeadingPropTypes) => {\n    if(title === undefined && selectorOptions === undefined){\n        return null\n    }\n    return(\n        <RowBox\n            style={{\n                paddingBottom: getDimen('padding-xs'),\n                paddingRight: getDimen('padding-sm'),\n                paddingTop: paddingTop !== undefined ? paddingTop : getDimen('padding-sm'),\n                paddingLeft: paddingLeft !== undefined ? paddingLeft : getDimen('padding-sm'),\n                justifyContent: 'space-between'\n            }}>\n            {title !== undefined ? <H6>{title}</H6> : null}\n            {selectorOptions !== undefined ?\n                <ChipSelectInput\n                    options={Object.keys(selectorOptions)}\n                    onChange={(option: string) => onSelectorSelectedOptionChange(option)} />\n                : null\n            }\n        </RowBox>\n    )\n}\n\nexport default GraphHeading","import {getColor} from '@conf/utils'\nimport {AreaChart, CartesianGrid, XAxis, YAxis, Area, Tooltip, ResponsiveContainer} from 'recharts'\nimport {BaseGraphPropTypes} from './types'\n\n\nconst LineGraph = ({data, xAxisKey, yAxisKey, height, tooltipName}: BaseGraphPropTypes) => {\n    return(\n        <ResponsiveContainer width='100%' height={height === undefined ? 250 : height}>\n            <AreaChart\n                data={data}\n                margin={{ \n                    top: 10, right: 30, left: 0, bottom: 0 \n                }}>\n                <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#0d6efd\" stopOpacity={0.2}/>\n                        <stop offset=\"95%\" stopColor=\"#9ec5ff\" stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <XAxis axisLine={false} tickLine={false} tick={false} dataKey={xAxisKey} />\n                <YAxis axisLine={false} tickLine={false} tick={{fill: getColor('dark-gray')}} />\n                <Tooltip />\n                <Area\n                    type='monotone'\n                    dataKey={yAxisKey}\n                    name={tooltipName ? tooltipName : undefined}\n                    stroke='#0d6efd' \n                    strokeWidth={2} \n                    fillOpacity={1}\n                    fill=\"url(#colorUv)\"\n                />\n            </AreaChart>\n        </ResponsiveContainer>\n    );\n}\n\n\nexport default LineGraph","import {BarChart as ReBarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend, ResponsiveContainer} from 'recharts'\nimport {BaseGraphPropTypes} from './types'\n\n\nconst BarChart = ({data, xAxisKey, yAxisKey, height, tooltipName}: BaseGraphPropTypes) => {\n    return(\n        <ResponsiveContainer width='100%' height={height === undefined ? 250 : height}>\n            <ReBarChart data={data} barSize={80}>\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis axisLine={false} tickLine={false} dataKey={xAxisKey} />\n                <YAxis axisLine={false} tickLine={false} />\n                <Tooltip />\n                <Legend />\n                <Bar\n                    dataKey={yAxisKey}\n                    name={tooltipName ? tooltipName : undefined}\n                    fill=\"#0d6efd\"\n                    opacity='0.8' />\n            </ReBarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default BarChart","import {useEffect, useState} from 'react'\nimport {getColor, getDimen} from '@conf/utils'\nimport GraphHeading from './graph-heading'\nimport LineGraph from './line-graph'\nimport BarChart from './bar-chart'\nimport {GraphPropTypes, GraphData, GraphXAxisKey, SelectorOptions} from './types'\n\n\nconst Graph = ({data, variant, title, selectorOptions, outline, headerIsOutside, headerPaddingTop,\n        xAxisKey, 'data-testid': testId, ...props}\n    : GraphPropTypes) => {\n    const graphVariant = variant === undefined ? 'line' : variant;\n    const [graphData, setGraphData] = useState(initialGraphDataStateValues(data, selectorOptions));\n    const [currentXAxisKey, setcurrentXAxisKey] = useState(initialXAxisKeyStateValue(xAxisKey, selectorOptions));\n    const onSelectorSelectedOptionChange = (option: string) => {\n        if(selectorOptions !== undefined){\n            setGraphData(selectorOptions[option]);\n            // If it's not a string, then it's an object\n            // mapping option names to their respective xAxisKeys\n            // for the data they will display\n            // Had to use typeof directly because of the Typescript compiler\n            if(typeof(xAxisKey) !== 'string'){\n                setcurrentXAxisKey(xAxisKey[option]);\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(data !== undefined){\n            setGraphData(data);\n        }\n    }, [data])\n\n    useEffect(() => {\n        if(selectorOptions !== undefined){\n            setGraphData(initialGraphDataStateValues(data, selectorOptions));\n        }\n    }, [selectorOptions])\n\n    return(\n        <div data-testid={testId}>\n        {headerIsOutside ? \n            <GraphHeading \n                title={title}\n                selectorOptions={selectorOptions} \n                onSelectorSelectedOptionChange={onSelectorSelectedOptionChange}\n                paddingLeft={0}\n                paddingTop={headerPaddingTop} />\n            : null }\n            <div\n                style={Object.assign(\n                    outline ? {\n                        border: `1px solid ${getColor('xlight-blue')}`,\n                        paddingRight: getDimen('padding-sm'),\n                        borderRadius: '5px'\n                    } : {},\n                    headerIsOutside ? {\n                        paddingTop: getDimen('padding-md'),\n                        paddingBottom: getDimen('padding-md')\n                    } : {}    \n                )}>\n                {!headerIsOutside ? \n                    <GraphHeading \n                        title={title}\n                        selectorOptions={selectorOptions} \n                        onSelectorSelectedOptionChange={onSelectorSelectedOptionChange}\n                        paddingTop={headerPaddingTop} />\n                    : null}\n                {graphVariant === 'line' ?\n                    <LineGraph data={graphData} xAxisKey={currentXAxisKey} {...props} />\n                    : <BarChart data={graphData} xAxisKey={currentXAxisKey} {...props} />\n                }\n            </div>\n        </div>\n    );\n}\n\nconst initialGraphDataStateValues = (data?: GraphData, selectorOptions?: {[key: string]: GraphData}) => {\n    if(data !== undefined){\n        return data;\n    }\n    if(selectorOptions !== undefined){\n        const firstOptionName = Object.keys(selectorOptions)[0];\n        return selectorOptions[firstOptionName];\n    }\n    return []\n}\n\nconst initialXAxisKeyStateValue = (xAxisKey: GraphXAxisKey, selectorOptions?: SelectorOptions): string => {\n    if(typeof(xAxisKey) === 'string'){\n        return xAxisKey\n    }\n    // If xAxisKey is not a string, then it is an object mapping\n    // selector option names to their respective xAxisKeys\n    // This implies that selectorOptions can't be undefined at this point\n    // But to satisfy the Typescript compiler\n    if(selectorOptions !== undefined){\n        const nameOfFirstOption = Object.keys(selectorOptions)[0];\n        return xAxisKey[nameOfFirstOption];\n    }\n    \n    return ''\n}\n\nexport default Graph    ","import {Paper, TableContainer, Table as MuiTable, TableHead, \n    TableCell, TableBody, TableRow} from '@mui/material'\nimport {BP, H6} from '@components/text'\nimport {getColor, getDimen} from '@conf/utils'\nimport {TablePropTypes, ConditionalStyle, HeaderItem, HeaderItemObject} from './types'\n\n\nconst Table = ({title, headers, rows, style, bodyColumnConditionalStyle, headerStyle,\n        headerRowConditionalStyle, headerColumnConditionalStyle, headerColumnTextConditionalStyle,\n        headerTextStyle, headerRowTextConditionalStyle, bodyStyle, bodyRowConditionalStyle, 'data-testid': testId}\n    : TablePropTypes) => {\n    return(\n        <div data-testid={testId}>\n        {title ? \n            <H6 style={{marginBottom: getDimen('padding-xs')}}>{title}</H6>\n            : null\n        }\n        <TableContainer \n            component={Paper} \n            sx={{\n                boxShadow: 'none',\n                border: `1px solid ${getColor('xlight-blue')}`,\n                borderRadius: '1%'\n            }}>\n            <MuiTable sx={{height: '100%'}}>\n                <TableHead>\n                    {(() => {\n                        if(headers !== undefined){\n                            const headersArray: Array<HeaderItemObject[]> = formatHeaders(headers);\n                            return headersArray.map((headers, rowi) => {\n                                const conditionalRowStyle = getConditionalStyles(rowi, headerRowConditionalStyle);\n                                const conditionalRowTextStyle = getConditionalStyles(rowi, headerRowTextConditionalStyle);\n                                return(\n                                    <TableRow>\n                                        {headers.map((headerItem: HeaderItemObject, coli: number) => {\n                                            const conditionalColumnTextStyle = getConditionalStyles(coli, headerColumnTextConditionalStyle);\n                                            const conditionalColumnStyle = getConditionalStyles(coli, headerColumnConditionalStyle);\n                                            const headerCellStyle = headerStyle ? headerStyle : {};\n                                            const textStyle = headerTextStyle ? headerTextStyle : {};\n                                            const globalStyle = style ? style : {};\n                                            return(\n                                                <TableCell \n                                                    key={rowi + coli} \n                                                    sx={{\n                                                        textAlign: 'center',\n                                                        ...globalStyle,\n                                                        ...headerCellStyle,\n                                                        ...conditionalRowStyle,\n                                                        ...conditionalColumnStyle\n                                                    }}\n                                                    colSpan={headerItem.colSpan}>\n                                                    <BP style={{\n                                                        color: getColor('light-blue'),\n                                                        ...textStyle,\n                                                        ...conditionalRowTextStyle,\n                                                        ...conditionalColumnTextStyle,\n                                                    }}>{headerItem.name}</BP>\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            }\n                            );\n                        }\n                        return null;\n                    })()}\n                </TableHead>\n                <TableBody>\n                    {rows.map((row, rowi) => {\n                        let conditionalRowStyles = getConditionalStyles(rowi, bodyRowConditionalStyle);\n                        return(\n                            <TableRow key={rowi}>\n                                {row.map((cell, coli) => {\n                                    const conditionalColumnStyles = getConditionalStyles(coli, bodyColumnConditionalStyle);\n                                    const bodyCellStyle = bodyStyle ? bodyStyle : {};\n                                    const globalStyle = style ? style : {};\n                                    return(\n                                        <TableCell \n                                            key={rowi + coli}\n                                            align='center'\n                                            sx={{\n                                                ...globalStyle,\n                                                ...bodyCellStyle,\n                                                ...conditionalColumnStyles,\n                                                ...conditionalRowStyles\n                                            }}>\n                                            {cell}\n                                        </TableCell>\n                                    );\n                                })}\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </MuiTable>\n        </TableContainer>\n        </div>\n    );\n}\n\n\n/**\n * \n * @param i: the index of whatever row or column calling the function.\n *  This parameter is passed to a conditionalStyle's condition function to determine\n *  whether or not to add the style associated with that conditionalStyle's style\n * @param conditionalStyle: an object with an object of styles and a condition function\n *  which takes the column or row index as an argument and returns a boolean that \n * determines whether or not to apply that style or an array of the same\n * @returns: a single object of all the styles whose condition evaluated to true\n *  when i is passed as an argument\n */\nconst getConditionalStyles = (i: number, conditionalStyle?: ConditionalStyle | Array<ConditionalStyle>) => {\n    // No style object, no style\n    if(conditionalStyle === undefined){\n        return {}\n    }\n    // Array of all conditional style objects\n    let conditionalStylesArray: Array<ConditionalStyle> = [];\n    if(Array.isArray(conditionalStyle)){\n        conditionalStylesArray = conditionalStyle;\n    } else {\n        conditionalStylesArray.push(conditionalStyle);\n    }\n    // Array of all style objects that will end up in the final style object\n    // For every condition that is false, an empty object is placed in the array\n    const stylesArray = conditionalStylesArray.map((conditionalStyle) => (\n        conditionalStyle.condition(i) ?\n            conditionalStyle.style\n            : {}\n    ));\n    const styles = mergeObject(stylesArray);\n    return styles;\n}\n\nconst mergeObject = (objArray: Array<{[key: string]: any}>): {[key: string]: any} => {\n    if(objArray.length === 0){\n        return {}\n    } else {\n        const lastObj = objArray.pop();\n        return Object.assign(mergeObject(objArray), lastObj);\n    }\n}\n\n/**\n * Headers are given as an array of HeaderItems,\n * which could be a string or object.\n * Examples of valid headers (which are the only headers we'll be expecting here)\n *      ['header1', 'header2', 'header3']\n *      [{name: 'header1', colSpan: 2}, {name: 'header2'}, 'header3']\n *      [\n *          [{name: 'header1', colSpan: 2}, {name: 'header2'}, 'header3'],\n *          [{name: 'header1', colSpan: 3}, {name: 'header2'}],\n *      ]\n * The job of this function is to take a @param headers array which could be\n * a combination of any of the forms above, and give a result of the following format\n *      [\n *          [{name: 'header1'}, {name: 'header2'}, {name: 'header3', colSpan: 2}]\n *      ]\n * \n */\nconst formatHeaders = (headers: Array<HeaderItem[]> | HeaderItem[]): Array<HeaderItemObject[]> => {\n    if(headers.length === 0){\n        return [[]]\n    }\n    // To handle the case where headers is an array of arrays of HeaderItems\n    const processMultipleHeaders = () => {\n        let headerRows: Array<HeaderItemObject[]> = [];\n        for(let i=0; i<headers.length; i++){\n            const headerItems = headers[i];\n            // headerItems is sure to be an array, but to satisfy the Typescript compiler\n            if(Array.isArray(headerItems)){\n                const headerRowToAdd = processHeaders(headerItems);\n                console.log(headerRowToAdd);\n                headerRows.push(headerRowToAdd);\n            }\n        }\n        return headerRows;\n    }\n    /** \n     * To handle the case where headers is an array of HeaderItems\n     * @operation\n     * The function assumes that all its items are HeaderItems\n     * So it initializes an array, headerRowToAdd, to store the final result\n     * It iterates over all the HeaderItems, which can be either strings or objects\n     * If it's a string it creates an object with the string as the name and adds it to headerRowToAdd\n     * If it's an object, it just adds the object\n     * It returns the final array inside another array, according to the description of\n     * what this function is supposed to return\n     */\n    const processHeaders = (headers: HeaderItem[] | Array<HeaderItem[]>) => {\n        const headerRowToAdd: HeaderItemObject[] = [];\n        for(let i=0; i<headers.length; i++){\n            const headerItem = headers[i];\n            if(typeof(headerItem) === 'string'){\n                headerRowToAdd.push({name: headerItem});\n            // Apart from strings, the only other possible type is an object\n            // but this additional check had to be added to satisfy the Typescript\n            // compiler\n            } else if(typeof(headerItem) === 'object' && !Array.isArray(headerItem)){\n                headerRowToAdd.push(headerItem);\n            }\n        }\n        return headerRowToAdd;\n    }\n    if(Array.isArray(headers[0])){\n        return processMultipleHeaders();\n    } else {\n        // processHeaders returns a single array of HeaderItems\n        return [processHeaders(headers)];\n    }\n}\n\nexport default Table\n// For testing\nexport {formatHeaders}","import {useEffect, useContext} from 'react'\nimport {GlobalDataContext} from '@apps/trader-app'\n\n\n/**\n * Hook to be used in trader app pages that need to make recalculations and\n * update calculations state when globalData changes\n * @param calcFunc: calculator function that recalculates values from the global data\n * @param updateComponentCalc: react setState function that is used to update the\n *  calculations state of whatever component called it\n * @param afterCalcFunc: function to execute immediately after calculating the new data,\n *  passing the new calculations as parameters to the function\n */\n\nconst useRecalc = (calcFunc: Function, updateComponentCalcState: Function, afterCalcFunc?: Function) => {\n    const globalData = useContext(GlobalDataContext);\n    useEffect(() => {\n        if(globalData.hasLoaded()){\n            const accountData = globalData.getCurrentTradeAccountData();\n            const newCalc = calcFunc(accountData);\n            updateComponentCalcState(newCalc);\n            if(afterCalcFunc){\n                afterCalcFunc(newCalc);\n            }\n        }\n    }, [globalData])\n}\n\nexport default useRecalc","import {ColumnBox} from '@components/containers'\nimport LoadingIcon from '@components/loading-icon'\nimport {getColor} from '@conf/utils'\n\n\nconst PageStillLoading = () => {\n    return(\n        <ColumnBox\n            style={{\n                height: '100vh',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n            <LoadingIcon\n                color={getColor('dark-gray')}\n                size={50} />\n        </ColumnBox>\n    )\n}\n\nexport default PageStillLoading","import {OverviewCalculations, OverviewCardsCalc, OverviewStatsCalc,\n    OverviewWeeklySummaryCalc, OverviewAccountReturnsGraphCalc} from 'calculator'\nimport {OverviewAccountReturnsGraphItem} from 'calculator/dist/overview-calculations/types'\n\nconst defaultCardsCalc: OverviewCardsCalc = {\n    totalBalance: 0,\n    noOfTrades: 0,\n    winRate: 0,\n    absGain: 0\n}\n\nconst defaultStatsCalc: OverviewStatsCalc = {\n    aveProfit: 0,\n    aveLoss: 0,\n    longsWonPercent: 0,\n    noOfLongsWon: 0,\n    noOfLongs: 0,\n    shortsWonPercent: 0,\n    noOfShortsWon: 0,\n    noOfShorts: 0,\n    bestTrade: 0,\n    worstTrade: 0,\n    highestBalance:0,\n    aveRRR: 0,\n    profitFactor: 0,\n    expectancy: 0,\n    lots: 0,\n    commissions: 0\n}\n\nconst defaultWeeklySummaryCalc: OverviewWeeklySummaryCalc = {\n    \n}\n\nconst defaultAccountReturnsGraphItem: OverviewAccountReturnsGraphItem[] = [];\nconst defaultAccountReturnsGraphCalc: OverviewAccountReturnsGraphCalc = {\n    todayGraphCalc: defaultAccountReturnsGraphItem,\n    thisWeekGraphCalc: defaultAccountReturnsGraphItem,\n    thisMonthGraphCalc: defaultAccountReturnsGraphItem,\n    thisYearGraphCalc: defaultAccountReturnsGraphItem,\n    allTimeGraphCalc: defaultAccountReturnsGraphItem\n}\n\nconst defaultOverviewCalc: OverviewCalculations = {\n    cardsCalc: defaultCardsCalc,\n    statsCalc: defaultStatsCalc,\n    weeklySummaryCalc: defaultWeeklySummaryCalc,\n    accountReturnsGraphCalc: defaultAccountReturnsGraphCalc\n}\n\nexport default defaultOverviewCalc","\n/**\n * Converts a number @param n to 2 decimal places and converts it to a string\n */\nconst to2dpString = (n: number) => {\n    return n.toFixed(2);\n}\n\nexport {\n    to2dpString\n}","import {ColumnBox} from '@components/containers'\nimport {H4, H5, P} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {BaseOverviewCardPropTypes} from './types'\n\n/**\n * Base card for the overview page\n */\n\nconst BaseOverviewCard = ({heading, content, backgroundColor}: BaseOverviewCardPropTypes) => {\n    return(\n        <ColumnBox \n            className='apps-trader-app-pages-overview-base-overview-card'\n            style={{backgroundColor: backgroundColor}}>\n            <P>{heading}</P>\n            <H5>{content}</H5>\n        </ColumnBox>\n    )\n}\n\nexport default BaseOverviewCard","import {getColor} from '@conf/utils'\nimport BaseOverviewCard from './base-card'\n\n\nconst BalanceCard = ({balance}: {balance: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Balance'\n            content={balance}\n            backgroundColor={getColor('xlight-blue')} />\n    )\n}\n\nexport default BalanceCard","import BaseOverviewCard from './base-card'\nimport {getColor} from '@conf/utils'\n\n\nconst NoOfTradesCard = ({noOfTrades}: {noOfTrades: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Number of Trades'\n            content={noOfTrades}\n            backgroundColor={getColor('light-green')} />\n    )\n}\n\nexport default NoOfTradesCard","import BaseOverviewCard from './base-card'\nimport {getColor} from '@conf/utils'\n\n\nconst WinRateCard = ({winRate}: {winRate: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Win Rate'\n            content={winRate}\n            backgroundColor={getColor('light-orange')} />\n    )\n}\n\nexport default WinRateCard","import {getColor} from '@conf/utils'\nimport BaseOverviewCard from './base-card'\n\n\nconst AbsGainCard = ({absGain}: {absGain: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Absolute Gain'\n            content={absGain}\n            backgroundColor={getColor('light-purple')} />\n    )\n}\n\nexport default AbsGainCard","import {OverviewCardsCalc} from 'calculator'\nimport {RowBox} from '@components/containers'\nimport {to2dpString} from '../utils'\nimport BalanceCard from './balance-card'\nimport NoOfTradesCard from './no-of-trades-card'\nimport WinRateCard from './win-rate-card'\nimport AbsGainCard from './abs-gain-card'\nimport './style.css'\n\n\nconst OverviewCards = ({calc}: {calc: OverviewCardsCalc}) => {\n    const balance = `$${to2dpString(calc.totalBalance)}`;\n    const noOfTrades = calc.noOfTrades.toString();\n    const winRate = `${to2dpString(calc.winRate)}%`;\n    const absGain = `${to2dpString(calc.absGain)}`;\n\n    return(\n        <div className='apps-trader-app-pages-overview-overview-cards-container'\n            data-testid='overview-cards'>\n            <BalanceCard balance={balance} />\n            <NoOfTradesCard noOfTrades={noOfTrades} />\n            <WinRateCard winRate={winRate} />\n            <AbsGainCard absGain={absGain} />\n        </div>\n    )\n}\n\nexport default OverviewCards","import {Graph} from '@apps/trader-app/components'\nimport {OverviewAccountReturnsGraphCalc} from 'calculator'\n\n\nconst AccountReturnsGraph = ({data}: {data: OverviewAccountReturnsGraphCalc}) => {\n    const options = {\n        'Today': data.todayGraphCalc,\n        'This Week': data.thisWeekGraphCalc,\n        'This Month': data.thisMonthGraphCalc,\n        'This Year': data.thisYearGraphCalc,\n        'All Time': data.allTimeGraphCalc\n    }\n\n    return(\n        <div style={{width: '100%'}}>\n            <Graph\n                title='Account Returns'\n                xAxisKey='tradeNo'\n                yAxisKey='result'\n                selectorOptions={options}\n                data-testid='account-returns-graph'\n                />\n        </div>\n    )\n}\n\n\nexport default AccountReturnsGraph","/**\n * To turn raw money calculations to a presentable format\n * If money is negative, it should output money in\n * 2dp with a currency symbol in front, like -$45\n * If its positive, it should output it in 2dp with a currency symbol\n * in front, like $34\n */\nconst formatMoney = (amount: number): string => {\n    if(amount < 0){\n        return `-$${to2dp(amount * -1)}`\n    } else {\n        return `$${to2dp(amount)}`\n    }\n}\n\nconst formatPercent = (num: number) => {\n    return `${to2dp(num)}%`;\n}\n\nconst to2dpstring = (num: number) => {\n    return to2dp(num).toString();\n}\n\nconst to2dp = (num: number) => {\n    return parseFloat(num.toFixed(2));\n}\n\nexport {\n    formatMoney,\n    to2dp,\n    to2dpstring,\n    formatPercent\n}","import {P, BP} from '@components/text'\nimport {getColor} from '@conf/utils'\nimport {formatMoney, to2dpstring} from '@apps/trader-app/utils'\nimport {OverviewStatsCalc} from 'calculator'\n\n\nconst createRows = (stats: OverviewStatsCalc) => {\n    const rows = [\n        [   \n            createCell(\n                'Average Profit',\n                formatMoney(stats.aveProfit),\n                getColor('light-blue')\n            ),\n            createCell('Average Loss', formatMoney(stats.aveLoss), getColor('red'))\n        ],\n        [   \n            createCell('Longs Won', `${to2dpstring(stats.longsWonPercent)}% (${stats.noOfLongsWon}/${stats.noOfLongs})`),\n            createCell('Shorts Won', `${to2dpstring(stats.shortsWonPercent)}% (${stats.noOfShortsWon}/${stats.noOfShorts})`)\n        ],\n        [\n            createCell(\n                'Best Trade',\n                formatMoney(stats.bestTrade)\n            ),\n            createCell(\n                'Worst Trade',\n                formatMoney(stats.worstTrade)\n            )\n        ],\n        [\n            createCell(\n                'Highest Balance',\n                to2dpstring(stats.highestBalance)\n            ),\n            createCell('Average RRR', to2dpstring(stats.aveRRR))\n        ],\n        [\n            createCell('Profit Factor', to2dpstring(stats.profitFactor)),\n            createCell(\n                'Expectancy',\n                to2dpstring(stats.expectancy)\n            )\n        ],\n        [\n            //createCell('Lots', to2dpstring(stats.lots)),\n            createCell(\n                'Commission',\n                formatMoney(stats.commissions)\n            )\n        ]\n    ]\n    return rows;\n}\n\nconst createCell = (heading: string, content: string, color: string | undefined = undefined) => {\n    return(\n        <StatsTableCell\n            heading={heading}\n            content={content}\n            color={color} />\n    )\n}\n\nconst StatsTableCell = ({heading, content, color}: any) => {\n    return(\n        <div>\n            <BP style={{color: getColor('dark-gray')}}>{heading}</BP>\n            <P style={{color: color}}>{content}</P>\n        </div>\n    )\n}\n\nexport default createRows","import {ReactNode} from 'react'\nimport {getColor} from '@conf/utils'\nimport {OverviewStatsCalc} from 'calculator/dist'\nimport {Table} from '@apps/trader-app/components'\nimport createRows from './create-rows'\n\n\nconst OverviewStats = ({stats}: {stats: OverviewStatsCalc}) => {\n    const rows: Array<Array<ReactNode>> = createRows(stats);\n    \n    return(\n        <div>\n            <Table\n                title='Statistics'\n                rows={rows}\n                style={{textAlign: 'left'}}\n                bodyColumnConditionalStyle={{\n                    condition: (columnIndex) => columnIndex % 2 !== 0,\n                    style: {background: getColor('light-gray')}\n                }}\n                data-testid='overview-stats' />\n        </div>\n    );\n}\n\n\nexport default OverviewStats","import {ReactNode} from 'react'\nimport {OverviewWeeklySummaryCalc} from 'calculator'\nimport {P} from '@components/text'\nimport {formatMoney} from '@apps/trader-app/utils'\nimport {getColor} from '@conf/utils'\n\n\nconst createRows = (summary: OverviewWeeklySummaryCalc): Array<Array<ReactNode>> => {\n    const rows = \n        Object.keys(summary).map((date) => (\n            [\n                <P>{date}</P>,\n                <P>{summary[date].trades.toString()}</P>,\n                resultInColor(summary[date].result),\n            ]\n        ));\n    return rows\n}\n\nconst resultInColor = (result: number): ReactNode => {\n    return result === 0 ?\n        <P>{formatMoney(result)}</P> \n        : result < 0 ? \n            <P style={{color: getColor('red')}}>{formatMoney(result)}</P> \n            : <P style={{color: getColor('light-blue')}}>{formatMoney(result)}</P>\n}\n\nexport default createRows","import {ReactNode} from 'react'\nimport {OverviewWeeklySummaryCalc} from 'calculator'\nimport {getColor} from '@conf/utils'\nimport {Table} from '@apps/trader-app/components'\nimport createRows from './create-rows'\n\n\nconst WeeklySummary = ({summary}: {summary: OverviewWeeklySummaryCalc}) => {\n    const rows: Array<Array<ReactNode>> = createRows(summary);\n    const headers: string[] = ['Date', 'Trades', 'Result'];\n    return(\n        <div>\n            <Table\n                title='Weekly Summary'\n                headers={headers} \n                rows={rows}\n                headerStyle={{textAlign: 'center'}}\n                bodyColumnConditionalStyle={{\n                    condition: (columnIndex) => columnIndex % 2 !== 0 ? true : false,\n                    style: {backgroundColor: getColor('light-gray')}\n                }}\n                data-testid='weekly-summary'\n                />\n        </div>\n    );\n}\n\nexport default WeeklySummary","import {useState} from 'react'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport {overviewCalculations, OverviewCalculations} from 'calculator'\nimport {defaultOverviewCalc} from './const'\nimport OverviewCards from './overview-cards'\nimport AccountReturnsGraph from './account-returns-graph'\nimport OverviewStats from './overview-stats'\nimport WeeklySummary from './weekly-summary'\nimport './style.css'\n\n\nconst Overview = () => {\n    const [overviewCalc, setOverviewCalc] = useState<OverviewCalculations>(defaultOverviewCalc);\n    useRecalc(overviewCalculations, setOverviewCalc);\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Overview' />\n            <OverviewCards calc={overviewCalc.cardsCalc} />\n            <AccountReturnsGraph data={overviewCalc.accountReturnsGraphCalc} />\n            <div id='apps-trader-app-pages-overview-stats-and-weekly-summary-container'>\n                <OverviewStats stats={overviewCalc.statsCalc} />\n                <WeeklySummary summary={overviewCalc.weeklySummaryCalc} />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Overview","import {CashGraphCalc} from 'calculator'\nimport {Graph} from '@apps/trader-app/components'\n\n\nconst CashGraph = ({data}: {data: CashGraphCalc}) => {\n    const options = {\n        'Today': data.todayGraphCalc,\n        'This Week': data.thisWeekGraphCalc,\n        'This Month': data.thisMonthGraphCalc,\n        'This Year': data.thisYearGraphCalc,\n        'All Time': data.allTimeGraphCalc\n    }\n    return(\n        <Graph\n            title='Cash'\n            selectorOptions={options}\n            xAxisKey='tradeNo'\n            yAxisKey='balance'\n            outline={true}\n            data-testid='cash-graph'\n            />\n    )\n}\n\nexport default CashGraph","import {CashAndGainsCalculations, CashGraphCalc, GainsGraphCalc} from 'calculator'\n\nconst defaultGraphCalc = {\n    todayGraphCalc: [],\n    thisWeekGraphCalc: [],\n    thisMonthGraphCalc: [],\n    thisYearGraphCalc: [],\n    allTimeGraphCalc: []\n}\n\nconst defaultCashGraphCalc: CashGraphCalc = defaultGraphCalc;\n\nconst defaultGainsGraphCalc: GainsGraphCalc = defaultGraphCalc;\n\nconst defaultCashAndGainsCalc: CashAndGainsCalculations = {\n    cashGraphCalc: defaultCashGraphCalc,\n    gainsGraphCalc: defaultGainsGraphCalc\n}\n\nexport default defaultCashAndGainsCalc","import {GainsGraphCalc, GainsGraphItem} from 'calculator'\nimport defaultCashAndGainsCalc from '../const'\n\n\n/**\n * @param rawData: the raw calculations from the calculator\n * @returns: the calculations, but with numbers in only 2 decimal places\n */\nconst formatData = (rawData: GainsGraphCalc) => {\n    const refinedData: GainsGraphCalc = defaultCashAndGainsCalc.gainsGraphCalc;\n    Object.keys(refinedData).map((objKey) => {\n        const key = objKey as GainsGraphCalcKey;\n        refinedData[key] = rawData[key].map((graphItem: GainsGraphItem) => {\n            return {\n                ...graphItem,\n                gainsPercent: parseFloat(graphItem.gainsPercent.toFixed(2))\n            }\n        })\n    })\n    return refinedData\n}\n\ntype GainsGraphCalcKey = keyof(GainsGraphCalc);\n\nexport default formatData","import {GainsGraphCalc} from 'calculator'\nimport {Graph} from '@apps/trader-app/components'\nimport formatData from './format-data'\n\n\nconst GainsGraph = ({data}: {data: GainsGraphCalc}) => {\n    const refinedData = formatData(data);\n    const options = {\n        'Today': refinedData.todayGraphCalc,\n        'This Week': refinedData.thisWeekGraphCalc,\n        'This Month': refinedData.thisMonthGraphCalc,\n        'This Year': refinedData.thisYearGraphCalc,\n        'All Time': refinedData.allTimeGraphCalc\n    }\n    return(\n        <Graph\n            title='Gains'\n            selectorOptions={options}\n            xAxisKey='tradeNo'\n            yAxisKey='gainsPercent'\n            tooltipName='Gains %'\n            outline={true}\n            data-testid='gains-graph'\n            />\n    )\n}\n\nexport default GainsGraph","import {useState} from 'react'\nimport {cashAndGainsCalculations} from 'calculator'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport CashGraph from './cash-graph'\nimport GainsGraph from './gains-graph'\nimport defaultCashAndGainsCalc from './const'\nimport './style.css'\n\n\nconst CashAndGains = () => {\n    const [cashAndGainsCalc, setCashAndGainsCalc] = useState(defaultCashAndGainsCalc);\n    useRecalc(cashAndGainsCalculations, setCashAndGainsCalc);\n    return(\n        <PageContainer className='apps-trader-app-pages-cash-and-gains-container'>\n            <PageHeading heading='Cash and Gains' />\n            <CashGraph data={cashAndGainsCalc.cashGraphCalc} />\n            <GainsGraph data={cashAndGainsCalc.gainsGraphCalc} />\n        </PageContainer>\n    )\n}\n\nexport default CashAndGains","import {BP, P} from '@components/text'\nimport {ExpensesTableCalc} from 'calculator'\n\n\nconst createRows = (calcs: ExpensesTableCalc) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.pair}</BP>,\n        <P>{calc.commission ? calc.commission.toString() : '0'}</P>,\n        <P>{calc.swap ? calc.swap.toString() : '0'}</P>\n    ]));\n    return rows\n}\n\nexport default createRows","import {ExpensesCalc} from 'calculator'\n\n\nconst defaultExpensesCalc: ExpensesCalc = {\n    expensesTableCalc: []\n}\n\nexport default defaultExpensesCalc","import {useState} from 'react'\nimport {ExpensesCalc, expensesCalculations} from 'calculator'\nimport {PageContainer, PageHeading, Table, useRecalc} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport defaultExpensesCalc from './const'\n\n\nconst Expenses = () => {\n    const [expensesCalc, setExpensesCalc] = useState(defaultExpensesCalc);\n    const headers = ['Pair', 'Commissions ($)', 'Swap Fees ($)'];\n    const [rows, setRows] = useState(createRows(expensesCalc.expensesTableCalc));\n    useRecalc(expensesCalculations, setExpensesCalc, (newExpensesCalc: ExpensesCalc) => {\n        setRows(createRows(newExpensesCalc.expensesTableCalc));\n    });\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Expenses' />\n            <Table\n                headers={headers}\n                rows={rows}\n                bodyColumnConditionalStyle={{\n                    condition: (i) => i === 1,\n                    style: {background: getColor('light-gray')}\n                }}\n                data-testid='expenses-table'\n                />\n        </PageContainer>\n    )\n}\n\nexport default Expenses","import {BP, P} from '@components/text'\nimport {formatMoney, formatPercent, to2dpstring} from '@apps/trader-app/utils'\nimport {LongShortComparisonTableCalc} from 'calculator/dist'\n\n\nconst createRows = (data: LongShortComparisonTableCalc) => {\n    return(\n        [\n            [\n                <BP>No. of Trades</BP>,\n                <P>{data.long.noOfTrades.toString()}</P>,\n                <P>{data.short.noOfTrades.toString()}</P>\n            ],\n            [\n                <BP>Result</BP>,\n                <P>{formatMoney(data.long.result)}</P>,\n                <P>{formatMoney(data.short.result)}</P>\n            ],\n            [\n                <BP>Win Rate</BP>,\n                <P>{formatPercent(data.long.winRate)}</P>,\n                <P>{formatPercent(data.short.winRate)}</P>\n            ],\n            [\n                <BP>Average Profit</BP>,\n                <P>{formatMoney(data.long.aveProfit)}</P>,\n                <P>{formatMoney(data.short.aveProfit)}</P>\n            ],\n            [\n                <BP>RRR</BP>,\n                <P>{to2dpstring(data.long.rrr)}</P>,\n                <P>{to2dpstring(data.short.rrr)}</P>\n            ],\n        ]\n    )\n}\n\nexport default createRows","import {Table} from'@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport { LongShortComparisonTableCalc } from 'calculator/dist'\n\nconst LongShortComparisonTable = ({data}: {data: LongShortComparisonTableCalc}) => {\n    const headers = ['', 'Long', 'Short'];\n    const rows = createRows(data);\n    return(\n        <div>\n            <Table\n                title='Long / Short Comparison'\n                headers={headers}\n                rows={rows}\n                headerStyle={{textAlign: 'center'}}\n                bodyColumnConditionalStyle={[\n                    {\n                        condition: (columnIndex) => columnIndex === 0,\n                        style: {textAlign: 'left'}\n                    },\n                    {\n                        condition: (columnIndex) => columnIndex === 1,\n                        style: {background: getColor('xlight-green')}\n                    },\n                    {\n                        condition: (columnIndex) => columnIndex === 2,\n                        style: {background: getColor('light-red')}\n                    }\n                ]}\n                data-testid='long-short-comparison-table'\n            />\n        </div>\n    )\n}\n\nexport default LongShortComparisonTable","import {Graph} from '@apps/trader-app/components'\nimport {LongShortComparisonGraphCalc} from 'calculator/dist'\n\n\nconst LongShortBarGraph = ({data}: {data: LongShortComparisonGraphCalc}) => {\n    return(\n        <div>\n            <Graph\n                title='Long / Short'\n                data={data}\n                variant='bar'\n                xAxisKey='label'\n                yAxisKey='result'\n                outline={true}\n                headerIsOutside={true}\n                headerPaddingTop={0}\n                height={270}\n                data-testid='long-short-bar-graph'\n                />\n        </div>\n    )\n}\n\nexport default LongShortBarGraph","import {Graph} from '@apps/trader-app/components'\nimport {LongBalanceGraphCalc} from 'calculator/dist'\n\n\nconst LongBalanceGraph = ({data}: {data: LongBalanceGraphCalc}) => {\n    return(\n        <Graph\n            title='Long Balance'\n            data={data}\n            xAxisKey='tradeNo'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='long-balance-graph'\n            />\n    );\n}\n\nexport default LongBalanceGraph","import {Graph} from '@apps/trader-app/components'\nimport {ShortBalanceGraphCalc} from 'calculator/dist'\n\n\nconst ShortBalanceGraph = ({data}: {data: ShortBalanceGraphCalc}) => {\n    return(\n        <Graph\n            title='Short Balance'\n            data={data}\n            xAxisKey='tradeNo'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='short-balance-graph'\n            />\n    );\n}\n\nexport default ShortBalanceGraph","import {LongBalanceGraphCalc, LongShortAnalysisCalculations,\n    LongShortComparisonGraphCalc, LongShortComparisonTableCalc, ShortBalanceGraphCalc} from 'calculator'\n\nconst defaultLongShortComparisonGraphCalc: LongShortComparisonGraphCalc = [\n    {label: 'long', result: 0},\n    {label: 'short', result: 0}\n]\n\nconst defaultLongBalanceGraphCalc: LongBalanceGraphCalc = []\n\nconst defaultShortBalanceGraphCalc: ShortBalanceGraphCalc = [];\n\nconst defaultLongShortComparisonTableCalcItem = {\n    noOfTrades: 0,\n    result: 0,\n    winRate: 0,\n    aveProfit: 0,\n    rrr: 0\n}\n\nconst defaultLongShortComparisonTableCalc: LongShortComparisonTableCalc = {\n    long: defaultLongShortComparisonTableCalcItem,\n    short: defaultLongShortComparisonTableCalcItem\n}\n\nconst defaultLongShortAnalysisCalc: LongShortAnalysisCalculations = {\n    longShortComparisonGraphCalc: defaultLongShortComparisonGraphCalc,\n    longBalanceGraphCalc: defaultLongBalanceGraphCalc,\n    shortBalanceGraphCalc: defaultShortBalanceGraphCalc,\n    longShortComparisonTableCalc: defaultLongShortComparisonTableCalc\n}\n\nexport default defaultLongShortAnalysisCalc","import {useState} from 'react'\nimport {longShortAnalysisCalculations} from 'calculator'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport LongShortComparisonTable from './long-short-comparison-table'\nimport LongShortBarGraph from './long-short-bar-graph'\nimport LongBalanceGraph from './long-balance-graph'\nimport ShortBalanceGraph from './short-balance-graph'\nimport defaultLongShortAnalysisCalc from './const'\nimport './style.css'\n\n\nconst LongShortAnalysis = () => {\n    const [longShortAnalysisCalc, setLongShortAnalysisCalc] = useState(defaultLongShortAnalysisCalc);\n    useRecalc(longShortAnalysisCalculations, setLongShortAnalysisCalc);\n\n    return(\n        <PageContainer className='apps-trader-app-pages-long-short-analysis-container'>\n            <PageHeading heading='Long / Short Analysis' />\n            <div>\n                <LongShortComparisonTable data={longShortAnalysisCalc.longShortComparisonTableCalc} />\n                <LongShortBarGraph data={longShortAnalysisCalc.longShortComparisonGraphCalc} />\n            </div>\n            <div>\n                <LongBalanceGraph data={longShortAnalysisCalc.longBalanceGraphCalc} />\n                <ShortBalanceGraph data={longShortAnalysisCalc.shortBalanceGraphCalc} />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default LongShortAnalysis","import {Graph} from '@apps/trader-app/components'\nimport {AveReturnsPerPairGraphCalc} from 'calculator/dist'\n\n\nconst AveReturnPerPairGraph = ({data}: {data: AveReturnsPerPairGraphCalc}) => {\n    const graphData: AveReturnsPerPairGraphCalc = data.length === 0 ? [{pair: '', result: 0}]\n        : data\n    return(\n        <Graph\n            title='Average Return Per Pair'\n            variant='bar'\n            data={graphData}\n            xAxisKey='pair'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='ave-returns-per-pair-graph'\n            />\n    )\n}\n\nexport default AveReturnPerPairGraph","import {Graph} from '@apps/trader-app/components'\nimport {AveRrrPerPairGraphCalc} from 'calculator/dist'\n\n\nconst AveRrrPerPairGraph = ({data}: {data: AveRrrPerPairGraphCalc}) => {\n    const graphData: AveRrrPerPairGraphCalc = data.length === 0 ? [{pair: '', rrr: 0}]\n        : data\n    return(\n        <Graph\n            title='Average RRR Per Pair'\n            variant='bar'\n            data={graphData}\n            xAxisKey='pair'\n            yAxisKey='rrr'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='ave-rrr-per-pair-graph'\n            />\n    )\n}\n\nexport default AveRrrPerPairGraph","import {BP, P} from '@components/text'\nimport {getColor} from '@conf/utils'\nimport {formatPercent, to2dp} from '@apps/trader-app/utils'\nimport {PairsTableCalc} from './types'\n\n\nconst createRows = (calcs: Array<PairsTableCalc>) => {\n    const rows = calcs.map((calc) => ([\n        <BP style={{color: getColor('dark-gray')}}>{calc.pair}</BP>,\n        <P>{calc.noOfTradesOnPair.toString()}</P>,\n        <P>{noWithPercent(calc.noOfProfitableTradesOnPair, calc.profitableTradesOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfLosingTradesOnPair, calc.losingTradesOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfShortsOnPair, calc.shortsOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfLongsOnPair, calc.longsOnPairPercent)}</P>,\n        <P>{noWithPercent(to2dp(calc.noOfTpOnPair), calc.tpOnPairPercent)}</P>,\n        <P>{noWithPercent(to2dp(calc.noOfSlOnPair), calc.slOnPairPercent)}</P>,\n    ]));\n    return rows;\n}\n\nconst noWithPercent = (n: number, percent: number) => {\n    return `${n} (${formatPercent(percent)})`\n}\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {HeaderItemObject} from '@apps/trader-app/components/table/types'\nimport { getColor } from '@conf/utils'\nimport createRows from './create-rows'\nimport {PairsTablePropTypes} from './types'\n\n\nconst PairsTable = ({calc}: PairsTablePropTypes) => {\n    const rows = createRows(calc);\n    return(\n        <Table\n            headers={[\n                [\n                    headerObj('Pair', 2), headerObj('Positions', 2),\n                    headerObj('Trades (%)', 2), headerObj('Triggered Positions (%)', 2)],\n                ['', 'Total', 'Profitable', 'Losing', 'Short', 'Long', 'TP', 'SL']\n            ]}\n            rows={rows}\n            headerStyle={{\n                textAlign: 'center'\n            }}\n            headerRowTextConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {color: getColor('dark-gray')}\n            }}\n            bodyColumnConditionalStyle={[\n                {condition: (i) => i === 1, style: {background: getColor('light-gray')}},\n                {condition: (i) => i === 2 || i === 6, style: {background: getColor('xlight-green')}},\n                {condition: (i) => i === 3 || i === 7, style: {background: getColor('light-red')}}\n            ]}\n            data-testid='pairs-table'\n            />\n    );\n}\n\nconst headerObj = (name: string, colSpan?: number) => {\n    const obj: HeaderItemObject = {name};\n    if(colSpan !== undefined){\n        obj.colSpan = colSpan;\n    }\n    return obj\n}\n\nexport default PairsTable","import {PairsAnalysisCalculations, AveReturnsPerPairGraphCalc,\n    AveRrrPerPairGraphCalc, PairsAnalysisTableCalc} from 'calculator/dist'\n\n\nconst defaultAveReturnPerPairGraphCalc: AveReturnsPerPairGraphCalc = [\n    //{pair: 'GBPJPY', result: 420},\n]\nconst defaultAveRrrPerPairGraphData: AveRrrPerPairGraphCalc = [\n    //{pair: 'GBPJPY', rrr: 4}\n]\nconst defaultPairsAnalysisTableCalc: PairsAnalysisTableCalc = [\n    /*\n    {\n        pair: '',\n        noOfTradesOnPair: 0,\n        noOfProfitableTradesOnPair: 0,\n        profitableTradesOnPairPercent: 0,\n        noOfLosingTradesOnPair: 0,\n        losingTradesOnPairPercent: 0,\n        noOfShortsOnPair: 0,\n        shortsOnPairPercent: 0,\n        noOfLongsOnPair: 0,\n        longsOnPairPercent: 0,\n        noOfTpOnPair: 0,\n        tpOnPairPercent: 0,\n        noOfSlOnPair: 0,\n        slOnPairPercent: 0\n    }\n    */\n]\n\nconst defaultPairsAnalysisCalc: PairsAnalysisCalculations = {\n    aveReturnsPerPairGraphCalc: defaultAveReturnPerPairGraphCalc,\n    aveRrrPerPairGraphCalc: defaultAveRrrPerPairGraphData,\n    pairsAnalysisTableCalc: defaultPairsAnalysisTableCalc\n}\n\nexport {\n    defaultPairsAnalysisCalc\n}","import {useState} from 'react'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport AveReturnPerPairGraph from './ave-return-per-pair-graph'\nimport AveRrrPerPairGraph from './ave-rrr-per-pair-graph'\nimport PairsTable from './pairs-table'\nimport {useRecalc} from '@apps/trader-app/components'\nimport {pairsAnalysisCalculations, PairsAnalysisCalculations} from 'calculator'\nimport {defaultPairsAnalysisCalc} from './const'\n\n\n\nconst PairsAnalysis = () => {\n    const [pairsAnalysisCalc, setPairsAnalysisCalc] = useState<PairsAnalysisCalculations>(defaultPairsAnalysisCalc);\n    useRecalc(pairsAnalysisCalculations, setPairsAnalysisCalc);\n    return(\n        <PageContainer>\n            <PageHeading heading='Pairs Analysis' />\n            <PairsTable calc={pairsAnalysisCalc.pairsAnalysisTableCalc} />\n            <AveReturnPerPairGraph data={pairsAnalysisCalc.aveReturnsPerPairGraphCalc} />\n            <AveRrrPerPairGraph data={pairsAnalysisCalc.aveRrrPerPairGraphCalc} />\n        </PageContainer>\n    )\n}\n\nexport default PairsAnalysis","import {DailyReturnsPerPeriodGraphCalc, MonthlyReturnsPerPeriodGraphCalc,\n    PeriodAnalysisCalculations, ReturnsPerPeriodGraphCalc, YearlyReturnsPerPeriodGraphCalc} from 'calculator'\n\n\nconst defaultDailyReturns: DailyReturnsPerPeriodGraphCalc = [\n    {day: 'Monday', result: 0},\n    {day: 'Tuesday', result: 0},\n    {day: 'Wednesday', result: 0},\n    {day: 'Thursday', result: 0},\n    {day: 'Friday', result: 0}\n]\n\nconst defaultMonthlyReturns: MonthlyReturnsPerPeriodGraphCalc = [\n    {month: 'January', result: 0},\n    {month: 'February', result: 0},\n    {month: 'March', result: 0},\n    {month: 'April', result: 0},\n    {month: 'May', result: 0},\n    {month: 'June', result: 0},\n    {month: 'July', result: 0},\n    {month: 'August', result: 0},\n    {month: 'September', result: 0},\n    {month: 'October', result: 0},\n    {month: 'November', result: 0},\n    {month: 'December', result: 0},\n]\n\nconst defaultYearlyReturns: YearlyReturnsPerPeriodGraphCalc = []\n\nconst defaultReturnsPerPeriodGraphCalc: ReturnsPerPeriodGraphCalc = {\n    daily: defaultDailyReturns,\n    monthly: defaultMonthlyReturns,\n    yearly: defaultYearlyReturns\n}\n\nconst defaultPeriodAnalysisCalculations: PeriodAnalysisCalculations = {\n    returnsPerPeriodGraphCalc: defaultReturnsPerPeriodGraphCalc\n}\n\nexport default defaultPeriodAnalysisCalculations","import {useState} from 'react'\nimport {PeriodAnalysisCalculations, ReturnsPerPeriodGraphCalc, periodAnalysisCalculations} from 'calculator'\nimport {Graph, PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport defaultPeriodAnalysisCalc from './const'\n\n\nconst PeriodAnalysis = () => {\n    const [periodAnalysisCalc, setPeriodAnalysisCalc] = useState<PeriodAnalysisCalculations>(defaultPeriodAnalysisCalc);\n    useRecalc(periodAnalysisCalculations, setPeriodAnalysisCalc);\n    const returnsPerPeriodGraphCalc: ReturnsPerPeriodGraphCalc = {\n        ...periodAnalysisCalc.returnsPerPeriodGraphCalc,\n        yearly: periodAnalysisCalc.returnsPerPeriodGraphCalc.yearly.length === 0 ?\n            [{year: 0, result: 0}, {year: 0, result: 0}]\n            : periodAnalysisCalc.returnsPerPeriodGraphCalc.yearly\n    }\n    return(\n        <PageContainer>\n            <PageHeading heading='Period Analysis' />\n            <Graph\n                title='Returns Per Period'\n                variant='bar'\n                xAxisKey={{'daily': 'day', 'monthly': 'month', 'yearly': 'year'}}\n                yAxisKey='result'\n                selectorOptions={returnsPerPeriodGraphCalc}\n                outline={true}\n                data-testid='returns-per-period-graph'\n                />\n        </PageContainer>\n    )\n}\n\nexport default PeriodAnalysis","import {Graph} from '@apps/trader-app/components'\nimport {TimeAnalysisGraphCalc, TimeAnalysisGraphCalcItem} from 'calculator'\n\n\nconst TimeAnalysisGraph = ({data}: {data: TimeAnalysisGraphCalc}) => {\n    const format = (data: TimeAnalysisGraphCalcItem[]) => {\n        if(data.length === 0){\n            return [{openHour: '', result: 0}]\n        }\n        return data\n    }\n    const options = {\n        'Today': format(data.todayGraphCalc),\n        'This Week': format(data.thisWeekGraphCalc),\n        'This Month': format(data.thisMonthGraphCalc),\n        'This Year': format(data.thisYearGraphCalc),\n        'All Time': format(data.allTimeGraphCalc)\n    }\n    return(\n        <Graph\n            title='Open Hour'\n            variant='bar'\n            xAxisKey='openHour'\n            yAxisKey='result'\n            selectorOptions={options}\n            outline={true}\n            data-testid='open-hour-graph'\n            />\n    )\n}\n\nexport default TimeAnalysisGraph","import {P, BP} from '@components/text'\nimport {TradeDurationCalc} from './types'\n\nconst createRows = (calcs: Array<TradeDurationCalc>) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.duration}</BP>,\n        <P>{calc.noOfTrades.toString()}</P>,\n        <P>{calc.result < 0 ? `-$${-1 *calc.result}` : `$${calc.result}`}</P>\n    ]))\n    return rows\n}\n\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {TradeDurationCalc} from './types'\n\n\nconst TradeDurationTable = ({calc}: {calc: Array<TradeDurationCalc>}) => {\n    const headers = ['Duration', 'Num. of Trades', 'Result'];\n    const rows = createRows(calc);\n    return(\n        <Table\n            title='Results By Trade Duration'\n            headers={headers}\n            rows={rows}\n            bodyColumnConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {background: getColor('light-gray')}\n            }}\n            data-testid='trade-duration-table'\n            />\n    )\n}\n\nexport default TradeDurationTable","import {P, BP} from '@components/text'\nimport {OpenHourTableCalc} from 'calculator'\n\nconst createRows = (calcs: OpenHourTableCalc) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.hour}</BP>,\n        <P>{calc.noOfTrades.toString()}</P>,\n        <P>{calc.result < 0 ? `-$${-1 *calc.result}` : `$${calc.result}`}</P>\n    ]))\n    return rows\n}\n\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {OpenHourTableCalc} from 'calculator'\n\n\nconst OpenHourTable = ({calc}: {calc: OpenHourTableCalc}) => {\n    const headers = ['Open Hour', 'Num. of Trades', 'Result'];\n    const rows = createRows(calc);\n    return(\n        <Table\n            title='Results By Open Hour'\n            headers={headers}\n            rows={rows}\n            bodyColumnConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {background: getColor('light-gray')}\n            }}\n            data-testid='open-hour-table'\n            />\n    )\n}\n\nexport default OpenHourTable","import {OpenHourTableCalc, TimeAnalysisGraphCalc,\n    TradeDurationTableCalc, TradingTimeAnalysisCalculations} from 'calculator';\n\nconst defaultTradeDurationTableCalc: TradeDurationTableCalc =  [];\n\nconst defaultOpenHourCalc: OpenHourTableCalc = [];\n\nconst defaultTimeAnalysisGraphCalc: TimeAnalysisGraphCalc = {\n    todayGraphCalc: [],\n    thisWeekGraphCalc: [],\n    thisMonthGraphCalc: [],\n    thisYearGraphCalc: [],\n    allTimeGraphCalc: []\n}\n\nconst defaultTradingTimeAnalysis: TradingTimeAnalysisCalculations = {\n    timeAnalysisGraphCalc: defaultTimeAnalysisGraphCalc,\n    tradeDurationTableCalc: defaultTradeDurationTableCalc,\n    openHourTableCalc: defaultOpenHourCalc\n}\n\nexport default defaultTradingTimeAnalysis   ","import {useState} from 'react'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport {TradingTimeAnalysisCalculations, tradingTimeAnalysisCalculations} from 'calculator'\nimport TimeAnalysisGraph from './time-analysis-graph'\nimport TradeDurationTable from './trade-duration-table'\nimport OpenHourTable from './open-hour-table'\nimport defaultTradingTimeAnalysisCalc from './const'\nimport './style.css'\n\n\nconst TimeAnalysis = () => {\n    const [\n        tradingTimeAnalysisCalc,\n        setTradingTimeAnalysisCalc\n    ] = useState<TradingTimeAnalysisCalculations>(defaultTradingTimeAnalysisCalc);\n    useRecalc(tradingTimeAnalysisCalculations, setTradingTimeAnalysisCalc);\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Trading Time Analysis' />\n            <TimeAnalysisGraph data={tradingTimeAnalysisCalc.timeAnalysisGraphCalc} />\n            <div id='apps-trader-app-pages-time-analysis-tables-container'>\n                <TradeDurationTable calc={tradingTimeAnalysisCalc.tradeDurationTableCalc} />\n                <OpenHourTable calc={tradingTimeAnalysisCalc.openHourTableCalc} />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default TimeAnalysis","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\n\n\nconst EmailSection = ({email}: {email: string}) => {\n    return(\n        <ColumnBox>\n            <H6>Your Email</H6>\n            <P>{email}</P>\n        </ColumnBox>\n    )\n}\n\nexport default EmailSection","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport {RouteConst} from '@conf/const'\n\n\nconst ChangePasswordSection = () => {\n    const {INFO_CHANGE_PASSWORD_ROUTE} = RouteConst;\n    return(\n        <ColumnBox>\n            <H6>Your Password</H6>\n            <P>Change your password</P>\n            <a\n                href={`/${INFO_CHANGE_PASSWORD_ROUTE}`}\n                target='_blank'\n                rel='noreferrer'\n                >change password</a>\n        </ColumnBox>\n    )\n}\n\nexport default ChangePasswordSection","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\n\n\nconst SubscribeSection = () => {\n    return(\n        <ColumnBox>\n            <H6>Subscribe</H6>\n            <P>Subscribe you fool &nbsp;</P> <i>or else...</i>\n        </ColumnBox>\n    )\n}\n\nexport default SubscribeSection","import {useContext, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport {Button} from '@components/buttons'\nimport {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport {Http} from '@apps/trader-app/services'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport Dialog from '@components/dialog'\nimport {ToastContext} from '@components/toast'\n\n\nconst DeleteAccountSection = () => {\n    const navigate = useNavigate();\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const Toast = useContext(ToastContext);\n    const deleteAccount = () => {\n        const {BASE_URL, DELETE_ACCOUNT_URL} = HttpConst;\n        const {INFO_LOGIN_ROUTE} = RouteConst;\n        Http.delete({\n            url: `${BASE_URL}/${DELETE_ACCOUNT_URL}/`,\n            successFunc: () => {\n                navigate(`/${INFO_LOGIN_ROUTE}`);\n            },\n            errorFunc: () => {\n                Toast.error('Sorry. Something went wrong');\n            }\n        })\n    }\n    return(\n        <ColumnBox>\n            <Dialog\n                title='Delete Account?'\n                okButtonColor='error'\n                okButtonText='Delete Account'\n                okButtonProps={{'data-testid': 'confirm-delete-account-button'}}\n                onOkClick={() => deleteAccount()}\n                onCancelClick={() => setDialogIsOpen(false)}\n                onClose={() => setDialogIsOpen(false)}\n                open={dialogIsOpen}>\n                    <P>Are you sure you want to delete your account.</P>\n                    <P>All your data will be deleted.</P>\n            </Dialog>\n            <H6>Delete Account</H6>\n            <P>Permanently delete your account. </P>\n            <ColumnBox style={{display: 'inline'}}>\n                <Button\n                    onClick={() => setDialogIsOpen(true)}\n                    color='error'\n                    data-testid='delete-account-button'>Delete Account</Button>\n            </ColumnBox>\n        </ColumnBox>\n    )\n}\n\nexport default DeleteAccountSection","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\n\n\nconst DsUsernameSection = ({dsUsername}: {dsUsername: string}) => {\n    return(\n        <ColumnBox>\n            <H6>Your Metatrader Username</H6>\n            <P>{dsUsername}</P>\n        </ColumnBox>\n    )\n}\n\nexport default DsUsernameSection","import {useContext} from 'react'\nimport {GlobalDataContext} from '@apps/trader-app'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport EmailSection from './email-section'\nimport ChangePasswordSection from './change-password-section'\nimport SubscribeSection from './subscribe-section'\nimport DeleteAccountSection from './delete-account'\nimport DsUsernameSection from './ds-username-section'\nimport './style.css'\n\n\nconst Settings = () => {\n    const globalData = useContext(GlobalDataContext);\n    return(\n        <PageContainer>\n            <PageHeading heading='Settings' dontShowSelector={true} />\n            <div id='apps-trader-app-pages-settings-sections'>\n                <EmailSection email={globalData.getUserEmail()} />\n                <DsUsernameSection dsUsername={globalData.getUserDsUsername()} />\n                <ChangePasswordSection />\n                <SubscribeSection />\n                <DeleteAccountSection />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Settings","/**\n * A class to represent the global data from the backend\n * \n * Format of global data from backend:\n * The index of the trades, withdrawals and deposits arrays in data corresponds to the index of the account\n * it is associated with in the accounts array\n * user_data: {\n *   id: id of current user,\n *   email: email-of-current-user,\n *   is_subscribed: subscription-status-of-current-user,\n *   on_free: true or false, whether or not user is still using free version,\n *   logins_after_ask: number of times user logged in after last feedback popup question,\n *   current_feedback_question: index of the current feedback question\n * },\n * trade_data: {\n *        'no_of_trades': total number of trades the user has added\n *        'current_account_id': id-of-currently-selected-account,\n *        'accounts': {\n *            'Account id': {\n *                    'name': 'Name of the account',\n *                    'trades': [trades],\n *                    'deposits': [deposits],\n *                    'withdrawals': [withdrawals]\n *            },\n *            ...\n *        }\n *    }\n*/\n\nimport {RawData} from './types'\nimport {cloneObject} from './utils'\n\nclass GlobalData {\n    rawData: RawData;\n    constructor(rawData: RawData | null){\n        if(rawData === null){\n            this.rawData = initialEmptyRawData;\n        } else {\n            this.rawData = rawData\n        }\n        this.hasLoaded = this.hasLoaded.bind(this);\n        this.getCurrentTradeAccountData = this.getCurrentTradeAccountData.bind(this);\n        this.getCurrentTradeAccountId = this.getCurrentTradeAccountId.bind(this);\n        this.getCurrentTradeAccountName = this.getCurrentTradeAccountName.bind(this);\n        this.getTradeAccountNames = this.getTradeAccountNames.bind(this);\n        this.changeCurrentTradeAccountId = this.changeCurrentTradeAccountId.bind(this);\n        this.getTradeAccountIdOf = this.getTradeAccountIdOf.bind(this);\n        this.getUserEmail = this.getUserEmail.bind(this);\n        this.userIsSubscribed = this.userIsSubscribed.bind(this);\n        this.userIsOnFreeTrial = this.userIsOnFreeTrial.bind(this);\n    }\n    /** Has the data from the backend loaded */\n    hasLoaded(){\n        /** A real user id is always a positive number an never negative */\n        return this.rawData.user_data.id !== -1\n    }\n    /** What is the id of the currently selected trading account */\n    getCurrentTradeAccountId(){\n        let accountId = this.rawData.trade_data.current_account_id;\n        if(accountId === -1){\n            return parseInt(Object.keys(this.rawData.trade_data.accounts)[0]);\n        }\n        return accountId;\n    }\n    /** What is the account name of the currently selected trading account */\n    getCurrentTradeAccountName(){\n        if(this.hasLoaded()){\n            let accountId = this.getCurrentTradeAccountId();\n            return this.rawData.trade_data.accounts[accountId].name;\n        } else {\n            return 'None';\n        }\n    }\n    /** What are the names of all the trading accounts */\n    getTradeAccountNames(){\n        const accountIds = Object.keys(this.rawData.trade_data.accounts);\n        if(accountIds.length === 0){\n            /** Just so the account selector will have something to show */\n            return ['None'];\n        }\n        let accountNames: string[] = [];\n        accountIds.forEach((accountId: string) => {\n            accountNames.push(this.rawData.trade_data.accounts[parseInt(accountId)].name);\n        });\n        return accountNames\n    }\n    /** Change the currently selected trading account id to @param newCurrentAccountId */\n    changeCurrentTradeAccountId(newCurrentAccountId: number){\n        const rawDataClone = cloneObject(this.rawData);\n        rawDataClone.trade_data.current_account_id = newCurrentAccountId;\n        return new GlobalData(rawDataClone);\n    }\n    /** Returns an object of all data related to the currently selected account */\n    getCurrentTradeAccountData(){\n        const currentAccountId = this.getCurrentTradeAccountId();\n        return this.rawData.trade_data.accounts[currentAccountId];\n    }\n    /** Given the account name @param accountName, return the associated id */\n    getTradeAccountIdOf(accountName: string){\n        const accountIds = Object.keys(this.rawData.trade_data.accounts);\n        for(const accountId of accountIds){\n            const account = this.rawData.trade_data.accounts[parseInt(accountId)];\n            if(account.name === accountName){\n                return parseInt(accountId);\n            }\n        }\n        /** The fact that this function is called means the id can never be -1\n         * But this line is here just to satisfy the typescript compiler\n         */\n        return -1;\n    }\n    /** Are there any accounts? */\n    noAccounts(){\n        return Object.keys(this.rawData.trade_data.accounts).length === 0;\n    }\n    getUserId(): number {\n        return this.rawData.user_data.id\n    }\n    getUserEmail(){\n        return this.rawData.user_data.email\n    }\n    getUserDsUsername(){\n        return this.rawData.user_data.ds_username;\n    }\n    userIsSubscribed(){\n        return this.rawData.user_data.is_subscribed\n    }\n    userIsOnFreeTrial(){\n        return this.rawData.user_data.on_free\n    }\n}\n\nconst initialEmptyRawData = {\n    user_data: {\n        id: -1,\n        email: '',\n        ds_username: '',\n        is_subscribed: false,\n        on_free: false,\n        logins_after_ask: -1,\n        current_feedback_question: -1\n    },\n    trade_data: {\n        no_of_trades: -1,\n        current_account_id: -1,\n        accounts: {}\n    }\n};\n\nexport default GlobalData","const cloneObject = (obj: Object) => {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport {\n    cloneObject\n}","/**\n * Hook to set global data in TraderApp\n */\n\nimport {useState, useEffect} from 'react'\nimport {GlobalData} from '@apps/trader-app/models'\nimport {Http, HttpErrorType, HttpResponseType} from '@apps/trader-app/services'\nimport {HttpConst} from '@conf/const'\nimport {RawData, UseGlobalDataType} from './types'\nimport {AccountData} from 'calculator/dist'\n\n\nconst useGlobalData: UseGlobalDataType = () => {\n    const [globalData, setGlobalData] = useState<GlobalData>(new GlobalData(null));\n    useEffect(() => {\n        /* The real thing to be used.\n            Going to use dummy data just for development*/\n        // Request init data from backend\n        const {BASE_URL, GET_INIT_DATA_URL} = HttpConst;\n        Http.get({\n            url: `${BASE_URL}/${GET_INIT_DATA_URL}/`,\n            successFunc: (resp: HttpResponseType) => {\n                setGlobalData(new GlobalData(resp.data));\n            },\n            errorFunc: (err: HttpErrorType) => {}\n        })\n    }, [])\n    return [globalData, setGlobalData];\n}\n\nconst noAccountsRawData  = {\n    user_data: {\n        id: 1,\n        email: 'newuser@email.com',\n        ds_username: 'dsusername',\n        is_subscribed: false,\n        on_free: true,\n        logins_after_ask: 2,\n        current_feedback_question: 1\n    },\n    trade_data: {\n        no_of_trades: 0,\n        current_account_id: -1,\n        accounts: {}\n    }\n}\n\nconst someAccounts: {[key: string]: AccountData} = {\n    2: {\n        name: 'kot-demo',\n        trades: [\n            {\n                pair: 'USDGPY',\n                action: 'buy',\n                openTime: '2021-03-21 12:30:00+00:00',\n                closeTime: '2021-06-01 12:30:00+00:00',\n                profitLoss: 320,\n                pips: 3,\n                takeProfit: 20,\n                stopLoss: 13\n            }\n        ],\n        deposits: [\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-30 12:30:00+00:00'\n            },\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-30 12:30:00+00:00'\n            }\n        ],\n        withdrawals: [\n            {\n                account: 2,\n                amount: 20, \n                time: '2021-02-30 12:30:00+00:00'\n            },\n            {\n                account: 2,\n                amount: 50, \n                time: '2021-02-30 12:30:00+00:00'\n            }\n        ]\n    },\n    4: {\n        name: 'kot-live',\n        trades: [\n            {\n                pair: 'USDGPY',\n                action: 'buy',\n                openTime: '2021-12-03 12:30:00+00:00',\n                closeTime: '2022-05-02 12:30:00+00:00',\n                profitLoss: 320,\n                pips: 3,\n                takeProfit: 2,\n                stopLoss: 323\n            }\n        ],\n        deposits: [\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-03 12:30:00+00:00'\n            },\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-03 12:30:00+00:00'\n            }\n        ],\n        withdrawals: [\n            {\n                account: 2,\n                amount: 20, \n                time: '2021-02-03 12:30:00+00:00'\n            },\n            {\n                account: 2,\n                amount: 50, \n                time: '2021-02-03 12:30:00+00:00'\n            }\n        ]\n    }\n}\n\nconst dummyRawData: RawData = {\n    user_data: {\n        id: 3,\n        email: 'sonugademilade8703@gmail.com',\n        ds_username: 'dsusername',\n        is_subscribed: false,\n        on_free: true,\n        logins_after_ask: 2,\n        current_feedback_question: 1\n    },\n    trade_data: {\n        current_account_id: 2,\n        accounts: someAccounts\n    }\n}\n\nexport default useGlobalData","import {ColumnBox, RowBox} from '@components/containers'\nimport {H5, H6, P} from '@components/text'\nimport {HttpConst} from '@conf/const'\nimport {getColor} from '@conf/utils'\n\n\nconst DataSourceSetupInstructions = ({dsUsername, eaDownloadUrls}: {dsUsername: string, eaDownloadUrls: {'mt4': string, 'mt5': string}}) => {\n    return(\n        <ColumnBox\n            style={{\n                width: '100%',\n                height: '100vh',\n                justifyContent: 'center',\n                alignItems: 'center'\n            }}\n            data-testid='data-source-setup-instructions'>\n            <H5>No Accounts Found</H5>\n            <P>Your stats will appear once you set up the MyFxTracker EA</P>\n            <H6>How to start using MyFxTracker</H6>\n            <ol>\n                <li>\n                    <RowBox style={{alignItems: 'baseline'}}>\n                        <P>Download the &nbsp;</P>\n                        <a\n                            href={eaDownloadUrls['mt4']}\n                            download='MyFxTracker.ex4'\n                            style={{\n                                color: getColor('light-blue'),\n                                textDecoration: 'underline',\n                                cursor: 'pointer'\n                            }}\n                            data-testid='download-ea-mt4'>EA for MT4</a>\n                        <P>&nbsp; or the &nbsp;</P>\n                        <a\n                            href={eaDownloadUrls['mt5']}\n                            download='MyFxTracker.ex5'\n                            style={{\n                                color: getColor('light-blue'),\n                                textDecoration: 'underline',\n                                cursor: 'pointer'\n                            }}\n                            data-testid='download-ea-mt5'>EA for MT5</a>\n                    </RowBox>\n                </li>\n                <li><P>Open your Metatrader terminal</P></li>\n                <li><P>Press Ctrl + O </P></li>\n                <li><P>Tick allow WebRequest for listed url and enter https://new.myfxtracker.com</P></li>\n                <li><P>Launch the EA and input your MT username:</P><P>{dsUsername}</P></li>\n                <li><P>Check back in a minute and reload the page</P></li>\n            </ol>\n        </ColumnBox>\n    )\n}\n\n\nexport default DataSourceSetupInstructions","import {createContext, useEffect, Suspense, lazy} from 'react'\nimport {Route, useLocation, useNavigate} from 'react-router-dom'\nimport {TraderAppContainer, TraderAppNavbar} from '@apps/trader-app/components'\nimport Routes from '@components/router'\nimport {RouteConst} from '@conf/const'\nimport {Overview, CashAndGains, Expenses, Settings, LongShortAnalysis,\n    PeriodAnalysis, TimeAnalysis, PairsAnalysis} from '@apps/trader-app/pages'\nimport {GlobalData, useGlobalData} from '@apps/trader-app/models'\nimport {Http, getNoteData} from '@apps/trader-app/services'\nimport {PageLoadingErrorBoundary, PageStillLoading} from '@components/generic-pages'\nimport DataSourceSetupInstructions from './data-source-setup-instructions'\nimport useEaDownloadUrl from './services/ea-download-url'\n\nconst Notebook = lazy(() => import('@apps/trader-app/pages/notes'));\nconst Journal = lazy(() => import('@apps/trader-app/pages/journal'));\n\n\nconst TraderApp = () => {\n    const location = useLocation();\n    /** User and trade data from the backend. Globally required by most trader app pages */\n    const [globalData, setGlobalData] = useGlobalData();\n    /** Function called by account selector to change current account */\n    const onCurrentAccountChange = (newCurrentAccountId: number) => {\n        const newGlobalData = globalData.changeCurrentTradeAccountId(newCurrentAccountId);\n        setGlobalData(newGlobalData);\n    }\n    const navigate = useNavigate();\n    useEffect(() => {\n        Http.initNavigate(navigate);\n    }, [])\n    const eaDownloadUrls = useEaDownloadUrl();\n    const noteData = getNoteData();\n\n    const {TRADER_OVERVIEW_ROUTE, TRADER_JOURNAL_ROUTE, TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE,\n        TRADER_CASH_AND_GAINS_ROUTE, TRADER_SETTINGS_ROUTE, TRADER_PAIRS_ANALYSIS_ROUTE,\n        TRADER_TIME_ANALYSIS_ROUTE, TRADER_PERIOD_ANALYSIS_ROUTE, TRADER_EXPENSES_ROUTE, TRADER_NOTES_ROUTE\n    } = RouteConst;\n    \n    return(\n        <>\n            <TraderAppNavbar />\n            <TraderAppContainer>\n                <GlobalDataContext.Provider value={globalData}>\n                    <CurrentAccountChangerContext.Provider value={onCurrentAccountChange}>\n                        {(() => {\n                            if(globalData.hasLoaded()){\n                                if(globalData.noAccounts()){\n                                    if(location.pathname.endsWith(TRADER_SETTINGS_ROUTE)){\n                                        return <Settings />\n                                    }\n                                    return <DataSourceSetupInstructions\n                                                dsUsername={globalData.getUserDsUsername()}\n                                                eaDownloadUrls={eaDownloadUrls}\n                                                />\n                                } else {\n                                    return (\n                                        <PageLoadingErrorBoundary>\n                                            <Suspense fallback={<PageStillLoading />}>\n                                                <Routes>\n                                                    <Route path={TRADER_OVERVIEW_ROUTE} element={<Overview />} />\n                                                    <Route path={TRADER_JOURNAL_ROUTE} element={<Journal />} />\n                                                    <Route path={TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE} element={<LongShortAnalysis />} />\n                                                    <Route path={TRADER_CASH_AND_GAINS_ROUTE} element={<CashAndGains />} />\n                                                    <Route path={TRADER_PAIRS_ANALYSIS_ROUTE} element={<PairsAnalysis />} />\n                                                    <Route path={TRADER_TIME_ANALYSIS_ROUTE} element={<TimeAnalysis />} />\n                                                    <Route path={TRADER_PERIOD_ANALYSIS_ROUTE} element={<PeriodAnalysis />} />\n                                                    <Route path={TRADER_EXPENSES_ROUTE} element={<Expenses />} />\n                                                    <Route path={TRADER_NOTES_ROUTE} element={<Notebook noteData={noteData} />} />\n                                                    <Route path={TRADER_SETTINGS_ROUTE} element={<Settings />} />\n                                                </Routes>\n                                            </Suspense>\n                                        </PageLoadingErrorBoundary>\n                                    );\n                                }\n                            }\n                            return <PageStillLoading />\n                        })()}\n                    </CurrentAccountChangerContext.Provider>\n                </GlobalDataContext.Provider>\n            </TraderAppContainer>\n        </>\n    );\n}\n\n/** Context to enable all components to have access to globalData */\nconst GlobalDataContext = createContext(new GlobalData(null));\n/**\n * Context for the account selector which is on almost all pages to\n * change accounts.\n * Initialized to empty function to satisfy the Typescript compiler\n * */\nconst CurrentAccountChangerContext = createContext((newCurrentAccountId: number) => {});\n\nexport default TraderApp\nexport {GlobalDataContext, CurrentAccountChangerContext}","import {useContext, useEffect, useState} from 'react'\nimport {DataGrid, GridToolbar, GridColDef, GridRowsProp} from '@mui/x-data-grid'\nimport {BP} from '@components/text'\nimport {PageContainer} from '@apps/trader-app/components'\nimport {GlobalDataContext} from '@apps/trader-app'\n\n\nconst Journal = () => {\n    const globalData = useContext(GlobalDataContext);\n    const columns: GridColDef[] = [\n        {field: 'id', renderHeader: () => <BP>ID</BP>, width: 90},\n        {field: 'openTime', renderHeader: () => (<BP>Open Date Time</BP>), type: 'dateTime', width: 190 },\n        {field: 'closeTime', renderHeader: () => (<BP>Close Date Time</BP>), type: 'dateTime', width: 190 },\n        {field: 'pair', renderHeader: () => (<BP>Pair</BP>), width: 110 },\n        {field: 'action', renderHeader: () => (<BP>Action</BP>), width: 80},\n        {field: 'fee', renderHeader: () => (<BP>Fee</BP>), type: 'number', width: 100},\n        {field: 'profit', renderHeader: () => (<BP>Profit</BP>), type: 'number', width: 120}\n    ];\n    const [rows, setRows] = useState<GridRowsProp>([]);\n    useEffect(() => {\n        if(globalData.hasLoaded()){\n            setRows(globalData.getCurrentTradeAccountData().trades.map((trade, i) => {\n                return {\n                    id: i + 1,\n                    openTime: new Date(trade.openTime).toString().split('GMT')[0],\n                    closeTime: new Date(trade.closeTime).toString().split('GMT')[0],\n                    pair: trade.pair, \n                    action: trade.action.toUpperCase(),\n                    fee: trade.commission !== undefined && trade.swap !== undefined ? trade.commission + trade.swap : 'None Found',\n                    profit: `$${trade.profitLoss}`\n                }\n            }));\n        }\n    }, [globalData])\n\n    return(\n        <PageContainer>\n            <div style={{height: '75vh'}} data-testid='journal-table'>\n                <DataGrid\n                    sx={{marginTop: '100px'}}\n                    columns={columns}\n                    rows={rows}\n                    pageSize={10}\n                    components={{\n                        Toolbar: GridToolbar\n                    }}\n                    />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Journal","import {Http, HttpErrorType, HttpResponseType} from '@apps/trader-app/services'\nimport {HttpConst} from '@conf/const'\n\n\nclass Note {\n    id;\n    title;\n    content;\n    lastEdited;\n    // To synchronize multiple saves\n    // If the note is already being saved, append the current state\n    private isSaving;\n    private saveQueue: NoteData[];\n    constructor(noteData?: NoteData | RawNoteData){\n        if(noteData){\n            this.id = noteData.id;\n            this.title = noteData.title;\n            this.content = noteData.content;\n            if('lastEdited' in noteData){\n                this.lastEdited = new Date(noteData.lastEdited);\n            } else {\n                this.lastEdited = new Date(noteData.last_edited);\n            }\n        } else {\n            this.id = -1;\n            this.title = '';\n            this.content = [{type: 'p', children: [{text: ''}]}];\n            this.lastEdited = new Date();\n        }\n        this.saveQueue = [];\n        this.isSaving = false;\n    }\n\n    private _save(data: NoteData){\n        const {BASE_URL, SAVE_NOTE_URL, UPDATE_NOTE_URL} = HttpConst;\n        let url;\n        let httpMethod;\n        if(this.id === -1){\n            url = `${BASE_URL}/${SAVE_NOTE_URL}/`;\n            httpMethod = Http.post;\n        } else {\n            url = `${BASE_URL}/${UPDATE_NOTE_URL}/${this.id}/`;\n            httpMethod = Http.put;\n        }\n        httpMethod({\n            url,\n            data,\n            successFunc: (resp: HttpResponseType) => {\n                this.id = resp.data.id;\n                const latestChangeToSave = this.saveQueue.pop();\n                // other previous changes dont need to be saved\n                this.saveQueue = [];\n                if(latestChangeToSave === undefined){\n                    this.isSaving = false;\n                } else {\n                    this._save(latestChangeToSave);\n                }\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log(err);\n                Http.toast.error('Sorry. Something went wrong while trying to save your note.');\n            }\n        })\n    }\n\n    save(){\n        if(this.isSaving){\n            // save the last state of the note\n            this.saveQueue.push({\n                id: this.id,\n                title: this.title,\n                content: this.content,\n                lastEdited: this.lastEdited.toISOString()\n            })\n        } else {\n            this.isSaving = true;\n            this._save(this.toNoteData())\n        }\n    }\n\n    delete(): Promise<void> {\n        if(this.id === -1){\n            return Promise.resolve();\n        } else {\n            const {BASE_URL, DELETE_NOTE_URL} = HttpConst\n            return Http.delete({\n                url: `${BASE_URL}/${DELETE_NOTE_URL}/${this.id}/`,\n                successFunc: () => {\n                    return Promise.resolve()\n                },\n                errorFunc: () => {\n                    return Promise.reject();\n                }\n            });\n        }\n    }\n\n    static fromRawData(noteData: NoteData[]): Note[]{\n        return noteData.map((data) => new Note(data))\n    }\n\n    lastEditedToString(): String {\n        return this.lastEdited.toDateString();\n    }\n    hasBeenSaved(){\n        // If the id is -1, then it has never been saved on the backend\n        return this.id != -1;\n    }\n    private toNoteData(){\n        return {\n            id: this.id,\n            title: this.title,\n            content: this.content,\n            lastEdited: this.lastEdited.toISOString()\n        }\n    }\n}\n\ntype NoteData = {\n    id: number,\n    title: string,\n    content: any,\n    lastEdited: string\n}\n\n// From the backend\ntype RawNoteData = {\n    id: number,\n    title: string,\n    content: any,\n    last_edited: string\n}\n\nexport default Note\nexport type {\n    NoteData\n}","import {ToastContext} from '@components/toast'\nimport {Delete} from '@mui/icons-material'\nimport {IconButton, ListItem, ListItemButton, ListItemText, CircularProgress} from '@mui/material'\nimport {useContext, useState} from 'react'\nimport Note from '../models';\n\n\nconst NoteListItem = ({noteItem, active, onClick, removeNoteFromList, noteIndex}: {noteItem: Note, active: boolean, onClick: Function, removeNoteFromList: Function, noteIndex: number}) => {\n    const [isDeleting, setIsDeleting] = useState(false);\n    const Toast = useContext(ToastContext);\n    return(\n        <ListItem>\n            <ListItemButton\n                disabled={isDeleting}\n                onClick={(e) => onClick()}\n                selected={active}>\n                <ListItemText\n                    primary={noteItem.title ? noteItem.title : 'Untitled'}\n                    secondary={noteItem.lastEditedToString()}\n                    />\n            </ListItemButton>\n            {isDeleting ? \n                <CircularProgress />\n                : <IconButton onClick={() => {\n                        setIsDeleting(true);\n                        noteItem.delete()\n                            .then(() => removeNoteFromList(noteIndex))\n                            .catch(() => (\n                                Toast.error('Sorry. Something went wrong when trying to delete your note.')\n                            ))\n                            .then(() => setIsDeleting(false))\n                    }}><Delete /></IconButton>\n                }\n        </ListItem>\n    )\n}\n\nexport default NoteListItem","import {Divider, List, Slide,} from '@mui/material'\nimport {useRef} from 'react'\nimport NoteListItem from './note-list-item'\nimport Note from '../models'\n\n\nconst NoteList = ({noteItems, onNoteSelect, isEditing, removeNoteFromList}: {noteItems: Note[], onNoteSelect: Function, isEditing: boolean, removeNoteFromList: Function}) => {\n    const listContainerRef = useRef<HTMLDivElement>(null);\n    return(\n        <div ref={listContainerRef}>\n            <Slide direction='right' in={!isEditing} container={listContainerRef.current}>\n                <List>\n                    {noteItems.map((noteItem: any, i: number) => (\n                        <>\n                            <NoteListItem\n                                key={i}\n                                noteIndex={i}\n                                noteItem={noteItem}\n                                active={false}\n                                onClick={() => {\n                                    onNoteSelect(i);\n                                }}\n                                removeNoteFromList={removeNoteFromList} />\n                            <Divider />\n                        </>\n                    ))}\n                </List>\n            </Slide>\n        </div>\n    )\n}\n\nexport default NoteList","import {getPluginType, MARK_BOLD, MARK_UNDERLINE, MARK_STRIKETHROUGH, MARK_ITALIC,\n    MARK_SUBSCRIPT, MARK_SUPERSCRIPT, PlateEditor} from '@udecode/plate'\nimport {MarkToolbarButton} from '@udecode/plate-ui-toolbar'\nimport {FormatBold, FormatItalic, FormatStrikethrough, FormatUnderlined, \n    Subscript, Superscript} from '@mui/icons-material'\nimport 'tippy.js/dist/tippy.css'\n\n\nconst TextFormatButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <MarkToolbarButton\n                id='apps-trader-app-pages-notes-toolbar-text-format-buttons-bold'\n                type={getPluginType(editor, MARK_BOLD)}\n                icon={<FormatBold />}\n                tooltip={{content: 'Bold (ctrl + b)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_ITALIC)}\n                icon={<FormatItalic />}\n                onMouseDown={() => editor.addMark(MARK_ITALIC, true)}\n                tooltip={{content: 'Italic (ctrl + i)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_UNDERLINE)}\n                icon={<FormatUnderlined />}\n                tooltip={{content: 'Underline (ctrl + u)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_STRIKETHROUGH)}\n                icon={<FormatStrikethrough />}\n                tooltip={{content: 'Strikethrough (ctrl + shift + x)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_SUPERSCRIPT)}\n                clear={getPluginType(editor, MARK_SUPERSCRIPT)}\n                icon={<Superscript />}\n                tooltip={{content: 'Superscript (ctrl + .)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_SUBSCRIPT)}\n                clear={getPluginType(editor, MARK_SUBSCRIPT)}\n                icon={<Subscript />}\n                tooltip={{content: 'Subscript (ctrl + ,)'}}\n                />\n        </>\n    )\n}\n\nexport default TextFormatButtons","import {FormatAlignCenter, FormatAlignJustify, FormatAlignLeft, FormatAlignRight} from '@mui/icons-material'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {AlignToolbarButton} from '@udecode/plate-ui'\n\nconst AlignContentButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <AlignToolbarButton\n                value='left'\n                icon={<FormatAlignLeft />}\n                tooltip={{content: 'Align Content Left'}}\n                />\n            <AlignToolbarButton\n                value='center'\n                icon={<FormatAlignCenter />}\n                tooltip={{content: 'Align Content Center'}}\n                />\n            <AlignToolbarButton\n                value='right'\n                icon={<FormatAlignRight />}\n                tooltip={{content: 'Align Content Right'}}\n                />\n            <AlignToolbarButton\n                value='justify'\n                icon={<FormatAlignJustify />}\n                tooltip={{content: 'Justify Content'}}\n                />\n        </>\n    )\n}\n\nexport default AlignContentButtons","import {ToolbarButton} from '@udecode/plate-ui'\nimport {Undo, Redo} from '@mui/icons-material'\nimport {PlateEditor} from '@udecode/plate-core'\n\n\nconst UndoRedoButtons = ({editor}: {editor: PlateEditor}) => {\n    const noMoreRedos = (editor: PlateEditor) => editor && editor.history.redos.length === 0;\n    const noMoreUndos = (editor: PlateEditor) => editor && editor.history.undos.length === 0;\n    \n    return(\n        <>\n            <ToolbarButton\n                icon={<Undo sx={{opacity: noMoreUndos(editor) ? 0.5 : undefined}} />}\n                onMouseDown={() => {\n                    if(!noMoreUndos(editor)){\n                        editor.undo();\n                    }\n                }}\n                tooltip={{content: 'Undo (ctrl + z)'}}\n                />\n            <ToolbarButton \n                icon={<Redo sx={{opacity: noMoreRedos(editor) ? 0.5 : undefined}} />}\n                onMouseDown={() => {\n                    if(!noMoreRedos(editor)){\n                        editor.redo();\n                    }\n                }}\n                tooltip={{content: 'Redo (ctrl + y)'}}\n                />\n        </>\n    )\n}\n\nexport default UndoRedoButtons","import {getPluginType, ELEMENT_UL, ELEMENT_OL, PlateEditor} from '@udecode/plate'\nimport {FormatListBulleted, FormatListNumbered} from '@mui/icons-material'\nimport {ListToolbarButton} from '@udecode/plate-ui-list'\n\n\nconst ListButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <ListToolbarButton\n                type={getPluginType(editor, ELEMENT_UL)}\n                icon={<FormatListBulleted />}\n                tooltip={{content: 'Insert Bulleted List'}}\n                />\n            <ListToolbarButton\n                type={getPluginType(editor, ELEMENT_OL)}\n                icon={<FormatListNumbered />}\n                tooltip={{content: 'Insert Numbered List'}}\n                />\n        </>\n    )\n}\n\nexport default ListButtons","const createHeaderRowNode = (columns: number) =>{\n    const headerRow: any = {type: 'tr', children: []}\n    for(let colNo=columns; colNo >= 1; colNo--){\n        headerRow.children.push({type: 'th', children: [{type: 'p', children: [{text: ''}]}]});\n    }\n    return headerRow\n}\n\nconst createRow = (columns: number) => {\n    const row: any = {type: 'tr', children: []}\n    for(let colNo=columns; colNo >= 1; colNo--){\n        row.children.push({type: 'td', children: [{type: 'p', children: [{text: ''}]}]});\n    }\n    return row\n}\n\nconst createTableNode = (rows: number, columns: number) => {\n    const tableNode = {\n        type: 'table',\n        isElement: true,\n        children: [\n            createHeaderRowNode(columns)\n        ]\n    }\n    for(let rowNo=rows; rowNo >= 1; rowNo--){\n        tableNode.children.push(createRow(columns));\n    }\n    return tableNode\n}\n\n\nexport default createTableNode","import {RowBox} from '@components/containers'\nimport {Input} from '@components/inputs'\nimport {P} from '@components/text'\nimport {getDimen} from '@conf/utils'\n\n\nconst NoOfRowsInput = ({rows, setRows}: {rows: number, setRows: Function}) => {\n    \n    return(\n        <RowBox\n            style={{\n                marginBottom: getDimen('padding-xs'),\n                justifyContent: 'space-between',\n                alignItems: 'baseline'\n            }}>\n            <P>Number of rows: &nbsp;</P>\n            <Input\n                autoFocus={true}\n                variant='standard'\n                type='number'\n                value={rows}\n                onChange={(e) => setRows(e.target.value)} />\n        </RowBox>\n    )\n}\n\nexport default NoOfRowsInput","import {RowBox} from '@components/containers'\nimport {Input} from '@components/inputs'\nimport {P} from '@components/text'\nimport {getDimen} from '@conf/utils'\n\n\nconst NoOfColumnsInput = ({columns, setColumns}: {columns: number, setColumns: Function}) => {\n    return(\n        <RowBox\n            style={{\n                justifyContent: 'space-between',\n                alignItems: 'baseline',\n                marginBottom: getDimen('padding-xs')\n            }}>\n            <P>Number of cols: &nbsp;</P>\n            <Input\n                variant='standard'\n                type='number'\n                value={columns}\n                onChange={(e: any) => setColumns(e.target.value)} />\n        </RowBox>\n    )\n}\n\nexport default NoOfColumnsInput","import {useState} from 'react'\nimport {Transforms} from 'slate'\nimport {getPluginType, PlateEditor} from '@udecode/plate'\nimport {ToolbarButton} from '@udecode/plate-ui-toolbar'\nimport {ELEMENT_PARAGRAPH} from '@udecode/plate-paragraph'\nimport {TableView} from '@mui/icons-material'\nimport Dialog from '@components/dialog'\nimport createTableNode from './create-table-node'\nimport NoOfRowsInput from './no-of-rows-input'\nimport NoOfColumnsInput from './no-of-columns-input'\n\n\nconst InsertTableButton = ({editor}: {editor: PlateEditor}) => {\n    const [rows, setRows] = useState(1);\n    const [columns, setColumns] = useState(2);\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const setNewValueIfValidNumber = (newValue: string, setValue: Function) => {\n        // No negative numbers or numbers greater than 10 are allowed\n        const validNumber = (num: number) => !isNaN(num) && num > 0 && num < 11\n        const num = parseInt(newValue);\n        if(validNumber(num)){\n            setValue(newValue);\n        }\n    }\n    const onOkClick = () => {\n        const tableNode = createTableNode(rows, columns);\n        // Adding a paragraph to make it easy to continue editing after inserting the table\n        const newParagraphNode = {type: ELEMENT_PARAGRAPH, children: [{text: ''}]};\n        Transforms.insertNodes(editor, [tableNode, newParagraphNode]);\n        setDialogIsOpen(false);\n    }\n\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Table'\n                open={true}\n                onClose={() => setDialogIsOpen(false)}\n                onOkClick={onOkClick}\n                onCancelClick={() => setDialogIsOpen(false)}>\n                <NoOfRowsInput\n                    rows={rows}\n                    setRows={(newValue: string) => setNewValueIfValidNumber(newValue, setRows)}\n                />\n                <NoOfColumnsInput\n                    columns={columns}\n                    setColumns={(newValue: string) => setNewValueIfValidNumber(newValue, setColumns)}\n                    />\n            </Dialog>\n            : null\n        }\n        <ToolbarButton\n            type={getPluginType(editor, 'table')}\n            icon={<TableView />}\n            tooltip={{content: 'Insert Table'}}\n            onMouseDown={() => {\n                setDialogIsOpen(true);\n            }}\n            />\n        </>\n    )\n}\n\nexport default InsertTableButton","import {useState} from 'react'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {ImageToolbarButton} from '@udecode/plate-ui-image'\nimport {Image} from '@mui/icons-material'\nimport {Input} from '@components/inputs'\nimport Dialog from '@components/dialog'\n\n\nconst InsertImageButton = ({editor}: {editor: PlateEditor}) => {\n    const [imageUrl, setImageUrl] = useState('');\n    const [resolve, setResolve] = useState<Function>(() => {});\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const closeDialog = () => {\n        setImageUrl('');\n        setResolve(() => {});\n        setDialogIsOpen(false);\n    }\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Image'\n                onClose={() => closeDialog()}\n                open={dialogIsOpen}\n                onOkClick={() => resolve(imageUrl)}\n                onCancelClick={() => closeDialog()}>\n                <Input\n                    value={imageUrl}\n                    onChange={(e) => setImageUrl(e.target.value)}\n                    placeholder='Image url'\n                />\n            </Dialog>\n            : null\n        }\n        <ImageToolbarButton\n            icon={<Image />}\n            getImageUrl={() => {\n                return new Promise((resolve) => {\n                    setResolve(prevResolve => (url: string) => resolve(url));\n                })\n            }}\n            tooltip={{content: 'Insert Image'}} />\n        </>\n    )\n}\n\nexport default InsertImageButton","import {useState} from 'react'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {LinkToolbarButton} from '@udecode/plate-ui-link'\nimport {Link} from '@mui/icons-material'\nimport {Input} from '@components/inputs'\nimport Dialog from '@components/dialog'\n\n\nconst InsertLinkButton = ({editor}: {editor: PlateEditor}) => {\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const [resolve, setResolve] = useState<Function>(() => {});\n    const [url, setUrl] = useState('');\n    const closeDialog = () => {\n        setUrl('');\n        setDialogIsOpen(false);\n        setResolve(() => {});\n    }\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Link'\n                open={dialogIsOpen}\n                onOkClick={() => {\n                    if(url.length === 0){\n                        resolve(null);\n                    } else {\n                        resolve(url);\n                    }\n                    closeDialog();\n                }}\n                onCancelClick={() => closeDialog()}\n                onClose={() => closeDialog()}>\n                    <Input\n                        value={url}\n                        onChange={(e) => {\n                            setUrl(e.target.value)\n                        }}\n                        placeholder='the url'\n                        />\n            </Dialog>\n            : null\n        }\n        <LinkToolbarButton\n            icon={<Link />}\n            getLinkUrl={() => {\n                return new Promise((resolve) => {\n                    setDialogIsOpen(true);\n                    setResolve(prevFunc => (url: string | null) => resolve(url));\n                })\n            }}\n            tooltip={{content: 'Insert Link'}}\n            />\n        </>\n    )\n}\n\nexport default InsertLinkButton","import {PlateEditor} from '@udecode/plate'\nimport ListButtons from './list-buttons'\nimport InsertTableButton from './insert-table-button'\nimport InsertImageButton from './insert-image-button'\nimport InsertLinkButton from './insert-link-button'\n\n\nconst InsertContentButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <ListButtons editor={editor} />\n            <InsertTableButton editor={editor} />\n            <InsertLinkButton editor={editor} />\n            <InsertImageButton editor={editor} />\n        </>\n    )\n}\n\nexport default InsertContentButtons","import {getPluginType, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, PlateEditor,\n    ELEMENT_H4, ELEMENT_H5, ELEMENT_H6, ELEMENT_BLOCKQUOTE} from '@udecode/plate'\nimport {BlockToolbarButton} from '@udecode/plate-ui'\nimport {LooksOne, LooksTwo, Looks3, Looks4, Looks5, Looks6, FormatQuote} from '@mui/icons-material'\n\n\nconst HeadersAndQuoteButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H1)}\n                icon={<LooksOne />}\n                tooltip={{content: 'Header 1'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H2)}\n                icon={<LooksTwo />}\n                tooltip={{content: 'Header 2'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H3)}\n                icon={<Looks3 />}\n                tooltip={{content: 'Header 3'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H4)}\n                icon={<Looks4 />}\n                tooltip={{content: 'Header 4'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H5)}\n                icon={<Looks5 />}\n                tooltip={{content: 'Header 5'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H6)}\n                icon={<Looks6 />}\n                tooltip={{content: 'Header 6'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_BLOCKQUOTE)}\n                icon={<FormatQuote />}\n                tooltip={{content: 'Insert Blockquote'}}\n            />\n        </>\n    )\n}\n\nexport default HeadersAndQuoteButtons","import {usePlateEditorState} from '@udecode/plate'\nimport {HeadingToolbar} from '@udecode/plate-ui-toolbar'\nimport TextFormatButtons from './text-format-buttons'\nimport AlignContentButtons from './align-content-buttons'\nimport UndoRedoButtons from './undo-redo-buttons'\nimport InsertContentButtons from './insert-content-buttons'\nimport HeadersAndQuoteButtons from './headers-and-quote-buttons'\n\n\nconst Toolbar = () => {\n    const editor = usePlateEditorState();\n    return(\n        <HeadingToolbar>\n            <HeadersAndQuoteButtons editor={editor} />\n            <TextFormatButtons editor={editor} />\n            <UndoRedoButtons editor={editor} />\n            <AlignContentButtons editor={editor} />\n            <InsertContentButtons editor={editor} />\n        </HeadingToolbar>\n    )\n}\n\nexport default Toolbar","import {getColor} from '@conf/utils'\n\n\nconst LinkElement = ({attributes, children, element}: any) => {\n    return(\n        <a \n            {...attributes}\n            style={{\n                color: getColor('light-blue'),\n                textDecoration: 'underline',\n                onMouseOver: 'pointer'\n            }}\n            href={element.url} target='_blank'>{children}\n        </a>\n    );\n}\n\nexport default LinkElement","const TdElement = ({attributes, children, element}: any) => {\n    return(\n        <td\n            {...attributes}\n            style={{\n                border: '1px solid rgba(0,0,0,.55)'\n            }}>{children}</td>\n    );\n}\n\nexport default TdElement","import {createParagraphPlugin, createBlockquotePlugin, createHeadingPlugin,\n    createBoldPlugin, createItalicPlugin, createUnderlinePlugin, createStrikethroughPlugin, \n    createPlugins, createPlateUI, createSubscriptPlugin, createSuperscriptPlugin,\n    createListPlugin, createResetNodePlugin, createSoftBreakPlugin, createExitBreakPlugin,\n    createTablePlugin, createAlignPlugin, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4,\n    ELEMENT_H5, ELEMENT_H6, ELEMENT_PARAGRAPH, createLinkPlugin, ELEMENT_LINK, createImagePlugin, withPlaceholders\n} from '@udecode/plate'\nimport {ELEMENT_TD} from '@udecode/plate-table'\nimport LinkElement from './link-element'\nimport TdElement from './td-element'\n\n\nconst plugins = createPlugins([\n    // elements\n    createParagraphPlugin(),      // paragraph element\n    createBlockquotePlugin(),     // blockquote element\n    createHeadingPlugin(),        // heading elements\n    createListPlugin(),           // list elements\n    createResetNodePlugin(),\n    createSoftBreakPlugin(),\n    createExitBreakPlugin(),\n    createTablePlugin(),          // tables\n    // links\n    createLinkPlugin(),\n\n    // marks\n    createBoldPlugin(),           // bold mark\n    createItalicPlugin(),         // italic mark\n    createUnderlinePlugin(),      // underline mark\n    createStrikethroughPlugin(),  // strikethrough mark\n    createSuperscriptPlugin(),    // superscript mark\n    createSubscriptPlugin(),      // subscript mark\n\n    // alignment\n    createAlignPlugin({ \n        inject: {\n        props: {\n            validTypes: [\n                ELEMENT_PARAGRAPH,\n                ELEMENT_H1,\n                ELEMENT_H2,\n                ELEMENT_H3,\n                ELEMENT_H4,\n                ELEMENT_H5,\n                ELEMENT_H6\n            ],\n        }\n        }\n    }),\n    createImagePlugin(),\n], {\n    components: createPlateUI({\n        [ELEMENT_LINK]: LinkElement,\n        [ELEMENT_TD]: TdElement\n    })\n});\n\nexport default plugins","import {getDimen} from '@conf/utils'\nimport {Input} from '@mui/material'\n\n\nconst TitleInput = ({title, setTitle}: {title: string, setTitle: Function}) => {\n    return(\n        <Input\n            value={title}\n            placeholder='Title'\n            style={{\n                border: 'none',\n                fontWeight: 500,\n                fontSize: '2rem',\n                marginBottom: getDimen('padding-xs')\n            }}\n            onChange={(e) => setTitle(e.target.value)}\n            />\n    )\n}\n\nexport default TitleInput","import {Plate} from '@udecode/plate'\nimport Toolbar from './toolbar'\nimport plugins from './plugins'\nimport {getDimen} from '@conf/utils'\nimport TitleInput from './title-input'\n\n\nconst NoteEditor = ({note, setTitle, setContent}: {note: any, setTitle: Function, setContent: Function}) => {\n    return(\n        <div style={{paddingTop: getDimen('padding-md')}}>\n            <TitleInput title={note.title} setTitle={setTitle} />\n            <Toolbar />\n            <Plate\n                plugins={plugins}\n                onChange={(newValue) => {\n                    setContent(newValue);\n                }}\n                editableProps={{\n                    placeholder: 'Notes...'\n                }} />\n        </div>\n    );\n}\n\nexport default NoteEditor","import {Button} from '@components/buttons'\nimport {getDimen} from '@conf/utils'\nimport {List} from '@mui/material'\n\nconst MainToolbar = ({isEditing, showAllNotes, createNewNote}: {isEditing: boolean, showAllNotes: Function, createNewNote: Function}) => {\n    return(\n        <List>\n            {isEditing ? \n                <Button\n                    onClick={\n                        () => showAllNotes()\n                    }>All Notes</Button>\n                : \n                <Button\n                    onClick={() => createNewNote()}\n                    style={{\n                        marginRight: getDimen('padding-xs')\n                    }}>New Note</Button>}\n        </List>\n    )\n}\n\nexport default MainToolbar","import {ColumnBox} from '@components/containers'\nimport {H6} from '@components/text'\n\n\nconst NoNotesFound = () => {\n    return(\n        <ColumnBox\n            style={{\n                width: '100%',\n                height: '40vh',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n            <H6>No Notes Found</H6>\n        </ColumnBox>\n    )\n}\n\nexport default NoNotesFound","import {useEffect, useState} from 'react'\nimport {usePlateStore} from '@udecode/plate-core'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport {ColumnBox} from '@components/containers'\nimport Note from './models'\nimport NoteList from './note-list'\nimport NoteEditor from './note-editor'\nimport MainToolbar from './main-toolbar'\nimport NoNotesFound from './no-notes-found'\nimport {NoteData} from './models'\nimport {PageStillLoading} from '@apps/trader-app/components'\n\n\nconst Notebook = ({noteData}: {noteData: Promise<NoteData[]>}) => {\n    // Index of currently chosen note in noteItems\n    const [currentNoteIndex, setCurrentNoteIndex] = useState(-1);\n    const [isEditing, setIsEditing] = useState(false);\n    const [notesHasLoaded, setNotesHasLoaded] = useState(false);\n    const [noteItems, setNoteItems] = useState<Note[]>([]);\n    const setEditorValue = usePlateStore().set.value;\n    useEffect(() => {\n        noteData.then((rawNoteData) => {\n            setNoteItems(Note.fromRawData(rawNoteData));\n            setNotesHasLoaded(true);\n        })\n    }, [])\n    const createNewNote = () => {\n        const newNote = new Note();\n        const newNoteItems = [...noteItems, newNote];\n        setNoteItems(newNoteItems);\n        setCurrentNoteIndex(newNoteItems.length - 1);\n        setEditorValue(newNote.content);\n        setIsEditing(true);\n    }\n    const setCurrentNoteTitle = (title: string) => {\n        if(title.length <= 10000){\n            const newNoteItems = [...noteItems];\n            newNoteItems[currentNoteIndex].title = title;\n            setNoteItems(newNoteItems);\n            newNoteItems[currentNoteIndex].save();\n        }\n    }\n    const setCurrentNoteContent = (content: any) => {\n        const newNoteItems = [...noteItems];\n        newNoteItems[currentNoteIndex].content = content;\n        setNoteItems(newNoteItems);\n        newNoteItems[currentNoteIndex].save();\n\n    }\n    const showAllNotes = () => {\n        const currentNote = noteItems[currentNoteIndex];\n        if(!currentNote.hasBeenSaved()){\n            const newNoteItems = noteItems.filter((note, i) => i !== currentNoteIndex);\n            setNoteItems(newNoteItems);\n        }\n        setIsEditing(false);\n    }\n    if(!notesHasLoaded){\n        return <PageStillLoading />\n    }\n    return(\n        <PageContainer>\n            <PageHeading heading='Notes' />\n            <ColumnBox data-testid='notebook'>\n                <MainToolbar \n                    isEditing={isEditing}\n                    showAllNotes={showAllNotes}\n                    createNewNote={createNewNote}\n                    />\n                {noteItems.length === 0 ?\n                    <NoNotesFound />\n                    : isEditing ?\n                        <NoteEditor\n                            note={noteItems[currentNoteIndex]}\n                            setTitle={setCurrentNoteTitle}\n                            setContent={setCurrentNoteContent}\n                            />\n                        : \n                            <NoteList\n                                removeNoteFromList={(noteIndex: number) => {\n                                    // Call function to remove note from list\n                                    const newNoteItems = noteItems.filter((note, index) => (\n                                        index !== noteIndex\n                                    ));\n                                    setNoteItems(newNoteItems);\n                                }}\n                                noteItems={noteItems}\n                                isEditing={isEditing}\n                                onNoteSelect={(noteIndex: number) => {\n                                    setEditorValue(noteItems[noteIndex].content);\n                                    setIsEditing(true);\n                                    setCurrentNoteIndex(noteIndex);\n                                }}\n                            />\n                    \n                }\n            </ColumnBox>\n        </PageContainer>\n    )\n}\n\nexport default Notebook","import {useState, useEffect} from 'react'\nimport Http, {HttpErrorType, HttpResponseType} from '@services/http'\nimport {HttpConst} from '@conf/const'\n\n\nconst useEaDownloadUrl = () => {\n    const [mt4EaDownloadUrl, setMt4EaDownloadUrl] = useState('');\n    const [mt5EaDownloadUrl, setMt5EaDownloadUrl] = useState('');\n    const {BASE_URL, DOWNLOAD_EA_URL} = HttpConst\n    useEffect(() => {\n        Http.get({\n            url: `${BASE_URL}/${DOWNLOAD_EA_URL}/?variant=mt4/`,\n            successFunc: (resp: any) => {\n                const file = new Blob([resp.data], {type: 'application/ex4'});\n                const fileDownloadUrl = URL.createObjectURL(file);\n                setMt4EaDownloadUrl(fileDownloadUrl)\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log('ea error', err);\n            },\n            extras: {\n                responseType: 'blob'\n            }\n        })\n        Http.get({\n            url: `${BASE_URL}/${DOWNLOAD_EA_URL}/?variant=mt5/`,\n            successFunc: (resp: HttpResponseType) => {\n                const file = new Blob([resp.data], {type: 'application/ex5'});\n                const fileDownloadUrl = URL.createObjectURL(file);\n                setMt5EaDownloadUrl(fileDownloadUrl);\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log('ea error', err);\n            },\n            extras: {\n                responseType: 'blob'\n            }\n        })\n    }, [])\n    return {\n        'mt4': mt4EaDownloadUrl,\n        'mt5': mt5EaDownloadUrl\n    };\n}\n\nexport default useEaDownloadUrl","import {HttpConst} from '@conf/const'\nimport Http, {HttpErrorType, HttpResponseType} from '@services/http'\n\n\nconst getNoteData = (): Promise<any> => {\n    const {BASE_URL, GET_ALL_NOTES_URL} = HttpConst\n    return Http.get({\n        url: `${BASE_URL}/${GET_ALL_NOTES_URL}/`,\n        successFunc: (resp: HttpResponseType) => {\n            return Promise.resolve(resp.data);\n        },\n        errorFunc: (err: HttpErrorType) => {\n            return Promise.resolve(err);\n        }\n    })\n}\n\nexport default getNoteData","import BaseHttp, {HttpGetConfigType, HttpPostConfigType, HttpPutConfigType,\n    HttpDeleteConfigType, HttpErrorType, HttpClientType} from '@services/http'\nimport {RouteConst} from '@conf/const'\n\nconst {INFO_LOGIN_ROUTE} = RouteConst;\nconst LOGIN_ROUTE = `/${INFO_LOGIN_ROUTE}`;\n\nconst handleRequest = (httpMethod: Function, config: any): Promise<any> => {\n    return httpMethod({\n        ...config,\n        errorFunc: (err: HttpErrorType) => {\n            if(err.response.status === 401 || err.response.status === 403){\n                Http.navigate(LOGIN_ROUTE);\n            } else {\n                return config.errorFunc(err);\n            }\n        },\n    })\n}\n\nconst get = (config: HttpGetConfigType) => {\n    return handleRequest(BaseHttp.get, config);\n}\n\nconst post = (config: HttpPostConfigType) => {\n    return handleRequest(BaseHttp.post, config);\n}\n\nconst put = (config: HttpPutConfigType) => {\n    return handleRequest(BaseHttp.put, config);\n}\n\nconst httpDelete = (config: HttpDeleteConfigType) => {\n    return handleRequest(BaseHttp.delete, config);\n}\n\n\nconst Http: TraderHttpClient = {\n    ...BaseHttp,\n    get,\n    put,\n    post,\n    delete: httpDelete,\n    navigate: (route: string) => {},\n    initNavigate: function(navigate: NavigateFunc){\n        this.navigate = navigate;\n    }\n}\n\ntype TraderHttpClient = HttpClientType & {\n    navigate: NavigateFunc,\n    initNavigate: {\n        (navigate: NavigateFunc): void\n    }\n}\n\ntype NavigateFunc = {\n    (route: string): void\n}\n\nexport default Http\nexport * from '@services/http'","import {RowBox} from '@components/containers'\nimport {Button} from '@components/buttons'\nimport {getDimen} from '@conf/utils'\nimport {DialogButtonsPropTypes} from './types'\n\n\nconst Buttons = ({onOkClick, onCancelClick, okButtonColor, okButtonText, okButtonProps}: DialogButtonsPropTypes) => {\n    return(\n        <RowBox style={{\n            justifyContent: 'right',\n            marginTop: getDimen('padding-xs')\n            }}>\n            <Button\n                style={{\n                    marginRight: getDimen('padding-xs')\n                }}\n                onClick={() => onCancelClick()}\n                color='neutral'>Cancel</Button>\n            <Button\n                color={okButtonColor}\n                onClick={(e) => onOkClick()}\n                {...okButtonProps}>\n                {okButtonText ? okButtonText : 'ok'}\n            </Button>\n        </RowBox>\n    )\n}\n\nexport default Buttons","import {Dialog as MuiDialog} from '@mui/material'\nimport {ColumnBox} from '@components/containers'\nimport {getDimen} from '@conf/utils'\nimport {H6} from '@components/text'\nimport Buttons from './buttons'\nimport {DialogPropTypes} from './types'\nimport { useEffect } from 'react'\n\n\nconst Dialog = ({children, onOkClick, title, onClose, open, ...props}: DialogPropTypes) => {\n    return(\n        <MuiDialog onClose={() => onClose()} open={open}>\n            <div onKeyPress={(e: any) => {\n                if(e.key === 'Enter'){\n                    onOkClick();\n                }\n            }}>\n                <ColumnBox\n                    style={{\n                        margin: getDimen('padding-md')\n                    }}>\n                    <H6 style={{textAlign: 'center'}}>{title}</H6>\n                    {children}\n                    <Buttons \n                        onOkClick={onOkClick}\n                        {...props} />\n                </ColumnBox>\n            </div>\n        </MuiDialog>\n    )\n}\n\nexport default Dialog","import {Deposit, Withdrawal} from '@root/types'\nimport {cloneObj, sameDay, sameMonth, sameWeek, sameYear, FAR_IN_THE_FUTURE_YEAR} from '@root/utils'\nimport {AccountData, Trade} from '..'\nimport {CashGraphCalc, CashGraphItem} from './types'\n\n/**\n * For calculating the datasets for the Cash Graph on the\n * Cash And Gains page\n */\nconst cashGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: CashGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameDay(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameWeek(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameMonth(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameYear(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData);\n}\n\n/**\n * The tradeNo is the trade index number\n * The balance is plotted against it\n * Initialize a running balance to 0\n * Initialize the tradesIndex, depositsIndex and withdrawalsIndex to 0\n * Iterate through the trades, deposits and withdrawals at the same time\n * Check for the one with the earliest date\n *  If it's the trade, add the trade to the running balance, increment the tradeIndex by 1\n *      and continue to the next iteration\n *  Else If it's the deposit, add the deposit to the running balance, increment the depositsIndex\n *      then check if the trade's date comes before the withdrawal's\n *      If the trade's date comes before the withdrawal's, \n *          add the trade to the running balance and continue to the next iteration\n *      Else If the withdrawal's date comes before the trade's date,\n *          subtract the withdrawal from the running balance and continue to the next iteration\n */\nconst graphCalc = (accountData: AccountData): CashGraphItem[] => {\n    let tradesIndex = 0;\n    let withdrawalsIndex = 0;\n    let depositsIndex = 0;\n    let currentTradeNo = 1;\n    let currentBalance = 0;\n    const calc: CashGraphItem[] = [{tradeNo: 0, balance: 0}]\n    while(tradesIndex !== accountData.trades.length){\n        const currentDeposit = accountData.deposits[depositsIndex];\n        const currentWithdrawal = accountData.withdrawals[withdrawalsIndex];\n        const currentTrade = accountData.trades[tradesIndex];\n        const [depositPos, withdrawalPos, tradePos] = getDatePos(currentDeposit, currentWithdrawal, currentTrade);\n        const tradeIsEarliest = () => tradePos === 1;\n        const withdrawalIsEarliest = () => withdrawalPos === 1;\n        const withdrawalIsSecond = () => withdrawalPos === 2;\n        const depositIsEarliest = () => depositPos === 1;\n        const depositIsSecond = () => depositPos === 2;\n        const addTradeToBalance = () => {\n            currentBalance += currentTrade.profitLoss;\n            tradesIndex += 1;\n        }\n        const decreaseWithdrawalFromBalance = () => {\n            currentBalance -= currentWithdrawal.amount;\n            withdrawalsIndex += 1;\n        }\n        const addDepositToBalance = () => {\n            currentBalance += currentDeposit.amount;\n            depositsIndex += 1;\n        }\n        // Trade is earliest        \n        if(tradeIsEarliest()){\n            addTradeToBalance();\n            // withdrawal on the same day\n            if(withdrawalIsEarliest()){\n                decreaseWithdrawalFromBalance();\n            }\n            // deposit on the same day\n            if(depositIsEarliest()){\n                addDepositToBalance();\n            }\n        } else if(depositIsEarliest()){\n            addDepositToBalance();\n            if(withdrawalIsSecond()){\n                decreaseWithdrawalFromBalance();\n            }\n            // At this point, trade can only be the 3rd\n            addTradeToBalance();\n        } else {\n            // At this point, only the withdrawal can be the earliest\n            decreaseWithdrawalFromBalance();\n            if(depositIsSecond()){\n                addDepositToBalance();\n            }\n            addTradeToBalance();\n        }\n        calc.push({tradeNo: currentTradeNo, balance: currentBalance});\n        currentTradeNo += 1;\n    }\n    return calc\n}\n\n/**\n * Returns a triple with each slot holding the position of the trade, deposit and withdrawal\n * indicating which took place the earliest, second earliest and latest.\n * For example, if the deposit has the earliest date, withdrawal with the second earliest and\n * trade with the latest, what will be returned will look like this:\n * [1, 2, 3], because the deposit is the first earliest, the withdrawal is the second earliest\n * and the trade is the latest.\n * The positions in the triple are arranged in that order: deposits position, withdrawal's\n * position and trade's position \n * */\nconst getDatePos = (deposit: Deposit, withdrawal: Withdrawal, trade: Trade) => {\n    const depositDate = deposit === undefined ? new Date(FAR_IN_THE_FUTURE_YEAR, 11, 31)\n        : new Date(deposit.time);\n    const withdrawalDate = withdrawal === undefined ? new Date(FAR_IN_THE_FUTURE_YEAR, 10, 30) \n        : new Date(withdrawal.time);\n    const tradeDate = new Date(trade.closeTime);\n    const posTriple = [-1, -1, -1];\n    // Their indexes in the posTriple\n    const DEPOSIT = 0;\n    const WITHDRAWAL = 1;\n    const TRADE = 2;\n    // Their positions\n    const UNSET = -1;\n    const FIRST = 1;\n    const SECOND = 2;\n    const THIRD = 3;\n    // To check if a slot in the posTriple has already been set\n    const posAlreadySet = (pos: number) => pos !== -1\n    const tradeDateIsEarliest = () => tradeDate <= depositDate && tradeDate <= withdrawalDate;\n    const depositDateIsEarliest = () => depositDate <= tradeDate && depositDate <= withdrawalDate;\n    const withdrawalDateIsEarliest = () => withdrawalDate <= tradeDate && withdrawalDate <= depositDate;\n    const sameDate = (date1: Date, date2: Date) => date1 === date2\n    /**\n     * possible positions:\n     *  trade, deposit, withdrawal\n     *  trade, withdrawal, deposit\n     *  deposit, trade, withdrawal\n     *  deposit, withdrawal, trade\n     *  withdrawal, deposit, trade\n     *  withdrawal, trade, deposit\n     * There is also a possibility that any of the dates may be the same\n     */\n    if(tradeDateIsEarliest()){\n        posTriple[TRADE] = FIRST;\n        posTriple[DEPOSIT] = sameDate(tradeDate, depositDate) ? FIRST : UNSET;\n        posTriple[WITHDRAWAL] = sameDate(tradeDate, withdrawalDate) ? FIRST : UNSET;\n        // At this point, the positions of deposit and withdrawal don't matter\n        // because as long as trade comes first, the only other things that\n        // need to be checked are if the deposits and withdrawals have the same position\n    } else if(depositDateIsEarliest()){\n        posTriple[DEPOSIT] = FIRST;\n        posTriple[TRADE] = sameDate(tradeDate, depositDate) ? FIRST : UNSET;\n        posTriple[WITHDRAWAL] = sameDate(withdrawalDate, depositDate) ? FIRST : UNSET;\n        if(tradeDate <= withdrawalDate){\n            /**\n             * Checking if the position is already set to consider the scenario\n             * where tradeDate is equal to depositDate, and its position is already 1st\n             */\n            posTriple[TRADE] = posAlreadySet(TRADE) ? posTriple[TRADE] : SECOND;\n            /**\n             * If withdrawal's position is already set, that means withdrawalDate is\n             * equal to depositDate and so, the date is already 1st\n             */\n            if(sameDate(tradeDate, withdrawalDate)){\n                posTriple[WITHDRAWAL] = posAlreadySet(WITHDRAWAL) ? posTriple[WITHDRAWAL] : SECOND;    \n            } else {\n                /**\n                 * If tradeDate comes before withdrawalDate, then it's not possible for\n                 * withdrawal's position to have been set. If withdrawal's position was\n                 * set, then it must be equal to depositDate, which is the earliest, but\n                 * if it was equal to depositDate, then tradeDate could not have come before\n                 * it, so the code here would never have been reached\n                 */\n                posTriple[WITHDRAWAL] = THIRD;\n            }\n        } else {\n            /**\n             * At this point, withdrawalDate is sure to be before tradeDate\n             */\n            posTriple[TRADE] = THIRD;\n            posTriple[WITHDRAWAL] = SECOND;\n        }\n    } else if(withdrawalDateIsEarliest()){\n        posTriple[WITHDRAWAL] = FIRST;\n        posTriple[TRADE] = sameDate(tradeDate, withdrawalDate) ? FIRST : UNSET;\n        posTriple[DEPOSIT] = sameDate(depositDate, withdrawalDate) ? FIRST : UNSET;\n        if(tradeDate <= depositDate){\n            /**\n             * Checking if the position is already set to consider the scenario\n             * where tradeDate is equal to withdrawalDate, and its position is already 1st\n             */\n            posTriple[TRADE] = posAlreadySet(TRADE) ? posTriple[TRADE] : SECOND;\n            /**\n             * If deposit's position is already set, that means withdrawalDate is\n             * equal to depositDate and so, the date is already 1st\n             */\n            if(sameDate(tradeDate, depositDate)){\n                posTriple[DEPOSIT] = posAlreadySet(DEPOSIT) ? posTriple[DEPOSIT] : SECOND;\n            } else {\n                /**\n                 * If tradeDate comes before depositDate, then it's not possible for\n                 * deposit's position to have been set. If deposit's position was\n                 * set, then it must be equal to withdrawalDate, which is the earliest, but\n                 * if it was equal to withdrawalDate, then tradeDate could not have come before\n                 * it, so the code here would never have been reached\n                 */\n                posTriple[DEPOSIT] = THIRD;\n            }\n        } else {\n            /**\n             * At this point, depositDate is sure to be before tradeDate\n             */\n            posTriple[TRADE] = THIRD;\n            posTriple[DEPOSIT] = SECOND;\n        }\n    }\n    return posTriple\n}\n\nexport default cashGraphCalc\nexport {\n    graphCalc\n}","import {Trade} from '@root/types'\nimport {cloneObj, sameDay, sameMonth, sameWeek, sameYear, sumObjArray} from '@root/utils'\nimport {AccountData} from '..'\nimport {GainsGraphCalc, GainsGraphItem} from './types'\n\n\nconst gainsGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: GainsGraphCalc = {\n        todayGraphCalc: todayGainsPercent(accountData, today),\n        thisWeekGraphCalc: thisWeekGainsPercent(accountData, today),\n        thisMonthGraphCalc: thisMonthGainsPercent(accountData, today),\n        thisYearGraphCalc: thisYearGainsPercent(accountData, today),\n        allTimeGraphCalc: allTimeGainsPercent(accountData)\n    }\n    return calculations;\n}\n\nconst todayGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameDay(trade.openTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisWeekGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameWeek(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisMonthGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameMonth(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisYearGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameYear(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst allTimeGainsPercent = (accountData: AccountData) => {\n    return gainsPercent(accountData);\n}\n\nconst gainsPercent = (accountData: AccountData) => {\n    const calc: GainsGraphItem[] = [{tradeNo: 0, gainsPercent: 0}];\n    const totalDeposits = sumObjArray(accountData.deposits, 'amount');\n    for(const i in accountData.trades){\n        const trade = accountData.trades[i];\n        const gain = totalDeposits !== 0 ? trade.profitLoss / totalDeposits : 0;\n        const gainsPercent = gain * 100;\n        calc.push({tradeNo: parseInt(i) + 1, gainsPercent})\n    }\n    return calc\n}\n\nexport default gainsGraphCalc","import {AccountData} from '..'\nimport {CashAndGainsCalculations} from './types'\nimport cashGraphCalc from './cash-graph-calc'\nimport gainsGraphCalc from './gains-graph-calc'\n\n\nconst cashAndGainsCalculations = (accountData: AccountData) => {\n    const calculations: CashAndGainsCalculations = {\n        cashGraphCalc: cashGraphCalc(accountData),\n        gainsGraphCalc: gainsGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default cashAndGainsCalculations\nexport {graphCalc} from './cash-graph-calc'","import {AccountData, Trade} from './types'\n\n\nconst totalNoOfLongs = (data: AccountData | Trade[]) => {\n    let noOfLongs = 0;\n    if(Array.isArray(data)){\n        noOfLongs = noOfLongsFromTradeArray(data);\n    } else {\n        noOfLongs = noOfLongsFromAccountData(data);\n    }\n    return noOfLongs;\n}\n\nconst noOfLongsFromTradeArray = (trades: Trade[]) => {\n    let noOfLongs = 0;\n    for(const trade of trades){\n        if(trade.action === 'buy'){\n            noOfLongs += 1;\n        }\n    }\n    return noOfLongs\n}\n\nconst noOfLongsFromAccountData = (accountData: AccountData) => {\n    let noOfLongs = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            noOfLongs += 1;\n        }\n    }\n    return noOfLongs\n}\n\nconst totalNoOfShorts = (data: AccountData | Trade[]) => {\n    let noOfShorts = 0;\n    if(Array.isArray(data)){\n        noOfShorts = noOfShortsFromTradesArray(data);\n    } else {\n        noOfShorts = noOfShortsFromAccountData(data);\n    }\n    return noOfShorts;\n}\n\nconst noOfShortsFromTradesArray = (trades: Trade[]) => {\n    let noOfShorts = 0;\n    for(const trade of trades){\n        if(trade.action === 'sell'){\n            noOfShorts += 1;\n        }\n    }\n    return noOfShorts\n}\n\nconst noOfShortsFromAccountData = (accountData: AccountData) => {\n    let noOfShorts = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            noOfShorts += 1;\n        }\n    }\n    return noOfShorts\n}\n\nconst totalNoOfLongsWon = (accountData: AccountData) => {\n    let noOfLongsWon = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            if(trade.profitLoss > 0){\n                noOfLongsWon += 1;\n            }\n        }\n    }\n    return noOfLongsWon;\n}\n\nconst longsWonPercent = (accountData: AccountData) => {\n    const noOfLongsWon = totalNoOfLongsWon(accountData);\n    const noOfLongs = totalNoOfLongs(accountData);\n    if(noOfLongs === 0) return 0\n    return (noOfLongsWon / noOfLongs) * 100;\n}\n\nconst totalNoOfShortsWon = (accountData: AccountData) => {\n    let noOfShortsWon = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            if(trade.profitLoss > 0){\n                noOfShortsWon += 1;\n            }\n        }\n    }\n    return noOfShortsWon;\n}\n\nconst shortsWonPercent = (accountData: AccountData) => {\n    const noOfShortsWon = totalNoOfShortsWon(accountData);\n    const noOfShorts = totalNoOfShorts(accountData);\n    if(noOfShorts === 0) return 0\n    return (noOfShortsWon / noOfShorts) * 100\n}\n\n\n/** Counts the number of profitable trades in account */\nconst totalNoOfWinningTrades = (data: AccountData | Trade[]) => {\n    let totalNoOfWinningTrades = 0;\n    if(Array.isArray(data)){\n        totalNoOfWinningTrades = totalNoOfWinningTradesFromTradesArray(data);\n    } else {\n        totalNoOfWinningTrades = totalNoOfWinningTradesFromAccountData(data);\n    }\n    return totalNoOfWinningTrades\n}\n\nconst totalNoOfWinningTradesFromAccountData = (accountData: AccountData) => {\n    let totalNoOfWinningTrades = 0;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss > 0){\n            totalNoOfWinningTrades += 1;\n        }\n    }\n    return totalNoOfWinningTrades\n}\n\nconst totalNoOfWinningTradesFromTradesArray = (trades: Trade[]) => {\n    let totalNoOfWinningTrades = 0;\n    for(const trade of trades){\n        if(trade.profitLoss > 0){\n            totalNoOfWinningTrades += 1;\n        }\n    }\n    return totalNoOfWinningTrades\n}\n\n/** \n * Calculates winning trades divided by total number of trades\n * expressed as a percentage\n */\n const winRate = (data: AccountData | Trade[]) => {\n    const noOfWinningTrades = totalNoOfWinningTrades(data);\n    const noOfTradess = noOfTrades(data);\n    if(noOfTradess === 0) return 0\n    return (noOfWinningTrades / noOfTradess) * 100\n}\n\n/** Counts the number of trades in account */\nconst noOfTrades = (data: AccountData | Trade[]) => {\n    if(Array.isArray(data)){\n        return data.length\n    }\n    return data.trades.length\n}\n\nexport {\n    totalNoOfLongs,\n    totalNoOfShorts, \n    longsWonPercent,\n    shortsWonPercent,\n    totalNoOfLongsWon,\n    totalNoOfShortsWon,\n    totalNoOfWinningTrades,\n    winRate,\n    noOfTrades\n}","import {AccountData} from '@root/types'\nimport {ExpensesTableCalcItem} from '..'\nimport {ExpensesTableCalc} from './types'\n\n\nconst expensesTableCalc = (accountData: AccountData) => {\n    const expensesPerPair: ExpensesPerPair = calcExpensesPerPair(accountData);\n    const calculations: ExpensesTableCalc = Object.keys(expensesPerPair)\n        .map((pair): ExpensesTableCalcItem => ({\n            pair,\n            commission: expensesPerPair[pair].commissions,\n            swap: expensesPerPair[pair].swap\n   }))\n    return calculations\n}\n\nconst calcExpensesPerPair = (accountData: AccountData) => {\n    const expensesPerPair: ExpensesPerPair = {}\n    for(const trade of accountData.trades){\n        if(!(trade.pair in expensesPerPair)){\n            expensesPerPair[trade.pair] = {commissions: 0, swap: 0}\n        }\n        expensesPerPair[trade.pair].commissions += \n            trade.commission !== undefined ? trade.commission : 0;\n        expensesPerPair[trade.pair].swap += \n            trade.swap !== undefined ? trade.swap : 0;\n    }\n    return expensesPerPair\n}\n\ntype ExpensesPerPair = {[key: string]: {commissions: number, swap: number}}\n\n\nexport default expensesTableCalc","import {AccountData} from '@root/types'\nimport expensesTableCalc from './expenses-table-calc'\nimport {ExpensesCalc} from './types'\n\n\nconst expensesCalculations = (accountData: AccountData) => {\n    const calculations: ExpensesCalc = {\n        expensesTableCalc: expensesTableCalc(accountData)\n    }\n    return calculations\n}\n\n\nexport default expensesCalculations","import overviewCalculations from '@root/overview-calculations'\nexport * from '@root/overview-calculations/types'\n\nexport * from '@root/types'\n\nimport cashAndGainsCalculations from '@root/cash-and-gains-calculations'\nexport * from '@root/cash-and-gains-calculations/types'\n\nimport expensesCalculations from '@root/expenses-calculations'\nexport * from '@root/expenses-calculations/types'\n\nimport longShortAnalysisCalculations from '@root/long-short-analysis-calculations'\nexport * from '@root/long-short-analysis-calculations/types'\n\nimport pairsAnalysisCalculations from '@root/pairs-analysis-calculations'\nexport * from '@root/pairs-analysis-calculations/types'\n\nimport tradingTimeAnalysisCalculations from '@root/trading-time-analysis-calculations'\nexport * from '@root/trading-time-analysis-calculations/types'\n\nimport periodAnalysisCalculations from '@root/period-analysis-calculations'\nexport * from '@root/period-analysis-calculations/types'\n\nexport {\n    overviewCalculations,\n    cashAndGainsCalculations,\n    expensesCalculations,\n    longShortAnalysisCalculations,\n    pairsAnalysisCalculations,\n    tradingTimeAnalysisCalculations,\n    periodAnalysisCalculations\n}\n","import {AccountData} from '..'\n\n/**\n * The total profit / loss gotten from all longs (trade.action = 'buy')\n * in accountData.trades\n * */\n const totalLongsProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            totalProfitLoss += trade.profitLoss\n        }\n    }\n    return totalProfitLoss\n}\n\n/**\n * The total profit / loss gotten from all longs (trade.action = 'buy')\n * in accountData.trades\n * */\n const totalShortsProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            totalProfitLoss += trade.profitLoss\n        }\n    }\n    return totalProfitLoss\n}\n\nexport {\n    totalLongsProfitLoss,\n    totalShortsProfitLoss\n}","import {AccountData} from '..'\nimport {LongShortAnalysisCalculations} from './types'\nimport longShortComparisonTableCalc from './long-short-comp-table-calc'\nimport longShortComparisonGraphCalc from './long-short-comp-graph-calc'\nimport longBalanceGraphCalc from './long-balance-graph-calc'\nimport shortBalanceGraphCalc from './short-balance-graph-calc'\n\n\nconst longShortAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: LongShortAnalysisCalculations = {\n        longShortComparisonTableCalc: longShortComparisonTableCalc(accountData),\n        longShortComparisonGraphCalc: longShortComparisonGraphCalc(accountData),\n        longBalanceGraphCalc: longBalanceGraphCalc(accountData),\n        shortBalanceGraphCalc: shortBalanceGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default longShortAnalysisCalculations","import {AccountData} from '..'\nimport {LongBalanceGraphCalc} from './types'\n\n\n/**\n * Profit / loss of longs against an index no in which a trade having an index\n * number 1 implies that it was carried out before a trade with an index number 2\n */\nconst longBalanceGraphCalc = (accountData: AccountData) => {\n    const calculations: LongBalanceGraphCalc = [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => trade.action === 'buy')\n            .map((trade, i) => (\n                {tradeNo: i + 1, result: trade.profitLoss}\n            ))\n    ]\n    return calculations\n}\n\nexport default longBalanceGraphCalc","import {AccountData} from '..'\nimport {totalLongsProfitLoss, totalShortsProfitLoss} from './common-calc'\nimport {LongShortComparisonGraphCalc} from './types'\n\n\n/**\n * Returns an array of 2 items, 1 containing the profit / loss (result)\n * of all longs and the other containing the result of all shorts\n */\nconst longShortComparisonGraphCalc = (accountData: AccountData) => {\n    const calculations: LongShortComparisonGraphCalc = [\n        {label: 'long', result: totalLongsProfitLoss(accountData)},\n        {label: 'short', result: totalShortsProfitLoss(accountData)}\n    ]\n    return calculations\n}\n\nexport default longShortComparisonGraphCalc","import {AccountData} from '..'\nimport {longsWonPercent, shortsWonPercent, totalNoOfLongs, totalNoOfShorts} from '../common-calc'\nimport {totalLongsProfitLoss, totalShortsProfitLoss} from './common-calc'\nimport {LongShortComparisonTableCalc} from './types'\n\nconst longShortComparisonTableCalc = (accountData: AccountData) => {\n    const calculations: LongShortComparisonTableCalc = {\n        long: {\n            noOfTrades: totalNoOfLongs(accountData),\n            result: totalLongsProfitLoss(accountData),\n            winRate: longsWonPercent(accountData),\n            aveProfit: aveLongsProfitLoss(accountData),\n            rrr: longsRrr(accountData)\n        },\n        short: {\n            noOfTrades: totalNoOfShorts(accountData),\n            result: totalShortsProfitLoss(accountData),\n            winRate: shortsWonPercent(accountData),\n            aveProfit: aveShortsProfitLoss(accountData),\n            rrr: shortsRrr(accountData)\n        }\n    }\n    return calculations\n}\n\nconst aveLongsProfitLoss = (accountData: AccountData) => {\n    const longsProfit = totalLongsProfitLoss(accountData);\n    const noOfLongs = totalNoOfLongs(accountData);\n    if(noOfLongs === 0) return 0;\n    return longsProfit / noOfLongs\n}\n\nconst aveShortsProfitLoss = (accountData: AccountData) => {\n    const shortsProfit = totalShortsProfitLoss(accountData);\n    const noOfShorts = totalNoOfShorts(accountData);\n    if(noOfShorts === 0) return 0;\n    return shortsProfit / noOfShorts\n}\n\n/** @todo: calculate the risk reward ratio */\nconst longsRrr = (accountData: AccountData) => {\n    return 0\n}\n\n/** @todo: calculate the risk reward ratio */\nconst shortsRrr = (accountData: AccountData) => {\n    return 0\n}\n\nexport default longShortComparisonTableCalc","import {AccountData} from '..'\nimport {ShortBalanceGraphCalc} from './types'\n\n\n/**\n * Profit / loss of longs against an index no in which a trade having an index\n * number 1 implies that it was carried out before a trade with an index number 2\n */\nconst shortBalanceGraphCalc = (accountData: AccountData) => {\n    const calculations: ShortBalanceGraphCalc = [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => trade.action === 'sell')\n            .map((trade, i) => (\n                {tradeNo: i + 1, result: trade.profitLoss}\n            ))\n    ]\n    return calculations\n}\n\nexport default shortBalanceGraphCalc","import {AccountData} from '..'\nimport {sameDay, sameWeek, sameMonth, sameYear} from '@root/utils'\nimport {OverviewAccountReturnsGraphCalc} from './types'\n\n/**\n * For calculating the datasets for the Account Returns graph\n * on the overview page of the trader app\n */\n\n/**\n * Each item in the object is an array of objects\n * with keys tradeNo and result.\n * tradeNo is the index of a trade in a chronologically ordered\n * array of trades. For example, if trade A is the first trade a user\n * ever made and trade B was made after it, then trade A will have a tradeNo\n * of 0 and trade B will have a tradeNo of 1\n * The result is the profit / loss of that trade.\n * Each field in the calculations object shows different views over the\n * same data, which correspond to different time ranges:\n * today, this week, this month, this year and all time\n */\nconst accountReturnsGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: OverviewAccountReturnsGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameDay, today);\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameWeek, today);\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameMonth, today);\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameYear, today);\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, () => true, today);\n}\n\n/**\n * Create graph calc with the only the subset of the trades whose exit_date\n * satisfies the period condition and makes it return true\n */\nconst graphCalc = (accountData: AccountData, periodCondition: Function, today: Date) => {\n    return [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => periodCondition(trade.closeTime, today))\n            .map((trade, i) => (\n                {tradeNo: i + 1, result: trade.profitLoss}\n            ))\n    ]\n}\n\nexport default accountReturnsGraphCalc","import overviewCardsCalc from './overview-cards-calc'\nimport statsCalc from './overview-stats-calc'\nimport weeklySummaryCalc from './weekly-summary-calc'\nimport accountReturnsGraphCalc from './account-returns-graph-calc'\nimport {OverviewCalculations} from './types'\nimport {AccountData} from '@root/types'\n\n\nconst overviewCalculations = (accountData: AccountData) => {\n    const calculations: OverviewCalculations = {\n        cardsCalc: overviewCardsCalc(accountData),\n        statsCalc: statsCalc(accountData),\n        weeklySummaryCalc: weeklySummaryCalc(accountData),\n        accountReturnsGraphCalc: accountReturnsGraphCalc(accountData)\n    };\n    return calculations;\n}\n\n\nexport default overviewCalculations\nexport {aveRRR} from './overview-stats-calc'","/**\n * Functions for calculating the info on the overview cards\n */\n\nimport {winRate, noOfTrades} from '@root/common-calc'\nimport {OverviewCardsCalc} from './types'\nimport {AccountData} from '..'\n\nconst overviewCardsCalc = (accountData: AccountData) => {\n    const calculations: OverviewCardsCalc = {\n        totalBalance: totalBalance(accountData),\n        winRate: winRate(accountData),\n        noOfTrades: noOfTrades(accountData),\n        absGain: absGain(accountData)\n    }\n    return calculations;\n}\n\n/**\n * To calculate the total balance of the account\n * Adds all profits, losses (always negative), deposits and subtracts withdrawals\n * */\n const totalBalance = (accountData: AccountData) => {\n    let totalBalance = totalProfitLoss(accountData) + totalDeposits(accountData)\n        - totalWithdrawals(accountData);\n    return totalBalance;\n}\n\n/** Sums all profit and losses */\nconst totalProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        totalProfitLoss += trade.profitLoss;\n    }\n    return totalProfitLoss;\n}\n\n/** Sums all deposits */\nconst totalDeposits = (accountData: AccountData) => {\n    let totalDeposits = 0;\n    for(const deposit of accountData.deposits){\n        totalDeposits += deposit.amount;\n    }\n    return totalDeposits;\n}\n\n/** Sums all withdrawals */\nconst totalWithdrawals = (accountData: AccountData) => {\n    let totalWithdrawals = 0;\n    for(let withdrawal of accountData.withdrawals){\n        totalWithdrawals += withdrawal.amount;\n    }\n    return totalWithdrawals;\n}\n\n\n/** \n * Calculates total profit and loss divided by total deposits\n * expressed as a precentage\n */\nconst absGain = (accountData: AccountData) => {\n    const profitLoss = totalProfitLoss(accountData);\n    const deposits = totalDeposits(accountData);\n    if(deposits === 0) return 0\n    return (profitLoss / deposits) * 100;\n}\n\nexport default overviewCardsCalc","import {totalNoOfWinningTrades, winRate} from '@root/common-calc'\nimport {graphCalc as balanceCalc} from '@root/cash-and-gains-calculations'\nimport {CashGraphItem} from '@root/cash-and-gains-calculations/types'\nimport {totalNoOfLongs, totalNoOfShorts, longsWonPercent,\n    shortsWonPercent, totalNoOfLongsWon, totalNoOfShortsWon} from '../common-calc'\nimport {OverviewStatsCalc} from './types'\nimport {AccountData} from '../types'\nimport {Trade} from '..'\n\n\nconst statsCalc = (accountData: AccountData) => {\n    const calculations: OverviewStatsCalc = {\n        aveProfit: aveProfit(accountData),\n        aveLoss: aveLoss(accountData),\n        longsWonPercent: longsWonPercent(accountData), \n        noOfLongsWon: totalNoOfLongsWon(accountData),\n        noOfLongs: totalNoOfLongs(accountData),\n        shortsWonPercent: shortsWonPercent(accountData),\n        noOfShortsWon: totalNoOfShortsWon(accountData),\n        noOfShorts: totalNoOfShorts(accountData),\n        bestTrade: bestTrade(accountData),\n        worstTrade: worstTrade(accountData),\n        highestBalance: highestBalance(accountData),\n        aveRRR: aveRRR(accountData),\n        profitFactor: profitFactor(accountData),\n        expectancy: expectancy(accountData),\n        lots: totalLots(accountData),\n        commissions: totalCommissions(accountData)\n    }\n    return calculations;\n}\n\nconst aveProfit = (accountData: AccountData | Trade[]) => {\n    const profit = totalProfit(accountData);\n    const noOfWinningTrades = totalNoOfWinningTrades(accountData);\n    if(noOfWinningTrades === 0) return 0;\n    return profit / noOfWinningTrades;\n}\n\nconst totalProfit = (data: AccountData | Trade[]) => {\n    let totalProfit = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades;\n    }\n    for(const trade of trades){\n        if(trade.profitLoss > 0){\n            totalProfit += trade.profitLoss;\n        }\n    }\n    return totalProfit;\n}\n\nconst aveLoss = (data: AccountData | Trade[]) => {\n    // Multiplying by -1 to remove the negative sign\n    // When displayed, it should be -$loss, not -$-loss\n    const loss = totalLoss(data) * -1;\n    const noOfLosingTrades = totalNoOfLosingTrades(data);\n    if(noOfLosingTrades === 0) return 0;\n    return loss / noOfLosingTrades\n}\n\nconst totalLoss = (data: AccountData | Trade[]) => {\n    let totalLoss = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades;\n    }\n    for(const trade of trades){\n        if(trade.profitLoss < 0){\n            totalLoss += trade.profitLoss;\n        }\n    }\n    return totalLoss;\n}\n\nconst totalNoOfLosingTrades = (data: AccountData | Trade[]) => {\n    let noOfLosingTrades = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades\n    }\n    for(const trade of trades){\n        if(trade.profitLoss < 0){\n            noOfLosingTrades += 1;\n        }\n    }\n    return noOfLosingTrades;\n}\n\n/** Trade with highest profit */\nconst bestTrade = (accountData: AccountData) => {\n    if(accountData.trades.length === 0) return 0\n    let bestTrade = accountData.trades[0].profitLoss;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss > bestTrade){\n            bestTrade = trade.profitLoss;\n        }\n    }\n    return bestTrade;\n}\n\n/** Trade with the lowest profit (or loss) */\nconst worstTrade = (accountData: AccountData) => {\n    if(accountData.trades.length === 0) return 0\n    let worstTrade = accountData.trades[0].profitLoss;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss < worstTrade){\n            worstTrade = trade.profitLoss;\n        }\n    }\n    return worstTrade;\n}\n\nconst highestBalance = (accountData: AccountData) => {\n    const balanceData: CashGraphItem[] = balanceCalc(accountData);\n    let highestBalance = -Infinity;\n    balanceData.forEach((data) => {\n        if(data.balance > highestBalance){\n            highestBalance = data.balance;\n        }\n    })\n    return highestBalance\n}\n\nconst aveRRR = (data: AccountData | Trade[]) => {\n    const profit = aveProfit(data);\n    const loss = aveLoss(data);\n    if(profit === 0 && loss === 0) return 0\n    return profit / loss\n}\n\nconst profitFactor = (accountData: AccountData) => {\n    // What should be returned when loss is 0?\n    const profit = totalProfit(accountData);\n    const loss = totalLoss(accountData);\n    if(profit === 0 && loss === 0) return 0\n    return profit / loss;\n}\n\nconst expectancy = (accountData: AccountData) => {\n    const winrate = winRate(accountData);\n    return (\n        (aveProfit(accountData) * winrate) - (aveLoss(accountData) * (100 - winrate))\n    );\n}\n\nconst totalLots = (accountData: AccountData) => {\n    let totalLots = 0;\n    for(const trade of accountData.trades){\n        if(trade.lots){\n            totalLots += trade.lots;\n        }\n    }\n    return totalLots;\n}\n\nconst totalCommissions = (accountData: AccountData) => {\n    let totalCommissions = 0;\n    for(const trade of accountData.trades){\n        if(trade.swap){\n            totalCommissions += trade.swap;\n        }\n        if(trade.commission){\n            totalCommissions += trade.commission\n        }\n    }\n    return totalCommissions;\n}\n\nexport default statsCalc\nexport {aveRRR}","/**\n * Functions for calculating the info on the weekly summary table\n * The weekly summary calculates the total number of trades,\n * lots and profit gotten for each day of the current week,\n * from Friday to Monday\n */\n\nimport {OverviewWeeklySummaryCalc} from './types'\nimport {AccountData} from '../types'\n\n\nconst weeklySummaryCalc = (accountData: AccountData, today: Date = new Date()) => {\n    let calculations: OverviewWeeklySummaryCalc = {};\n    const weekDates = getWeekDates(today);\n    for(const weekDate of weekDates){\n        calculations[dateToString(weekDate)] = {\n            trades: 0,\n            lots: 0,\n            result: 0\n        }\n    }\n    for(const trade of accountData.trades){\n        for(const weekDate of weekDates){\n            if(extractDateStr(trade.closeTime) === dateToTradeDateFormat(weekDate)){\n                const strDate: string = dateToString(weekDate);\n                calculations[strDate]['trades'] += 1;\n                if(trade.lots){\n                    calculations[strDate]['lots'] += trade.lots;\n                }\n                calculations[strDate]['result'] += trade.profitLoss;\n            }\n        }\n    }\n    return calculations;\n}\n\n/** Receives a date and returns the dates of all days in the week, from monday to friday */\nconst getWeekDates = (today: Date) => {\n    /** Dates of the format 01 Jan, 13 Oct, ... */\n    // Dates are always in the descending order, from latest to earliest\n    let dates = [];\n    /**\n     * To get all dates from Friday to today\n     * Friday's index is 5\n     * today's index is anywhere from 0 to 6\n     * At any point in time, \n     * Friday's index - today's index = number of days to add to today to get Friday\n     * That's why i starts from Friday's index - today's index\n     * When the date gets moved forward by the initial i times, it becomes the Friday of the week\n     * i then keeps reducing, so when today is increased by i - 1, it becomes the Thursday of the week\n     * This continues until i becomes 0\n     * When i is 0, today gets added, because today is moved forward 0 times\n     * Except when today is Sunday. Since Sunday should never be added, a condition is in place\n     * to first check if the day is sunday.\n     */\n    for(let i=FRIDAY - today.getDay(); i>=0; i--){\n        let dayToAdd = new Date(today);\n        // Don't add Sundays\n        if(!(today.getDay() === SUNDAY && i === 0)){\n            dayToAdd.setDate(today.getDate() + i);\n            dates.push(dayToAdd);\n        }\n    }\n    /**\n     * To get the remaining days from yesterday to Monday\n     * i starts from Monday's index because Monday's index is 1\n     * today's date moved back by 1 will give yesterday's date\n     * Moved back by 2 will give day before yesterday's date\n     * So we start from Monday's index, which is 1\n     * i then increases until it is the index of yesterday\n     * At any point, today's date moved back by yesterday's index will give Monday\n     */\n    for(let i=MONDAY; i<today.getDay(); i++){\n        let dayToAdd = new Date(today);\n        dayToAdd.setDate(today.getDate() - i);\n        dates.push(dayToAdd);\n    }\n    return dates\n}\n\nconst dateToString = (date: Date) => {\n    return `${date.getDate()} ${monthMap[date.getMonth()]}`\n}\n\n/** Converts date object into the format of date in the accountData trades */\nconst dateToTradeDateFormat = (date: Date) => {\n    // Add one because JS's months are 0-indexed\n    let month = date.getMonth() + 1;\n    let monthStr = month < 10 ? `0${month}` : `${month}`;\n    let day = date.getDate();\n    let dayStr = day < 10 ? `0${day}` : `${day}`\n    return `${date.getFullYear()}-${monthStr}-${dayStr}`\n}\n\n/**\n* Takes date string of the format 2022-04-22 18:34:00+00:00 and returns 2022-04-22\n*/\nconst extractDateStr = (dateStr: string) => {\n    return dateStr.split('T')[0]\n}\n\nconst SUNDAY = 0;\nconst MONDAY = 1;\nconst TUESDAY = 2;\nconst WEDNESDAY = 3;\nconst THURSDAY = 4;\nconst FRIDAY = 5;\nconst SATURDAY = 6;\n\nconst monthMap: {[key: number]: string} = {\n    0: 'Jan',\n    1: 'Feb',\n    2: 'Mar',\n    3: 'Apr',\n    4: 'May',\n    5: 'Jun',\n    6: 'Jul',\n    7: 'Aug',\n    8: 'Sep',\n    9: 'Oct',\n    10: 'Nov',\n    11: 'Dec'\n}\n\nexport default weeklySummaryCalc\nexport {getWeekDates}","import {AccountData} from '@root/types'\nimport {AveReturnsPerPairGraphCalc} from './types'\n\nconst aveReturnsPerPairGraphCalc = (accountData: AccountData) => {\n    // An object to get all the number of trades and profit / losses\n    // for a pair, to calculate the average returns for that pair\n    const perPairData: PerPairDataCalc = calcPerPairData(accountData);\n    const calculations: AveReturnsPerPairGraphCalc = calcGraphData(perPairData);\n    return calculations\n}\n\n/**\n * Turn the result from calcPerPairData into an array of AveReturnsPerPairGraphCalcItem\n * objects with a pair and the average returns associated with it\n */\nconst calcGraphData = (perPairData: PerPairDataCalc) => {\n    // No need to check if the tradeNo is 0, because if can't be\n    // The fact that the pair appears in this object implies that there must be at\n    // least 1 trade that has this pair\n    const aveReturns = (pair: string) => perPairData[pair].profitLoss / perPairData[pair].tradeNo\n    return Object.keys(perPairData).map((pair) => (\n        {pair, result: aveReturns(pair)}\n    ));\n}\n\n/** \n * Returns an object to get all the number of trades and profit / losses \n * for a pair, which will be used to calculate the average returns for that pair\n*/\nconst calcPerPairData = (accountData: AccountData) => {\n    const perPairData: PerPairDataCalc = {};\n    for(const trade of accountData.trades){\n        if(!(trade.pair in perPairData)){\n            perPairData[trade.pair] = {tradeNo: 0, profitLoss: 0}\n        }\n        perPairData[trade.pair].tradeNo += 1;\n        perPairData[trade.pair].profitLoss += trade.profitLoss;\n    }\n    return perPairData\n}\n\ntype PerPairDataCalc = {[key: string]: {tradeNo: number, profitLoss: number}}\n\nexport default aveReturnsPerPairGraphCalc","import {aveRRR} from '@root/overview-calculations'\nimport {AccountData} from '@root/types'\nimport {AveRrrPerPairGraphCalc} from './types'\nimport {groupTradesByPair} from './utils'\n\n\nconst aveRrrPerPairGraphCalc = (accountData: AccountData): AveRrrPerPairGraphCalc => {\n    const pairToTradesMap = groupTradesByPair(accountData);\n    return Object.keys(pairToTradesMap).map((pair) => ({\n        pair,\n        rrr: aveRRR(pairToTradesMap[pair])\n    }))\n}\n\nexport default aveRrrPerPairGraphCalc","import {AccountData} from '@root/types'\nimport aveReturnsPerPairGraphCalc from './ave-returns-per-pair-graph-calc'\nimport aveRrrPerPairGraphCalc from './ave-rrr-per-pair-graph-calc'\nimport pairsAnalysisTableCalc from './pairs-analysis-table-calc'\nimport {PairsAnalysisCalculations} from './types'\n\n\nconst pairsAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: PairsAnalysisCalculations = {\n        aveReturnsPerPairGraphCalc: aveReturnsPerPairGraphCalc(accountData),\n        aveRrrPerPairGraphCalc: aveRrrPerPairGraphCalc(accountData),\n        pairsAnalysisTableCalc: pairsAnalysisTableCalc(accountData)\n    }\n    return calculations\n}\n\nexport default pairsAnalysisCalculations","import {noOfTrades, totalNoOfLongs, totalNoOfShorts, winRate, totalNoOfWinningTrades} from '@root/common-calc'\nimport {AccountData, Trade} from '@root/types'\nimport {groupTradesByPair} from './utils'\nimport {PairsAnalysisTableCalc, TradesPerPair} from './types'\n\n\nconst pairsAnalysisTableCalc = (accountData: AccountData): PairsAnalysisTableCalc => {\n    const tradesPerPair: TradesPerPair = groupTradesByPair(accountData);\n    return Object.keys(tradesPerPair).map((pair) => {\n        const trades = tradesPerPair[pair];\n        return {\n            pair,\n            noOfTradesOnPair: trades.length,\n            noOfProfitableTradesOnPair: totalNoOfWinningTrades(trades),\n            profitableTradesOnPairPercent: winRate(trades),\n            noOfLosingTradesOnPair: noOfLosingTrades(trades),\n            losingTradesOnPairPercent: loseRate(trades),\n            noOfShortsOnPair: totalNoOfShorts(trades),\n            shortsOnPairPercent: shortsOnPairPercent(trades),\n            noOfLongsOnPair: totalNoOfLongs(trades),\n            longsOnPairPercent: longsOnPairPercent(trades),\n            noOfTpOnPair: noOfTpOnPair(trades),\n            tpOnPairPercent: tpOnPairPercent(trades),\n            noOfSlOnPair: noOfSlOnPair(trades),\n            slOnPairPercent: slOnPairPercent(trades)\n        }\n    });\n}\n\nconst longsOnPairPercent = (trades: Trade[]) => {\n    const noOfShorts = totalNoOfLongs(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (noOfShorts / totalNoOfTrades) * 100\n}\n\nconst shortsOnPairPercent = (trades: Trade[]) => {\n    const noOfShorts = totalNoOfShorts(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (noOfShorts / totalNoOfTrades) * 100\n}\n\nconst noOfLosingTrades = (trades: Trade[]) => {\n    const lossTrades = trades.filter((trade) => trade.profitLoss < 0);\n    return lossTrades.length\n}\n\nconst loseRate = (trades: Trade[]) => {\n    const lossTrades = noOfLosingTrades(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (lossTrades / totalNoOfTrades) * 100\n}\n\nconst noOfTpOnPair = (trades: Trade[]) => {\n    let tpOnPair = 0;\n    trades.forEach((trade) => {\n        tpOnPair += trade.takeProfit;\n    })\n    return tpOnPair;\n}\n\nconst noOfSlOnPair = (trades: Trade[]) => {\n    let slOnPair = 0;\n    trades.forEach((trade) => {\n        slOnPair += trade.stopLoss;\n    })\n    return slOnPair;\n}\n\nconst tpOnPairPercent = (trades: Trade[]) => {\n    let tpOnPair = 0;\n    let count = 0;\n    trades.forEach((trade) => {\n        tpOnPair += trade.takeProfit;\n        count++;\n    })\n    return tpOnPair / count;\n}\n\nconst slOnPairPercent = (trades: Trade[]) => {\n    let slOnPair = 0;\n    let count = 0;\n    trades.forEach((trade) => {\n        slOnPair += trade.stopLoss;\n        count++;\n    })\n    return slOnPair / count;\n}\n\nexport default pairsAnalysisTableCalc","import {AccountData, Trade} from '@root/types'\nimport {TradesPerPair} from './types'\n\n\nconst groupTradesByPair = (accountData: AccountData) => {\n    const tradesPerPair: TradesPerPair = {};\n    for(const trade of accountData.trades){\n        if(!(trade.pair in tradesPerPair)){\n            tradesPerPair[trade.pair] = [];\n        }\n        tradesPerPair[trade.pair].push(trade);\n    }\n    return tradesPerPair\n}\n\nexport {\n    groupTradesByPair\n}","import {AccountData} from '@root/types'\nimport returnsPerPeriodGraphCalc from './returns-per-period-graph-calc'\nimport {PeriodAnalysisCalculations} from './types'\n\nconst periodAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: PeriodAnalysisCalculations = {\n        returnsPerPeriodGraphCalc: returnsPerPeriodGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default periodAnalysisCalculations","import {AccountData, Trade} from '@root/types'\nimport {DayKey, MonthKey, ReturnsPerPeriodGraphCalc} from './types'\n\n\nconst returnsPerPeriodGraphCalc = (accountData: AccountData) => {\n    const calculations: ReturnsPerPeriodGraphCalc = {\n        daily: dailyReturnsPerPeriod(accountData.trades),\n        monthly: monthlyReturnsPerPeriod(accountData.trades),\n        yearly: yearlyReturnsPerPeriodGraphCalc(accountData.trades)\n    }\n    return calculations\n}\n\nconst dailyReturnsPerPeriod = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {\n        [MONDAY]: 0, [TUESDAY]: 0, [WEDNESDAY]: 0,\n        [THURSDAY]: 0, [FRIDAY]: 0\n    };\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const date = new Date(trade.closeTime);\n            const day = date.getDay();\n            returnsPerPeriod[day] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((day: string) => (\n            {day: dayNoToString[parseInt(day)], result: returnsPerPeriod[parseInt(day)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod();\n}\n\nconst monthlyReturnsPerPeriod = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {\n        [JANUARY]: 0, [FEBRUARY]: 0, [MARCH]: 0,\n        [APRIL]: 0, [MAY]: 0, [JUNE]: 0, [JULY]: 0, [AUGUST]: 0, [SEPTEMBER]: 0,\n        [OCTOBER]: 0, [NOVEMBER]: 0, [DECEMBER]: 0\n    };\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const date = new Date(trade.closeTime);\n            const month = date.getMonth();\n            returnsPerPeriod[month] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((month: string) => (\n            {month: monthNoToString[parseInt(month)], result: returnsPerPeriod[parseInt(month)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod()\n}\n\nconst yearlyReturnsPerPeriodGraphCalc = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {}\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const year = new Date(trade.closeTime).getFullYear();\n            if(!(year in returnsPerPeriod)){\n                returnsPerPeriod[year] = 0;\n            }\n            returnsPerPeriod[year] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((year: string) => (\n            {year: parseInt(year), result: returnsPerPeriod[parseInt(year)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod();\n}\n\nconst MONDAY = 1;\nconst TUESDAY = 2;\nconst WEDNESDAY = 3;\nconst THURSDAY = 4;\nconst FRIDAY = 5;\n\nconst JANUARY = 0;\nconst FEBRUARY = 1;\nconst MARCH = 2;\nconst APRIL = 3;\nconst MAY = 4;\nconst JUNE = 5;\nconst JULY = 6;\nconst AUGUST = 7;\nconst SEPTEMBER = 8;\nconst OCTOBER = 9;\nconst NOVEMBER = 10;\nconst DECEMBER = 11;\n\nconst dayNoToString: {[key: number]: DayKey} = {\n    [MONDAY]: 'Monday',\n    [TUESDAY]: 'Tuesday',\n    [WEDNESDAY]: 'Wednesday',\n    [THURSDAY]: 'Thursday',\n    [FRIDAY]: 'Friday'\n}\n\nconst monthNoToString: {[key: number]: MonthKey} = {\n    [JANUARY]: 'January',\n    [FEBRUARY]: 'February',\n    [MARCH]: 'March',\n    [APRIL]: 'April',\n    [MAY]: 'May',\n    [JUNE]: 'June',\n    [JULY]: 'July',\n    [AUGUST]: 'August',\n    [SEPTEMBER]: 'September',\n    [OCTOBER]: 'October',\n    [NOVEMBER]: 'November',\n    [DECEMBER]: 'December'\n}\n\nexport default returnsPerPeriodGraphCalc","import {AccountData} from '@root/types'\nimport tradeDurationTableCalc from './trade-duration-table-calc'\nimport openHourTableCalc from './open-hour-table-calc'\nimport timeAnalysisGraphCalc from './time-analysis-graph-calc'\nimport {TradingTimeAnalysisCalculations} from './types'\n\n\nconst tradingTimeAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: TradingTimeAnalysisCalculations = {\n        tradeDurationTableCalc: tradeDurationTableCalc(accountData),\n        openHourTableCalc: openHourTableCalc(accountData),\n        timeAnalysisGraphCalc: timeAnalysisGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default tradingTimeAnalysisCalculations","import {AccountData} from '@root/types'\nimport {OpenHourTableCalcItem} from '..'\nimport {OpenHourTableCalc} from './types'\n\nconst openHourTableCalc = (accountData: AccountData): OpenHourTableCalc => {\n    const openHourMap: {[key: string]: Omit<OpenHourTableCalcItem, 'hour'>} = {}\n    for(const trade of accountData.trades){\n        const hour = formatTime(trade.openTime);\n        if(!(hour in openHourMap)){\n            openHourMap[hour] = {result: 0, noOfTrades: 0};\n        }\n        openHourMap[hour].result += trade.profitLoss;\n        openHourMap[hour].noOfTrades += 1;\n    }\n    return Object.keys(openHourMap).map((hour) => ({\n        hour, result: openHourMap[hour].result, noOfTrades: openHourMap[hour].noOfTrades\n    }))\n}\n\nconst formatTime = (rawTimeStr: string): string => {\n    // In the general sense\n    // extract the 18 in '2022-04-12T18:09:00+00:00' and return '18:00-18:59'\n    const hour = rawTimeStr.split('T')[1].split(':')[0];\n    return `${hour}:00 - ${hour}:59`\n}\n\nexport default openHourTableCalc","import {AccountData, Trade} from '@root/types'\nimport {sameDay, sameWeek, sameMonth, sameYear} from '@root/utils'\nimport {TimeAnalysisGraphCalcItem} from '..'\nimport {TimeAnalysisGraphCalc} from './types'\n\n/**\n * Graph of open hour against results\n */\n\nconst timeAnalysisGraphCalc = (accountData: AccountData, today: Date = new Date) => {\n    const calculations: TimeAnalysisGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameDay(trade.openTime, today))\n    );\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameWeek(trade.openTime, today))\n    );\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameMonth(trade.openTime, today))\n    );\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameYear(trade.openTime, today))\n    );\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData.trades);\n}\n\nconst graphCalc = (trades: Trade[]): TimeAnalysisGraphCalcItem[] => {\n    const tradeHourToResultMap: {[key: string]: number} = {};\n    for(const trade of trades){\n        // extract the 06 in '2022-10-23T06:03:00Z'\n        const hour = trade.openTime.split('T')[1].split(':')[0];\n        if(!(hour in tradeHourToResultMap)){\n            tradeHourToResultMap[hour] = 0;\n        }\n        tradeHourToResultMap[hour] += trade.profitLoss;\n    }\n    return Object.keys(tradeHourToResultMap).map((hour) => ({\n        openHour: hour + ':00', result: tradeHourToResultMap[hour]\n    }))\n}\n\nexport default timeAnalysisGraphCalc","import {AccountData} from '@root/types'\nimport {TradeDurationTableCalc, TradeDurationTableCalcItem} from './types'\n\n\nconst tradeDurationTableCalc = (accountData: AccountData): TradeDurationTableCalc => {\n    const durationMap: {[key: string]: Omit<TradeDurationTableCalcItem, 'duration'>} = {}\n    for(const trade of accountData.trades){\n        const duration = durationStr(trade.openTime, trade.closeTime);\n        if(!(duration in durationMap)){\n            durationMap[duration] = {result: 0, noOfTrades: 0}\n        }\n        durationMap[duration].result += trade.profitLoss;\n        durationMap[duration].noOfTrades += 1;\n    }\n    return Object.keys(durationMap).map((duration) => ({\n        duration,\n        noOfTrades: durationMap[duration].noOfTrades,\n        result: durationMap[duration].result\n    }))\n}\n\n/**\n * Accepts the open time and close times of a trade\n * and returns an approximate duration in a string, like 1 week,\n * 2 mins, 1 hour.\n */\nconst durationStr = (openTimeStr: string, closeTimeStr: string): string => {\n    const [openTimeDateStr, openTimeTimeStr] = openTimeStr.split('T');\n    const [openTimeYearStr, openTimeMonthStr, openTimeDayStr] = openTimeDateStr.split('-');\n    const [openTimeHourStr, openTimeMinutesStr] = openTimeTimeStr.split(':');\n\n    const [closeTimeDateStr, closeTimeTimeStr] = closeTimeStr.split('T');\n    const [closeTimeYearStr, closeTimeMonthStr, closeTimeDayStr] = closeTimeDateStr.split('-');\n    const [closeTimeHourStr, closeTimeMinutesStr] = closeTimeTimeStr.split(':');\n    \n    let [minutes, hours] = (() => {\n        // instantiate date objects with randoms dates\n        // the days, months, and years aren't needed\n        // all that these dates are used for are the time differences\n        const randomYear = 2022;\n        const randomMonth = 2;\n        const randomDay = 2;\n        const closeTimeDate = new Date(randomYear, randomMonth, randomDay);\n        closeTimeDate.setHours(parseInt(closeTimeHourStr));\n        closeTimeDate.setMinutes(parseInt(closeTimeMinutesStr));\n        const openTimeDate = new Date(randomYear, randomMonth, randomDay);\n        openTimeDate.setHours(parseInt(openTimeHourStr));\n        openTimeDate.setMinutes(parseInt(openTimeMinutesStr));\n        const difference = closeTimeDate.getTime() - openTimeDate.getTime();\n        const totalMins = (difference / 1000) / 60;\n        const hours = parseInt(`${totalMins / 60}`);\n        const minutes = totalMins % 60;\n        return [minutes, hours];\n    })()\n    let [days, weeks, months, years] = (() => {\n        const closeTimeDate = new Date(\n            parseInt(closeTimeYearStr),\n            parseInt(closeTimeMonthStr) - 1,\n            parseInt(closeTimeDayStr)\n        );\n        const openTimeDate = new Date(\n            parseInt(openTimeYearStr),\n            parseInt(openTimeMonthStr) - 1,\n            parseInt(openTimeDayStr)\n        );\n        // The absolute difference in milliseconds\n        const difference = closeTimeDate.getTime() - openTimeDate.getTime();\n        // From milliseconds to days\n        const totalDays = difference/1000/60/60/24;\n        // How many weeks can the days fit in\n        const totalWeeks = parseInt(`${totalDays / 7}`);\n        // How many months can the weeks fit in\n        const totalMonths = parseInt(`${totalWeeks / 4}`);\n        // The remaining days that couldn't fit into the weeks\n        const days = totalDays % 7;\n        // The remaining weeks that couldn't fit into the months\n        const weeks = totalWeeks % 4;\n        // The remaining months that couldn't fit into years\n        const months = totalMonths % 12;\n        // How many years can the months fit in\n        const years = parseInt(`${totalMonths / 12}`);\n        return [days, weeks, months, years];\n    })()\n    if(minutes > 50){\n        minutes = 0;\n        hours += 1;\n    }\n    if(hours > 22){\n        hours = 0;\n        days += 1;\n    }\n    if(days > 3){\n        days = 0;\n        weeks += 1;\n    }\n    if(weeks > 3){\n        weeks = 0;\n        months += 1;\n    }\n    if(months > 11){\n        months = 0;\n        years += 1;\n    }\n    const durationInString = (n: number, unit: string) => {\n        return n === 1 ? `1 ${unit}` : `${n} ${unit}s`\n    }\n    if(years > 0){\n        return durationInString(years, 'year');\n    }\n    if(months > 0){\n        return durationInString(months, 'month');\n    }\n    if(weeks > 0){\n        return durationInString(weeks, 'week');\n    }\n    if(days > 0){\n        return durationInString(days, 'day');\n    }\n    if(hours > 0){\n        return durationInString(hours, 'hour');\n    }\n    if(minutes > 0){\n        return durationInString(minutes, 'min');\n    }\n    return durationInString(1, 'min');\n}\n\nexport default tradeDurationTableCalc","/**\n * A year to be used in date sentinels to represent dates whose values\n * are to far in the future for real date to be ahead of the same way \n * infinity is used in number sentinels to represent \n * \"a number no other number is larger than\"\n * */\nconst FAR_IN_THE_FUTURE_YEAR = 200000;\n\n/**\n * Does the date in @param dateStr fall in the same day as @param otherDate\n */\n const sameDay = (dateStr: string, otherDate: Date): boolean => {\n    const date = new Date(dateStr);\n    // If they fall on the same year, month and day, then they fell on the same day\n    return date.getFullYear() === otherDate.getFullYear() && date.getMonth() === otherDate.getMonth()\n        && date.getDate() === otherDate.getDate()\n}\n\n/**\n * Does the date in @param dateStr fall in the same week as @param otherDate\n */\nconst sameWeek = (dateStr: string | Date, otherDate: Date) => {\n    const date = typeof(dateStr) === 'object' ? dateStr : new Date(dateStr);\n    /**\n     * Upper bound is Sunday 12 am and lower bound is Saturday 11:59 pm\n     * If today is Sunday, then date will have to be subtracted 0 times (it's date index: 0)\n     * If today is Monday, then date will have to be subtracted 1 time (it's date index: 1)\n     * If today is Tuesday, then date will have to be subtracted 2 times (it's date index: 2)\n     * In general, to get Sunday from any day, you take the date back by the day's date index\n     * which happen to be 0, 1, 2, 3, 4, 5, 6 for Sunday, ..., Saturday respectively\n     */\n    const getLowerBound = (otherDate: Date) => {\n        // Initialize to the otherDate\n        let lowerBound = new Date(otherDate);\n        // Take the date back by the day's date index\n        lowerBound.setDate(lowerBound.getDate() - lowerBound.getDay());\n        // Set the Sunday's time to 12 am on the dot\n        lowerBound.setHours(12);\n        lowerBound.setMinutes(0);\n        lowerBound.setSeconds(0);\n        lowerBound.setMilliseconds(0);\n        return lowerBound;\n    }\n    const lowerBound = getLowerBound(otherDate);\n    /**\n     * Lower bound is Saturday 11:59 pm\n     * If today is Sunday, then date will have to be moved forward by 6 (6 - 0)\n     * If today is Monday, then date will have to be moved forward by 5 (6 - 1)\n     * If today is Tuesday, then date will have to be moved forward by 4 (6 - 2)\n     * ...\n     * To get get Saturday from any day, you take the date forward by 6 - day's date index\n     */\n    const getUpperBound = (otherDate: Date) => {\n        let upperBound = new Date(otherDate);\n        // Make it a Saturday\n        upperBound.setDate(upperBound.getDate() + (6 - upperBound.getDay()));\n        // Set the Saturday's time to 11:59:59 p.m.\n        upperBound.setHours(23);\n        upperBound.setMinutes(59);\n        upperBound.setSeconds(59);\n        return upperBound;\n    }\n    const upperBound = getUpperBound(otherDate);\n    /**\n     * Does @param date fall between @param upperBound and @param lowerBound?\n     */\n    const dateFallsWithinRange = (date: Date, upperBound: Date, lowerBound: Date) => {\n        return date >= lowerBound && date <= upperBound\n    }\n    return dateFallsWithinRange(date, upperBound, lowerBound);\n}\n\n/**\n * Does the date in @param dateStr fall in the same month as @param otherDate\n */\nconst sameMonth = (dateStr: string, otherDate: Date) => {\n    const date = new Date(dateStr);\n    // If they fell in the same year, and the same month,\n    // then they fell in the same month\n    return date.getFullYear() === otherDate.getFullYear() && date.getMonth() === otherDate.getMonth()\n}\n\n/**\n * Does the date in @param dateStr fall in the same year as @param otherDate\n */\n const sameYear = (dateStr: string, otherDate: Date) => {\n    const date = new Date(dateStr);\n    return date.getFullYear() === otherDate.getFullYear()\n}\n\nexport {\n    sameDay,\n    sameWeek,\n    sameMonth,\n    sameYear,\n    FAR_IN_THE_FUTURE_YEAR\n}","const randomNumber = (min: number, max: number) => {\n    return (Math.random() * (max - min)) + min\n}\n\nconst randomInt = (min: number, max: number) => {\n    return Math.round(randomNumber(min, max));\n}\n\nconst mergeArrays = (...arrays: Array<Array<any>>) => {\n    let newArray: any[] = [];\n    for(const array of arrays){\n        newArray = [...newArray, ...array];\n    }\n    return newArray\n}\n\nconst sum = (arr: Array<number>) => {\n    let sum = 0;\n    for(const i in arr){\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst sumObjArray = (objs: Array<{[key: string]: any}>, objKey: string) => {\n    return sum(objs.map((obj) => obj[objKey]))\n}\n\nconst cloneObj = (obj: {[key: string]: any}) => {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n\n\nexport {\n    randomNumber,\n    mergeArrays,\n    sum,\n    sumObjArray,\n    cloneObj,\n    randomInt\n}\n\nexport * from './date-utils'"],"names":["children","style","P","color","getColor","fontFamily","subMenu","subMenuIsOpen","subMenuName","selectedSubMenuName","selectedSubMenuItemIndex","onSubMenuItemSelect","Collapse","in","timeout","unmountOnExit","List","disablePadding","component","undefined","map","item","i","ListItemButton","sx","width","pl","selected","onClick","e","name","Icon","index","ListItem","disableGutters","padding","marginTop","getDimen","flexDirection","ListItemIcon","fontSize","ExpandLess","ExpandMore","SvgIcon","xmlns","fill","className","viewBox","d","fillRule","TRADER_OVERVIEW_ROUTE","RouteConst","TRADER_JOURNAL_ROUTE","TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE","TRADER_CASH_AND_GAINS_ROUTE","TRADER_SETTINGS_ROUTE","mainMenuItems","icon","HouseIcon","route","CalendarIcon","AnalyticsChartIcon","NotesIcon","bottomMenuItems","logout","SettingsIcon","LogOutIcon","action","getMenuInfo","menuItems","Object","keys","itemsKey","length","menuItemIndex","adjustIndexForBottomMenuItems","stripSlashes","startsWith","substr","endsWith","location","pageRoute","locationList","pathname","split","getPageRouteName","initialSubMenuName","initialMainMenuItemIndex","initialSubMenuIsOpen","initialSelectedSubMenuItemIndex","initialSubMenuItemSelected","createNavbarItem","selectedMainMenuItemIndex","onMainMenuItemClick","setMenuIsOpen","useLocation","getIntialNavbarListStateValues","useState","setSelectedMainMenuItemIndex","subMenuItemSelected","setSubMenuItemSelected","setSelectedSubMenuItemIndex","setSelectedSubMenuName","setSubMenuIsOpen","navigate","useNavigate","unselectMainMenuItem","closeSubMenu","closeMenu","carryOutItemAction","itemJustSelectedIndex","doesntHaveSubMenu","itemInSubMenuIsSelected","openSubMenu","selectSubMenuItem","alignItems","marginBottom","Divider","mx","Toast","useContext","ToastContext","menuIsOpen","isScreenSmall","useScreenIsSmall","BASE_URL","HttpConst","LOGOUT_URL","Http","url","successFunc","localStorage","removeItem","INFO_LOGIN_ROUTE","errorFunc","err","console","log","error","dontShowOnBigScreen","links","sidebar","SwipeableDrawer","variant","open","onClose","onOpen","showLogo","onSidebarMenuButtonClick","Drawer","ModalProps","keepMounted","screenIsSmall","getDimenInNo","marginLeft","height","overflowY","marginRight","heading","dontShowSelector","justifyContent","H4","globalData","GlobalDataContext","accounts","getTradeAccountNames","currentAccountName","getCurrentTradeAccountName","onCurrentAccountChange","CurrentAccountChangerContext","value","onChange","getTradeAccountIdOf","target","options","placeholder","title","selectorOptions","onSelectorSelectedOptionChange","paddingLeft","paddingTop","paddingBottom","paddingRight","H6","option","data","xAxisKey","yAxisKey","tooltipName","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","CartesianGrid","vertical","strokeDasharray","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","axisLine","tickLine","tick","dataKey","YAxis","Tooltip","Area","type","stroke","strokeWidth","fillOpacity","barSize","Legend","Bar","opacity","initialGraphDataStateValues","initialXAxisKeyStateValue","outline","headerIsOutside","headerPaddingTop","testId","props","graphVariant","graphData","setGraphData","currentXAxisKey","setcurrentXAxisKey","useEffect","assign","border","borderRadius","getConditionalStyles","conditionalStyle","conditionalStylesArray","Array","isArray","push","stylesArray","condition","mergeObject","objArray","lastObj","pop","formatHeaders","headers","processHeaders","headerRowToAdd","headerItem","headerRows","headerItems","processMultipleHeaders","rows","bodyColumnConditionalStyle","headerStyle","headerRowConditionalStyle","headerColumnConditionalStyle","headerColumnTextConditionalStyle","headerTextStyle","headerRowTextConditionalStyle","bodyStyle","bodyRowConditionalStyle","TableContainer","Paper","boxShadow","TableHead","rowi","conditionalRowStyle","conditionalRowTextStyle","TableRow","coli","conditionalColumnTextStyle","conditionalColumnStyle","headerCellStyle","textStyle","globalStyle","TableCell","textAlign","colSpan","BP","TableBody","row","conditionalRowStyles","cell","conditionalColumnStyles","bodyCellStyle","align","calcFunc","updateComponentCalcState","afterCalcFunc","hasLoaded","accountData","getCurrentTradeAccountData","newCalc","size","defaultAccountReturnsGraphItem","cardsCalc","totalBalance","noOfTrades","winRate","absGain","statsCalc","aveProfit","aveLoss","longsWonPercent","noOfLongsWon","noOfLongs","shortsWonPercent","noOfShortsWon","noOfShorts","bestTrade","worstTrade","highestBalance","aveRRR","profitFactor","expectancy","lots","commissions","weeklySummaryCalc","accountReturnsGraphCalc","todayGraphCalc","thisWeekGraphCalc","thisMonthGraphCalc","thisYearGraphCalc","allTimeGraphCalc","to2dpString","n","toFixed","content","backgroundColor","H5","balance","calc","toString","formatMoney","amount","to2dp","formatPercent","num","to2dpstring","parseFloat","createCell","StatsTableCell","stats","createRows","columnIndex","background","resultInColor","result","summary","date","trades","defaultOverviewCalc","overviewCalc","setOverviewCalc","useRecalc","overviewCalculations","defaultGraphCalc","cashGraphCalc","gainsGraphCalc","rawData","refinedData","defaultCashAndGainsCalc","objKey","key","graphItem","gainsPercent","formatData","cashAndGainsCalc","setCashAndGainsCalc","cashAndGainsCalculations","calcs","pair","commission","swap","expensesTableCalc","defaultExpensesCalc","expensesCalc","setExpensesCalc","setRows","expensesCalculations","newExpensesCalc","long","short","rrr","defaultLongShortComparisonTableCalcItem","longShortComparisonGraphCalc","label","longBalanceGraphCalc","shortBalanceGraphCalc","longShortComparisonTableCalc","defaultLongShortAnalysisCalc","longShortAnalysisCalc","setLongShortAnalysisCalc","longShortAnalysisCalculations","noWithPercent","percent","noOfTradesOnPair","noOfProfitableTradesOnPair","profitableTradesOnPairPercent","noOfLosingTradesOnPair","losingTradesOnPairPercent","noOfShortsOnPair","shortsOnPairPercent","noOfLongsOnPair","longsOnPairPercent","noOfTpOnPair","tpOnPairPercent","noOfSlOnPair","slOnPairPercent","headerObj","obj","defaultPairsAnalysisCalc","aveReturnsPerPairGraphCalc","aveRrrPerPairGraphCalc","pairsAnalysisTableCalc","pairsAnalysisCalc","setPairsAnalysisCalc","pairsAnalysisCalculations","returnsPerPeriodGraphCalc","daily","day","monthly","month","yearly","defaultPeriodAnalysisCalc","periodAnalysisCalc","setPeriodAnalysisCalc","periodAnalysisCalculations","year","format","openHour","duration","hour","timeAnalysisGraphCalc","tradeDurationTableCalc","openHourTableCalc","defaultTradingTimeAnalysisCalc","tradingTimeAnalysisCalc","setTradingTimeAnalysisCalc","tradingTimeAnalysisCalculations","email","INFO_CHANGE_PASSWORD_ROUTE","href","rel","dialogIsOpen","setDialogIsOpen","okButtonColor","okButtonText","okButtonProps","onOkClick","DELETE_ACCOUNT_URL","deleteAccount","onCancelClick","display","dsUsername","getUserEmail","getUserDsUsername","GlobalData","this","initialEmptyRawData","bind","getCurrentTradeAccountId","changeCurrentTradeAccountId","userIsSubscribed","userIsOnFreeTrial","user_data","accountId","trade_data","current_account_id","parseInt","accountIds","accountNames","forEach","newCurrentAccountId","rawDataClone","JSON","parse","stringify","currentAccountId","accountName","ds_username","is_subscribed","on_free","logins_after_ask","current_feedback_question","no_of_trades","setGlobalData","GET_INIT_DATA_URL","resp","eaDownloadUrls","download","textDecoration","cursor","Notebook","lazy","Journal","createContext","useGlobalData","useEaDownloadUrl","noteData","getNoteData","TRADER_PAIRS_ANALYSIS_ROUTE","TRADER_TIME_ANALYSIS_ROUTE","TRADER_PERIOD_ANALYSIS_ROUTE","TRADER_EXPENSES_ROUTE","TRADER_NOTES_ROUTE","Provider","newGlobalData","noAccounts","Suspense","fallback","path","element","columns","field","renderHeader","trade","openTime","Date","closeTime","toUpperCase","fee","profit","profitLoss","pageSize","components","Toolbar","GridToolbar","Note","lastEdited","isSaving","saveQueue","last_edited","text","httpMethod","SAVE_NOTE_URL","UPDATE_NOTE_URL","latestChangeToSave","_save","toISOString","toNoteData","Promise","resolve","DELETE_NOTE_URL","reject","toDateString","noteItem","active","removeNoteFromList","noteIndex","isDeleting","setIsDeleting","disabled","ListItemText","primary","secondary","lastEditedToString","CircularProgress","IconButton","delete","then","catch","Delete","noteItems","onNoteSelect","isEditing","listContainerRef","useRef","ref","Slide","direction","container","current","editor","getPluginType","MARK_BOLD","FormatBold","tooltip","MARK_ITALIC","FormatItalic","onMouseDown","addMark","MARK_UNDERLINE","FormatUnderlined","MARK_STRIKETHROUGH","FormatStrikethrough","MARK_SUPERSCRIPT","clear","Superscript","MARK_SUBSCRIPT","Subscript","FormatAlignLeft","FormatAlignCenter","FormatAlignRight","FormatAlignJustify","noMoreRedos","history","redos","noMoreUndos","undos","Undo","undo","Redo","redo","ELEMENT_UL","FormatListBulleted","ELEMENT_OL","FormatListNumbered","createHeaderRowNode","headerRow","colNo","createRow","tableNode","isElement","rowNo","autoFocus","setColumns","setNewValueIfValidNumber","newValue","setValue","isNaN","validNumber","createTableNode","newParagraphNode","ELEMENT_PARAGRAPH","Transforms","TableView","imageUrl","setImageUrl","setResolve","closeDialog","Image","getImageUrl","prevResolve","setUrl","Link","getLinkUrl","prevFunc","ELEMENT_H1","LooksOne","ELEMENT_H2","LooksTwo","ELEMENT_H3","Looks3","ELEMENT_H4","Looks4","ELEMENT_H5","Looks5","ELEMENT_H6","Looks6","ELEMENT_BLOCKQUOTE","FormatQuote","usePlateEditorState","attributes","onMouseOver","createPlugins","createParagraphPlugin","createBlockquotePlugin","createHeadingPlugin","createListPlugin","createResetNodePlugin","createSoftBreakPlugin","createExitBreakPlugin","createTablePlugin","createLinkPlugin","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createStrikethroughPlugin","createSuperscriptPlugin","createSubscriptPlugin","createAlignPlugin","inject","validTypes","createImagePlugin","createPlateUI","ELEMENT_LINK","LinkElement","ELEMENT_TD","TdElement","setTitle","Input","fontWeight","note","setContent","plugins","editableProps","showAllNotes","createNewNote","currentNoteIndex","setCurrentNoteIndex","setIsEditing","notesHasLoaded","setNotesHasLoaded","setNoteItems","setEditorValue","usePlateStore","set","rawNoteData","hasBeenSaved","newNoteItems","filter","newNote","save","mt4EaDownloadUrl","setMt4EaDownloadUrl","mt5EaDownloadUrl","setMt5EaDownloadUrl","DOWNLOAD_EA_URL","file","Blob","fileDownloadUrl","URL","createObjectURL","extras","responseType","GET_ALL_NOTES_URL","LOGIN_ROUTE","handleRequest","config","response","status","BaseHttp","get","put","post","initNavigate","onKeyPress","today","accData","cloneObj","sameDay","graphCalc","sameWeek","sameMonth","sameYear","tradesIndex","withdrawalsIndex","depositsIndex","currentTradeNo","currentBalance","tradeNo","currentDeposit","deposits","currentWithdrawal","withdrawals","currentTrade","getDatePos","depositPos","withdrawalPos","depositIsEarliest","addTradeToBalance","decreaseWithdrawalFromBalance","addDepositToBalance","deposit","withdrawal","depositDate","FAR_IN_THE_FUTURE_YEAR","time","withdrawalDate","tradeDate","posTriple","UNSET","posAlreadySet","pos","sameDate","date1","date2","todayGainsPercent","thisWeekGainsPercent","thisMonthGainsPercent","thisYearGainsPercent","allTimeGainsPercent","totalDeposits","sumObjArray","totalNoOfLongs","noOfLongsFromTradeArray","noOfLongsFromAccountData","totalNoOfShorts","noOfShortsFromTradesArray","noOfShortsFromAccountData","totalNoOfLongsWon","totalNoOfShortsWon","totalNoOfWinningTrades","totalNoOfWinningTradesFromTradesArray","totalNoOfWinningTradesFromAccountData","noOfWinningTrades","noOfTradess","calcExpensesPerPair","expensesPerPair","totalLongsProfitLoss","totalProfitLoss","totalShortsProfitLoss","aveLongsProfitLoss","longsProfit","aveShortsProfitLoss","shortsProfit","longsRrr","shortsRrr","periodCondition","totalWithdrawals","totalProfit","loss","totalLoss","noOfLosingTrades","totalNoOfLosingTrades","balanceData","Infinity","winrate","totalLots","totalCommissions","getWeekDates","dates","FRIDAY","getDay","dayToAdd","SUNDAY","setDate","getDate","MONDAY","dateToString","monthMap","getMonth","dateToTradeDateFormat","monthStr","dayStr","getFullYear","extractDateStr","dateStr","calculations","weekDates","weekDate","strDate","calcGraphData","perPairData","aveReturns","calcPerPairData","pairToTradesMap","groupTradesByPair","totalNoOfTrades","loseRate","lossTrades","tpOnPair","takeProfit","slOnPair","stopLoss","count","tradesPerPair","dailyReturnsPerPeriod","returnsPerPeriod","TUESDAY","WEDNESDAY","THURSDAY","calculateReturnsPerPeriod","dayNoToString","monthlyReturnsPerPeriod","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","monthNoToString","yearlyReturnsPerPeriodGraphCalc","formatTime","rawTimeStr","openHourMap","tradeHourToResultMap","durationStr","openTimeStr","closeTimeStr","openTimeDateStr","openTimeTimeStr","openTimeYearStr","openTimeMonthStr","openTimeDayStr","openTimeHourStr","openTimeMinutesStr","closeTimeDateStr","closeTimeTimeStr","closeTimeYearStr","closeTimeMonthStr","closeTimeDayStr","closeTimeHourStr","closeTimeMinutesStr","closeTimeDate","setHours","setMinutes","openTimeDate","totalMins","getTime","minutes","hours","totalDays","totalWeeks","totalMonths","days","weeks","months","years","durationInString","unit","durationMap","otherDate","lowerBound","setSeconds","setMilliseconds","getLowerBound","upperBound","getUpperBound","dateFallsWithinRange","randomNumber","min","max","Math","random","randomInt","round","mergeArrays","newArray","arrays","array","sum","arr","objs"],"sourceRoot":""}