{"version":3,"file":"static/js/613.b3291b69.chunk.js","mappings":"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","sources":["apps/aff-app/use-affiliate-data.ts","apps/aff-app/pages/login/login-form.tsx","apps/aff-app/pages/login/index.tsx","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","apps/aff-app/pages/overview/index.tsx","apps/aff-app/index.tsx","apps/trader-app/services/use-note-data.ts","apps/trader-app/services/http.ts"],"sourcesContent":["import { useState, useContext } from 'react'\nimport { HttpConst } from '@conf/const'\n//import Http, { HttpErrorType, HttpResponseType } from '@services/http'\nimport {Http, HttpResponseType, HttpErrorType} from '@apps/trader-app/services'\nimport lodash from 'lodash'\nimport { useEffect } from 'react'\nimport { ToastContext } from '@components/toast'\nimport { ToastFuncType } from '@components/toast/types'\n\nconst useAffiliateData = (): UseAffiliateDataType => {\n    const [data, setData] = useState(new AffiliateData(initEmptyRawData));\n    const Toast = useContext(ToastContext);\n\n    useEffect(() => {\n        AffiliateData.refreshData(setData, Toast);\n    }, [])\n    return [data, setData]\n}\n\ntype UseAffiliateDataType = [AffiliateData, React.Dispatch<React.SetStateAction<AffiliateData>> ]\n\n\nclass AffiliateData {\n    rawData: RawData;\n\n    constructor(rawData: RawData | null) {\n        if(rawData === null) {\n            this.rawData = initEmptyRawData;\n        } else {\n            this.rawData = rawData;\n        }\n    }\n    hasLoaded(): boolean {\n        return this.rawData.username.length !== 0\n    }\n    getUsername(): string {\n        return this.rawData.username\n    }\n    getNoOfSignUps(): number {\n        return this.rawData.no_of_sign_ups\n    }\n    getNoOfSubscribers(): number {\n        return this.rawData.no_of_subscribers\n    }\n    getBankAccountNumber(): number | undefined | null {\n        return this.rawData.bank_account_number\n    }\n    setBankAccountNumber(newBankAccountNumber: number): AffiliateData {\n        const rawDataClone = lodash.clone(this.rawData);\n        rawDataClone.bank_account_number = newBankAccountNumber;\n        return new AffiliateData(rawDataClone)\n    }\n    static refreshData(setData: (data: AffiliateData) => void, Toast: ToastFuncType): void {\n        const {BASE_URL, AFF_INIT_DATA_URL} = HttpConst;\n        Http.get({\n            url: `${BASE_URL}/${AFF_INIT_DATA_URL}/`,\n            successFunc: (resp: HttpResponseType) => {\n                setData(new AffiliateData(resp.data));\n            },\n            errorFunc: (err: HttpErrorType) => {\n                Toast.error('Sorry. Something went wrong.');\n            }\n        })\n    }\n}\n\nconst initEmptyRawData: RawData = {\n    username: '',\n    no_of_sign_ups: 0,\n    no_of_subscribers: 0,\n    bank_account_number: undefined\n}\n\ntype RawData = {\n    username: string,\n    no_of_sign_ups: number,\n    no_of_subscribers: number,\n    bank_account_number?: number | null\n}\n\nexport default useAffiliateData\nexport {AffiliateData}","import ReactGA from 'react-ga4'\nimport {Yup} from '@apps/info-app/components'\nimport {Button} from '@components/buttons'\nimport {HttpErrorType, HttpResponseType} from '@services/http'\nimport {ConfigConst, RouteConst} from '@conf/const'\nimport {TextInput} from '@apps/info-app/components'\nimport {LoginFormPropTypes} from './types'\nimport LoadingIcon from '@components/loading-icon'\nimport {HttpMsg} from '@services/generic-msg'\nimport {Form} from '@apps/info-app/components'\nimport {canSubmit, buildErrors} from '@components/forms'\nimport { AffiliateData } from '@apps/aff-app/use-affiliate-data'\nimport { FormikProps } from 'formik'\nimport { useContext } from 'react'\nimport { ToastContext } from '@components/toast'\n\n\nconst LoginForm = ({submitValues, storageService, navigate, setAffiliateData}: LoginFormPropTypes & {setAffiliateData: (data: AffiliateData) => void}) => {\n    const Toast = useContext(ToastContext);\n    return(\n        <Form\n            title='Log In'\n            initialValues={{\n                username: '',\n                password: ''\n            }}\n            validationSchema={Yup.object({\n                username: Yup.string().required(),\n                password: Yup.string().required()\n            })}\n            onSubmit={({values, setErrors, setSubmitting, setSuccessMsg, setNonFieldError}) => {\n                submitValues({\n                    values,\n                    successFunc: (resp: HttpResponseType) => {\n                        storageService.setItem(ConfigConst.TOKEN_KEY, resp.data.key);\n                        AffiliateData.refreshData(setAffiliateData, Toast);\n                        navigate(`/${RouteConst.AFF_APP_ROUTE}/${RouteConst.AFF_OVERVIEW_ROUTE}`);\n                        setNonFieldError('');\n                    },\n                    errorFunc: (err: HttpErrorType) => {\n                        try {\n                            const errors: {[key: string]: string} = buildErrors(err.response.data, {\n                                'username': 'username', 'password': 'password'\n                            });\n                            setErrors(errors);\n                            setNonFieldError(errors['non_field_errors'])\n                        } catch(err){\n                            setNonFieldError(HttpMsg.unexpectedErr())\n                        }\n                        setSuccessMsg('');\n                    },\n                    thenFunc: () => setSubmitting(false)\n                })\n            }}>\n                {({values, errors, isSubmitting, submitForm}: FormikProps<any>) => (\n                    <>\n                    <TextInput name='username' placeholder='Username' data-testid='username' />\n                    <TextInput name='password' placeholder='Password' type='password' data-testid='password' />\n                        <Button\n                            onClick={canSubmit(errors, values) ? () => submitForm() : () => {}}\n                            data-testid='submit-button'\n                            disabled={!canSubmit(errors, values)}>\n                            {isSubmitting ? <LoadingIcon /> : 'Log In'}</Button>\n                    </>\n                )}\n        </Form>\n    )\n}\n\n\nexport default LoginForm","import {Link} from 'react-router-dom'\nimport {useNavigate} from 'react-router'\nimport ReactGA from 'react-ga4'\nimport {ColumnBox, RowBox} from '@components/containers'\nimport {SP} from '@components/text'\nimport Http, { HttpErrorType, HttpResponseType } from '@services/http'\nimport {getColor, getDimen} from '@conf/utils'\nimport {ConfigConst, HttpConst} from '@conf/const'\nimport {FormPageContainer} from '@apps/info-app/components'\nimport LoginForm from './login-form'\nimport {SubmitValuesTypes} from './types'\nimport {AffiliateData} from '@apps/aff-app/use-affiliate-data'\n\n\nconst LoginPage = ({setAffiliateData}: {setAffiliateData: (data: AffiliateData) => void}) => {\n    /** \n     * The function used by the form to submit values\n     * @param config: object used to configure the Http client\n     */\n     const navigate = useNavigate();\n     const submitValues = (config: SubmitValuesTypes) => {\n        const {BASE_URL, AFF_LOGIN_URL} = HttpConst;\n        Http.post({\n            url: `${BASE_URL}/${AFF_LOGIN_URL}/`,\n            noToken: true,\n            data: config.values,\n            successFunc: (resp: HttpResponseType) => {\n                config.successFunc(resp)\n            },\n            errorFunc: (err: HttpErrorType) => {\n                config.errorFunc(err);\n            },\n            thenFunc: config.thenFunc\n        });\n    }\n\n    return(\n        <FormPageContainer\n            form={\n                <LoginForm\n                    submitValues={submitValues}\n                    storageService={localStorage}\n                    navigate={navigate}\n                    setAffiliateData={setAffiliateData}\n                    />\n            } />\n    );\n}\n\nexport default LoginPage","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import { SyntheticEvent, useState, useContext } from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport Navbar from '@components/navbar'\nimport Card from '@mui/material/Card'\nimport List from '@mui/material/List'\nimport {ListItemText} from '@mui/material'\nimport {BP, H3, P, H4, H5} from '@components/text'\nimport {Button} from '@components/buttons'\nimport { ReactNode } from 'react'\nimport { getDimen } from '@conf/utils'\nimport { Grid, GridProps } from '@mui/material'\nimport { Input } from '@components/inputs'\nimport {Http, HttpResponseType, HttpErrorType} from '@apps/trader-app/services'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport {AffiliateData} from './../../use-affiliate-data'\nimport { ToastContext } from '@components/toast'\nimport LoadingIcon from '@components/loading-icon'\nimport {getColor} from '@conf/utils'\n\n\nconst Overview = ({affiliateData, setNewBankAccountNumber}: {affiliateData: AffiliateData, setNewBankAccountNumber: (n: number) => void}) => {\n    const noOfSignUps = affiliateData.getNoOfSignUps().toString();\n    const noOfSubscribers = affiliateData.getNoOfSubscribers().toString();\n    const payout = `$${affiliateData.getNoOfSubscribers() * 5}`;\n    const username = affiliateData.getUsername();\n    const signUpLink = `https://myfxtracker.com/sign-up/${username}`;\n    const formatBankAccountNumber = (rawBankAccountNumber?: number | null): string => {\n        const bankAccountNumber = rawBankAccountNumber !== undefined && rawBankAccountNumber !== null ?\n            rawBankAccountNumber.toString() : '0';\n        return bankAccountNumber\n    }\n    const navigate = useNavigate();\n    const Toast = useContext(ToastContext);\n    const saveNewBankAccountNumber = (newAccountNumber: string): Promise<void> => {\n        const {BASE_URL, AFF_CHANGE_BANK_ACCOUNT_NUMBER_URL} = HttpConst;\n        console.log(newAccountNumber);\n        return new Promise((resolve, reject) => (\n            Http.post({\n                url: `${BASE_URL}/${AFF_CHANGE_BANK_ACCOUNT_NUMBER_URL}/`,\n                data: {bank_account_number: newAccountNumber},\n                successFunc: (resp: HttpResponseType) => {\n                    resolve()\n                },\n                errorFunc: (err: HttpErrorType) => {\n                    reject('error')\n                },\n                timeoutErrorFunc: () => {\n                    reject('timeout')\n                },\n                networkErrorFunc: () => {\n                    reject('network')\n                }\n            })\n        ))\n    }\n    const logout = (): Promise<void> => {\n        const {BASE_URL, AFF_LOGOUT_URL} = HttpConst;\n        return new Promise((resolve, reject) => (\n            Http.delete({\n                url: `${BASE_URL}/${AFF_LOGOUT_URL}/`,\n                successFunc: (resp: HttpResponseType) => {\n                    resolve();\n                },\n                errorFunc: (err: HttpErrorType) => {\n                    reject();\n                }\n            })\n        ))\n    }\n    return(\n        <>\n        <Container spacing={1} sx={{\n            flexDirection: {\n                xs: 'column',\n                sm: 'row'\n            }\n        }}>\n            <Grid item container xs={12} sm={6} sx={{\n                    flexDirection: {\n                        sm: 'row-reverse'\n                    },\n                    justifyContent: {\n                        xs: 'center',\n                        sm: 'flex-start'\n                    }\n                }}>\n                <StatsCard\n                    noOfSignUps={noOfSignUps}\n                    noOfSubscribers={noOfSubscribers}\n                    payout={payout} />\n            </Grid>\n            <Grid item container xs={12} sm={6} sx={{\n                justifyContent: {\n                    xs: 'center',\n                    sm: 'flex-start'\n                }\n            }}>\n                <DetailsCard\n                    username={username}\n                    signUpLink={signUpLink}\n                    bankAccountNumber={formatBankAccountNumber(affiliateData.getBankAccountNumber())}\n                    saveNewBankAccountNumber={saveNewBankAccountNumber}\n                    setNewBankAccountNumber={setNewBankAccountNumber} />\n            </Grid>\n        </Container>\n        <Grid container sx={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginTop: getDimen('padding-xs'),\n            marginBottom: getDimen('padding-big')\n            }}>\n                <Button \n                    variant='outlined' \n                    style={{alignSelf: 'center'}}\n                    onClick={() => {\n                        const {AFF_APP_ROUTE, AFF_LOG_IN_ROUTE} = RouteConst;\n                        logout()\n                            .then(() => {\n                                localStorage.removeItem('KEY');\n                                navigate(`/${AFF_APP_ROUTE}/${AFF_LOG_IN_ROUTE}/`)\n                            })\n                            .catch(() => Toast.error('Something went wrong.'))\n                    }}>Log Out</Button>\n        </Grid>\n        </>\n    )\n}\n\nconst DetailsCard = ({username, signUpLink, bankAccountNumber, saveNewBankAccountNumber, setNewBankAccountNumber}: {username: string, signUpLink: string, bankAccountNumber: string, saveNewBankAccountNumber: (s: string) => Promise<void>, setNewBankAccountNumber: (n: number) => void}) => {\n    return(\n        <InfoCard\n            title='Your Details'\n            listItems={[\n                <InfoListItem name='Username' value={username} />,\n                <InfoListItem name='Sign Up Link' value={signUpLink} />,\n                <EditableInfoListItem name='Bank Account number' value={bankAccountNumber}\n                    saveNewValue={saveNewBankAccountNumber}\n                    setNewBankAccountNumber={setNewBankAccountNumber} />\n            ]}\n        />\n    )\n}\n\nconst StatsCard = ({noOfSignUps, noOfSubscribers, payout}: {noOfSignUps: string, noOfSubscribers: string, payout: string}) => {\n    return(\n        <InfoCard\n            title='Your Stats'\n            listItems={[\n                <InfoListItem name='Sign Ups' value={noOfSignUps} />,\n                <InfoListItem name='Subscribers' value={noOfSubscribers} />,\n                <InfoListItem name='Payout' value={payout} />\n            ]}\n            />\n    )\n}\n\nconst InfoCard = ({title, listItems}: {title: string, listItems: ReactNode[]}) => {\n    return(\n        <Card sx={{width: '80%', padding: getDimen('padding-xs')}}>\n            <H4 style={{textAlign: 'center'}}>{title}</H4>\n            <List>\n                {listItems}\n            </List>\n        </Card>\n    )\n}\n\nconst InfoListItem = ({name, value}: {name: string, value: string}) => {\n    return (\n        <ListItemText sx={{padding: getDimen('padding-xs')}}>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <P>{name}</P>\n                <P>{value}</P>\n            </div>\n        </ListItemText>\n    )\n}\n\nconst EditableInfoListItem = ({name, value, saveNewValue, setNewBankAccountNumber}: {name: string, value: string, saveNewValue: (s: string) => Promise<void>, setNewBankAccountNumber: (n: number) => void}) => {\n    const [editing, setIsEditing] = useState(false);\n    const [innerValue, setInnerValue] = useState(value);\n    const [isSaving, setIsSaving] = useState(false);\n    const Toast = useContext(ToastContext);\n    return(\n        <ListItemText sx={{padding: getDimen('padding-xs')}}>\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                <P>{name}</P>\n                <div style={{display: 'flex', alignItems: 'baseline'}}>\n                    {editing ? \n                        <>\n                            <Input \n                                hiddenLabel\n                                size='small' value={innerValue} onChange={(e) => {\n                                    const newValue = e.target.value;\n                                    if(isInteger(newValue) && !isSaving){\n                                        setInnerValue(newValue);\n                                    }\n                                }}\n                                style={{marginRight: getDimen('padding-xs')}} \n                                />\n                            <Button\n                                size='small' color='primary' variant='outlined'\n                                style={{marginRight: '5px'}}\n                                onClick={() => {\n                                    setIsSaving(true);\n                                    saveNewValue(innerValue)\n                                        .then(() => {\n                                            setNewBankAccountNumber(parseInt(innerValue));\n                                        })\n                                        .catch((reason: 'network' | 'error' | 'timeout') => {\n                                            setInnerValue(value);\n                                            if(reason === 'error'){\n                                                Toast.error('Something went wrong');\n                                            }\n                                        })\n                                        .finally(() => {\n                                            setIsSaving(false);\n                                            setIsEditing(false);\n                                        })\n                                }}>{isSaving ? <LoadingIcon color={getColor('gray')} /> : 'Save'}</Button>\n                            {!isSaving ?\n                                    <Button\n                                    size='small' color='error' variant='outlined'\n                                    onClick={() => {\n                                        setIsEditing(false);\n                                        setInnerValue(value);\n                                    }}>Cancel</Button>\n                                : null\n                            }\n                        </>\n                        : <>\n                        {value}\n                        <Button \n                            onClick={() => {\n                                setIsEditing(true);\n                                setInnerValue(value);\n                            }}\n                            style={{marginLeft: getDimen('padding-xs')}}>Edit</Button>\n                        </>\n                    }\n                </div>\n            </div>\n        </ListItemText>\n    )\n}\n\nconst Container = ({children, sx, ...props}: {children: ReactNode} & GridProps) => {\n    return(\n        <>\n        <Navbar links={[]} rightElement={<BP>Affiliate</BP>} />\n        <Grid container sx={{marginTop: '80px', ...sx}} {...props}>\n            {children}\n        </Grid>\n        </>\n    )\n}\n\nconst isInteger = (value: string) => {\n    console.log(value);\n    return /^\\d+$/.test(value)\n}\n\nexport default Overview","import { useEffect } from 'react'\nimport {Route, useNavigate, Navigate} from 'react-router-dom'\nimport Routes from '@components/router'\nimport {Http} from '@apps/trader-app/services'\nimport {Login, Overview} from './pages'\nimport { HttpConst, RouteConst } from '@conf/const'\nimport useAffiliateData from './use-affiliate-data'\n\nconst AffApp = () => {\n    const [affiliateData, setAffiliateData] = useAffiliateData();\n    const {AFF_APP_ROUTE, AFF_LOG_IN_ROUTE, AFF_OVERVIEW_ROUTE} = RouteConst;\n    const setNewBankAccountNumber = (newNumber: number): void => {\n        const newAffiliateData = affiliateData.setBankAccountNumber(newNumber);\n        setAffiliateData(newAffiliateData);\n    }\n    const navigate = useNavigate();\n    useEffect(() => {\n        Http.initNavigate(navigate, `/${AFF_APP_ROUTE}/${AFF_LOG_IN_ROUTE}/`);\n    }, [])\n    return(\n        <Routes>\n            <Route path={`${AFF_LOG_IN_ROUTE}`} element={<Login setAffiliateData={setAffiliateData} />} />\n            <Route path={`${AFF_OVERVIEW_ROUTE}`} element={<Overview affiliateData={affiliateData} setNewBankAccountNumber={setNewBankAccountNumber} />} />\n        </Routes>\n    )\n}\n\nexport default AffApp","import {useEffect, useState} from 'react'\nimport {HttpConst} from '@conf/const'\nimport Http, {HttpErrorType, HttpResponseType} from '@services/http'\n\n\nconst useNoteData = (): Promise<any> => {\n    const {BASE_URL, GET_ALL_NOTES_URL} = HttpConst;\n    const [noteData, setNoteData] = useState<Promise<any>>(new Promise((resolve, reject) => {}));\n    useEffect(() => {\n        Http.get({\n            url: `${BASE_URL}/${GET_ALL_NOTES_URL}/`,\n            successFunc: (resp: HttpResponseType) => {\n                setNoteData(Promise.resolve(resp.data));\n            },\n            errorFunc: (err: HttpErrorType) => {\n                setNoteData(Promise.resolve(err));\n            }\n        })\n    }, [])\n    return noteData;\n}\n\nexport default useNoteData","import BaseHttp, {HttpGetConfigType, HttpPostConfigType, HttpPutConfigType,\n    HttpDeleteConfigType, HttpErrorType, HttpClientType} from '@services/http'\nimport {RouteConst} from '@conf/const'\n\nconst {INFO_LOGIN_ROUTE} = RouteConst;\nconst LOGIN_ROUTE = `/${INFO_LOGIN_ROUTE}`;\n\nconst handleRequest = (httpMethod: Function, config: any): Promise<any> => {\n    return httpMethod({\n        ...config,\n        errorFunc: (err: HttpErrorType) => {\n            if(err.response.status === 401 || err.response.status === 403){\n                if(Http.unauthorizedRedirectRoute !== undefined){\n                    Http.navigate(Http.unauthorizedRedirectRoute);\n                } else {\n                    Http.navigate(LOGIN_ROUTE);\n                }\n            } else {\n                return config.errorFunc(err);\n            }\n        },\n    })\n}\n\nconst get = (config: HttpGetConfigType) => {\n    return handleRequest(BaseHttp.get, config);\n}\n\nconst post = (config: HttpPostConfigType) => {\n    return handleRequest(BaseHttp.post, config);\n}\n\nconst put = (config: HttpPutConfigType) => {\n    return handleRequest(BaseHttp.put, config);\n}\n\nconst httpDelete = (config: HttpDeleteConfigType) => {\n    return handleRequest(BaseHttp.delete, config);\n}\n\n\nconst Http: TraderHttpClient = {\n    ...BaseHttp,\n    get,\n    put,\n    post,\n    delete: httpDelete,\n    navigate: (route: string) => {},\n    unauthorizedRedirectRoute: undefined,\n    initNavigate: function(navigate: NavigateFunc, unauthorizedRedirectRoute?: string){\n        this.navigate = navigate;\n        this.unauthorizedRedirectRoute = unauthorizedRedirectRoute;\n    }\n}\n\ntype TraderHttpClient = HttpClientType & {\n    navigate: NavigateFunc,\n    unauthorizedRedirectRoute?: string,\n    initNavigate: {\n        (navigate: NavigateFunc, unauthorizedRedirectRoute?: string): void\n    }\n}\n\ntype NavigateFunc = {\n    (route: string): void\n}\n\nexport default Http\nexport * from '@services/http'"],"names":["AffiliateData","rawData","this","initEmptyRawData","username","length","no_of_sign_ups","no_of_subscribers","bank_account_number","newBankAccountNumber","rawDataClone","lodash","setData","Toast","BASE_URL","HttpConst","AFF_INIT_DATA_URL","Http","url","successFunc","resp","data","errorFunc","err","error","undefined","useState","useContext","ToastContext","useEffect","refreshData","submitValues","storageService","navigate","setAffiliateData","title","initialValues","password","validationSchema","Yup","required","onSubmit","values","setErrors","setSubmitting","setSuccessMsg","setNonFieldError","setItem","ConfigConst","key","RouteConst","errors","buildErrors","response","HttpMsg","thenFunc","isSubmitting","submitForm","name","placeholder","type","onClick","canSubmit","disabled","useNavigate","form","config","AFF_LOGIN_URL","noToken","localStorage","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","overridesResolver","props","styles","root","overflow","React","inProps","ref","useThemeProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","clsx","elevation","DetailsCard","signUpLink","bankAccountNumber","saveNewBankAccountNumber","setNewBankAccountNumber","InfoCard","listItems","InfoListItem","value","EditableInfoListItem","saveNewValue","StatsCard","noOfSignUps","noOfSubscribers","payout","sx","width","padding","getDimen","H4","style","textAlign","List","ListItemText","display","justifyContent","P","editing","setIsEditing","innerValue","setInnerValue","isSaving","setIsSaving","alignItems","hiddenLabel","size","onChange","e","newValue","target","isInteger","marginRight","color","variant","then","parseInt","catch","reason","finally","getColor","marginLeft","Container","children","links","rightElement","BP","Grid","container","marginTop","console","log","test","rawBankAccountNumber","affiliateData","getNoOfSignUps","toString","getNoOfSubscribers","getUsername","spacing","flexDirection","xs","sm","item","getBankAccountNumber","newAccountNumber","AFF_CHANGE_BANK_ACCOUNT_NUMBER_URL","Promise","resolve","reject","timeoutErrorFunc","networkErrorFunc","marginBottom","alignSelf","AFF_APP_ROUTE","AFF_LOG_IN_ROUTE","AFF_LOGOUT_URL","logout","removeItem","useAffiliateData","AFF_OVERVIEW_ROUTE","path","element","newNumber","newAffiliateData","setBankAccountNumber","GET_ALL_NOTES_URL","noteData","setNoteData","INFO_LOGIN_ROUTE","LOGIN_ROUTE","handleRequest","httpMethod","status","unauthorizedRedirectRoute","BaseHttp","get","put","post","delete","route","initNavigate"],"sourceRoot":""}