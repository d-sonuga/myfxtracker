{"version":3,"file":"static/js/799.e84bb8ef.chunk.js","mappings":"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","sources":["apps/trader-app/components/trader-app-navbar/navbar-text.tsx","apps/trader-app/components/trader-app-navbar/sub-menu.tsx","apps/trader-app/components/trader-app-navbar/navbar-item.tsx","visuals/svgs/house-icon.tsx","visuals/svgs/calendar-icon.tsx","visuals/svgs/notes-icon.tsx","visuals/svgs/analytics-chart-icon.tsx","visuals/svgs/settings-icon.tsx","visuals/svgs/log-out-icon.tsx","apps/trader-app/components/trader-app-navbar/const.tsx","apps/trader-app/components/trader-app-navbar/utils.ts","apps/trader-app/components/trader-app-navbar/navbar-list.tsx","apps/trader-app/components/trader-app-navbar/index.tsx","apps/trader-app/const/index.ts","apps/trader-app/components/trader-app-container/index.tsx","apps/trader-app/components/page-container/data-status-bar.tsx","apps/trader-app/components/page-container/index.tsx","apps/trader-app/components/page-heading/index.tsx","apps/trader-app/components/account-selector/index.tsx","apps/trader-app/components/graphs/graph-heading.tsx","apps/trader-app/components/graphs/line-graph.tsx","apps/trader-app/components/graphs/bar-chart.tsx","apps/trader-app/components/graphs/graph.tsx","apps/trader-app/components/table/index.tsx","apps/trader-app/components/recalc/index.ts","apps/trader-app/components/page-still-loading/index.tsx","apps/trader-app/pages/overview/const/default-overview-calc.ts","apps/trader-app/pages/overview/overview-cards/base-card.tsx","apps/trader-app/pages/overview/overview-cards/balance-card.tsx","apps/trader-app/pages/overview/overview-cards/no-of-trades-card.tsx","apps/trader-app/pages/overview/overview-cards/win-rate-card.tsx","apps/trader-app/pages/overview/overview-cards/abs-gain-card.tsx","apps/trader-app/pages/overview/overview-cards/index.tsx","apps/trader-app/pages/overview/account-returns-graph/index.tsx","apps/trader-app/pages/overview/overview-stats/create-rows.tsx","apps/trader-app/pages/overview/overview-stats/index.tsx","apps/trader-app/pages/overview/weekly-summary/create-rows.tsx","apps/trader-app/pages/overview/weekly-summary/index.tsx","apps/trader-app/pages/overview/index.tsx","apps/trader-app/pages/cash-and-gains/cash-graph/index.tsx","apps/trader-app/pages/cash-and-gains/gains-graph/index.tsx","apps/trader-app/pages/cash-and-gains/const.ts","apps/trader-app/pages/cash-and-gains/index.tsx","apps/trader-app/pages/expenses/create-rows.tsx","apps/trader-app/pages/expenses/const.ts","apps/trader-app/pages/expenses/index.tsx","apps/trader-app/pages/long-short-analysis/long-short-comparison-table/create-rows.tsx","apps/trader-app/pages/long-short-analysis/long-short-comparison-table/index.tsx","apps/trader-app/pages/long-short-analysis/long-short-bar-graph/index.tsx","apps/trader-app/pages/long-short-analysis/long-balance-graph/index.tsx","apps/trader-app/pages/long-short-analysis/short-balance-graph/index.tsx","apps/trader-app/pages/long-short-analysis/const.ts","apps/trader-app/pages/long-short-analysis/index.tsx","apps/trader-app/pages/pairs-analysis/ave-return-per-pair-graph/index.tsx","apps/trader-app/pages/pairs-analysis/ave-rrr-per-pair-graph/index.tsx","apps/trader-app/pages/pairs-analysis/pairs-table/create-rows.tsx","apps/trader-app/pages/pairs-analysis/pairs-table/index.tsx","apps/trader-app/pages/pairs-analysis/const.ts","apps/trader-app/pages/pairs-analysis/index.tsx","apps/trader-app/pages/period-analysis/const.ts","apps/trader-app/pages/period-analysis/index.tsx","apps/trader-app/pages/time-analysis/time-analysis-graph/index.tsx","apps/trader-app/pages/time-analysis/trade-duration-table/create-rows.tsx","apps/trader-app/pages/time-analysis/trade-duration-table/index.tsx","apps/trader-app/pages/time-analysis/open-hour-table/create-rows.tsx","apps/trader-app/pages/time-analysis/open-hour-table/index.tsx","apps/trader-app/pages/time-analysis/const.ts","apps/trader-app/pages/time-analysis/index.tsx","apps/trader-app/pages/settings/email-section/index.tsx","apps/trader-app/pages/settings/change-password-section/index.tsx","apps/trader-app/pages/settings/delete-account/delete-account.tsx","apps/trader-app/pages/settings/delete-account/index.tsx","apps/trader-app/pages/settings/accounts-section/add-account-button.tsx","apps/trader-app/pages/settings/accounts-section/no-of-accounts-left-to-add-status.tsx","apps/trader-app/pages/settings/accounts-section/remove-account.ts","apps/trader-app/pages/settings/accounts-section/index.tsx","apps/trader-app/pages/settings/subscription-section/cancel-subscription.tsx","apps/trader-app/pages/settings/subscription-section/index.tsx","apps/trader-app/pages/settings/index.tsx","apps/trader-app/pages/add-account/add-account-form.tsx","apps/trader-app/pages/add-account/index.tsx","apps/trader-app/pages/subscribe-now/save-subscription-status.ts","apps/trader-app/pages/subscribe-now/base-subscription-button.tsx","apps/trader-app/pages/subscribe-now/monthly-subscription-button.tsx","apps/trader-app/pages/subscribe-now/const.ts","apps/trader-app/pages/subscribe-now/yearly-subscription-button.tsx","apps/trader-app/pages/subscribe-now/index.tsx","apps/trader-app/models/utils.ts","apps/trader-app/models/global-data.ts","apps/trader-app/services/permissions.ts","apps/trader-app/models/use-global-data.ts","apps/trader-app/services/refresh-account-data.ts","apps/trader-app/services/follow-up-post-subscription-actions.tsx","apps/trader-app/index.tsx","apps/trader-app/pages/journal/index.tsx","apps/trader-app/pages/notes/models/index.tsx","apps/trader-app/pages/notes/note-list/note-list-item.tsx","apps/trader-app/pages/notes/note-list/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/text-format-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/align-content-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/undo-redo-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/list-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/create-table-node.ts","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/no-of-rows-input.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/no-of-columns-input.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-table-button/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-image-button.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/insert-link-button.tsx","apps/trader-app/pages/notes/note-editor/toolbar/insert-content-buttons/index.tsx","apps/trader-app/pages/notes/note-editor/toolbar/headers-and-quote-buttons.tsx","apps/trader-app/pages/notes/note-editor/toolbar/index.tsx","apps/trader-app/pages/notes/note-editor/plugins/link-element.tsx","apps/trader-app/pages/notes/note-editor/plugins/td-element.tsx","apps/trader-app/pages/notes/note-editor/plugins/index.tsx","apps/trader-app/pages/notes/note-editor/title-input.tsx","apps/trader-app/pages/notes/note-editor/index.tsx","apps/trader-app/pages/notes/main-toolbar/index.tsx","apps/trader-app/pages/notes/no-notes-found.tsx","apps/trader-app/pages/notes/index.tsx","apps/trader-app/services/use-note-data.ts","apps/trader-app/services/http.ts","apps/trader-app/utils/index.ts","components/dialog/buttons.tsx","components/dialog/index.tsx","../calculator/src/cash-and-gains-calculations/cash-graph-calc.ts","../calculator/src/cash-and-gains-calculations/common-calc.ts","../calculator/src/cash-and-gains-calculations/gains-graph-calc.ts","../calculator/src/cash-and-gains-calculations/index.ts","../calculator/src/common-calc.ts","../calculator/src/expenses-calculations/expenses-table-calc.ts","../calculator/src/expenses-calculations/index.ts","../calculator/src/index.ts","../calculator/src/long-short-analysis-calculations/common-calc.ts","../calculator/src/long-short-analysis-calculations/index.ts","../calculator/src/long-short-analysis-calculations/long-balance-graph-calc.ts","../calculator/src/long-short-analysis-calculations/long-short-comp-graph-calc.ts","../calculator/src/long-short-analysis-calculations/long-short-comp-table-calc.ts","../calculator/src/long-short-analysis-calculations/short-balance-graph-calc.ts","../calculator/src/overview-calculations/account-returns-graph-calc.ts","../calculator/src/overview-calculations/index.ts","../calculator/src/overview-calculations/overview-cards-calc.ts","../calculator/src/overview-calculations/overview-stats-calc.ts","../calculator/src/overview-calculations/weekly-summary-calc.ts","../calculator/src/pairs-analysis-calculations/ave-returns-per-pair-graph-calc.ts","../calculator/src/pairs-analysis-calculations/ave-rrr-per-pair-graph-calc.ts","../calculator/src/pairs-analysis-calculations/index.ts","../calculator/src/pairs-analysis-calculations/pairs-analysis-table-calc.ts","../calculator/src/pairs-analysis-calculations/utils.ts","../calculator/src/period-analysis-calculations/index.ts","../calculator/src/period-analysis-calculations/returns-per-period-graph-calc.ts","../calculator/src/trading-time-analysis-calculations/index.ts","../calculator/src/trading-time-analysis-calculations/open-hour-table-calc.ts","../calculator/src/trading-time-analysis-calculations/time-analysis-graph-calc.ts","../calculator/src/trading-time-analysis-calculations/trade-duration-table-calc.ts","../calculator/src/utils/date-utils.ts","../calculator/src/utils/index.ts"],"sourcesContent":["import {P} from '@components/text'\nimport {getColor} from '@conf/utils'\n\n\nconst NavbarText = ({children, style}: {children: string, style?: {[key: string]: string}}) => {\n    return(\n        <P style={{\n            color: getColor('dark-gray'),\n            fontFamily: '\"Open Sans\", sans-serif',\n            ...style\n        }}>{children}</P>\n    );\n}\n\nexport default NavbarText","import {ListItemButton} from '@mui/material'\nimport {List, Collapse} from '@mui/material'\nimport NavbarText from './navbar-text'\nimport {SubMenuPropTypes} from './types'\n\n\nconst SubMenu = ({subMenu, subMenuIsOpen, subMenuName, selectedSubMenuName,\n        selectedSubMenuItemIndex, onSubMenuItemSelect}: SubMenuPropTypes) => {\n    return(\n        <Collapse in={subMenuIsOpen && selectedSubMenuName === subMenuName} timeout='auto' unmountOnExit>\n            <List disablePadding component='div'>\n                {(() => {\n                    // Had to explicitly use this function to satisfy the Typescript compiler\n                    if(subMenu !== undefined){\n                        return subMenu.map((item, i) => (\n                            <ListItemButton \n                                key={i}\n                                sx={{width: '200px', pl: 8}}\n                                selected={i === selectedSubMenuItemIndex}\n                                onClick={(e) => {\n                                    onSubMenuItemSelect(subMenuName, i, item);\n                                }}>\n                                <NavbarText>{item.name}</NavbarText>\n                            </ListItemButton>\n                        ))\n                    }\n                    return null;\n                })()}\n            </List>\n        </Collapse>\n    )\n}\n\nexport default SubMenu","import {ListItem, ListItemButton, ListItemIcon} from '@mui/material'\nimport {ExpandLess, ExpandMore} from '@mui/icons-material'\nimport {getColor, getDimen} from '@conf/utils'\nimport NavbarText from './navbar-text'\nimport SubMenu from './sub-menu'\nimport {NavbarItemPropTypes} from './types'\n\n\nconst NavbarItem = ({Icon, children, onClick, index, selected, subMenu, onSubMenuItemSelect,\n        subMenuIsOpen, selectedSubMenuItemIndex, selectedSubMenuName}: NavbarItemPropTypes) => {\n    const hasSubMenu = () => subMenu !== undefined;\n    const hasIcon = () => Icon !== undefined;\n\n    \n    return(\n        <ListItem disableGutters sx={{\n                width: '200px',\n                padding: 0,\n                marginTop: index === 0 ? getDimen('padding-md') : undefined,\n                flexDirection: subMenu ? 'column' : undefined\n            }}>\n            <ListItemButton sx={{width: '100%'}} selected={selected} onClick={(e) => {\n                onClick(e, index);\n            }}>\n                {hasIcon() ? \n                    <ListItemIcon>\n                        <Icon />\n                    </ListItemIcon>\n                    : null\n                }   \n                <NavbarText style={{fontSize: '1.1rem'}}>\n                    {children}\n                </NavbarText>\n                {hasSubMenu() ? \n                    subMenuIsOpen ? \n                        <ExpandLess sx={{color: getColor('dark-gray')}} />\n                        : <ExpandMore sx={{color: getColor('dark-gray')}} />\n                    : null\n                }\n            </ListItemButton>\n            {subMenu !== undefined ?\n                <SubMenu\n                    subMenu={subMenu}\n                    subMenuIsOpen={subMenuIsOpen}\n                    subMenuName={children}\n                    selectedSubMenuName={selectedSubMenuName}\n                    selectedSubMenuItemIndex={selectedSubMenuItemIndex}\n                    onSubMenuItemSelect={onSubMenuItemSelect} />\n                : null\n            }\n        </ListItem>\n    );\n}\n\nexport default NavbarItem","import {SvgIcon} from '@mui/material'\n\n\nconst HouseIcon = ({fontSize, style}: HouseIconTypes) => {\n    return(\n        <SvgIcon fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width='16' fill=\"currentColor\" className=\"bi bi-house-door sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4.5a.5.5 0 0 0 .5-.5v-4h2v4a.5.5 0 0 0 .5.5H14a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146zM2.5 14V7.707l5.5-5.5 5.5 5.5V14H10v-4a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5v4H2.5z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\ntype HouseIconTypes = {\n    fontSize?: 'small' | 'inherit' | 'large' | 'medium',\n    style?: {[key: string]: any}\n}\n\nexport default HouseIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst CalendarIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-calendar-week sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm-5 3a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1zm3 0a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z\"/>\n                <path d=\"M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default CalendarIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst NotesIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-journal-text sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M5 10.5a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1h-2a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm0-2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>\n                <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\"/>\n                <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\"/>    \n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default NotesIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst AnalyticsChartIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-graph-up-arrow sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path fillRule=\"evenodd\" d=\"M0 0h1v15h15v1H0V0Zm10 3.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V4.9l-3.613 4.417a.5.5 0 0 1-.74.037L7.06 6.767l-3.656 5.027a.5.5 0 0 1-.808-.588l4-5.5a.5.5 0 0 1 .758-.06l2.609 2.61L13.445 4H10.5a.5.5 0 0 1-.5-.5Z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default AnalyticsChartIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst SettingsIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-gear sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path d=\"M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z\"/>\n                <path d=\"M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default SettingsIcon","import {SvgIcon} from '@mui/material'\nimport {SvgIconPropTypes} from './types'\n\n\nconst LogOutIcon = ({fontSize, style}: SvgIconPropTypes) => {\n    return(\n        <SvgIcon \n            fontSize={fontSize ? fontSize : 'large'} \n            sx={style}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" fill=\"currentColor\" className=\"bi bi-box-arrow-right sidebar-svg\" viewBox=\"0 0 16 16\">\n                <path fillRule=\"evenodd\" d=\"M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z\"/>\n                <path fillRule=\"evenodd\" d=\"M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z\"/>\n            </svg>\n        </SvgIcon>\n    );\n}\n\n\nexport default LogOutIcon","import HouseIcon from '@visuals/svgs/house-icon'\nimport CalendarIcon from '@visuals/svgs/calendar-icon'\nimport NotesIcon from '@visuals/svgs/notes-icon'\nimport GalleryIcon from '@visuals/svgs/gallery-icon'\nimport AnalyticsChartIcon from '@visuals/svgs/analytics-chart-icon'\nimport SettingsIcon from '@visuals/svgs/settings-icon'\nimport LogOutIcon from '@visuals/svgs/log-out-icon'\nimport {RouteConst} from '@conf/const'\nimport {MenuItemObject} from './types'\n\n\nconst {TRADER_OVERVIEW_ROUTE, TRADER_JOURNAL_ROUTE, TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE,\n    TRADER_CASH_AND_GAINS_ROUTE, TRADER_SETTINGS_ROUTE, TRADER_PAIRS_ANALYSIS_ROUTE,\n    TRADER_TIME_ANALYSIS_ROUTE, TRADER_PERIOD_ANALYSIS_ROUTE, TRADER_EXPENSES_ROUTE,\n    TRADER_NOTES_ROUTE\n} = RouteConst;\n\nconst analyticsMenuItems: MenuItemObject[] = [\n    {name: 'Cash and Gains', route: TRADER_CASH_AND_GAINS_ROUTE},\n    {name: 'Long / Short Analysis', route: TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE},\n    {name: 'Pairs Analysis', route: TRADER_PAIRS_ANALYSIS_ROUTE},\n    {name: 'Trading Time Analysis', route: TRADER_TIME_ANALYSIS_ROUTE},\n    {name: 'Period Analysis', route: TRADER_PERIOD_ANALYSIS_ROUTE},\n    {name: 'Expenses', route: TRADER_EXPENSES_ROUTE},\n];\n\nconst mainMenuItems: MenuItemObject[] = [\n    {icon: HouseIcon, name: 'Overview', route: TRADER_OVERVIEW_ROUTE},\n    {icon: CalendarIcon, name: 'Journal', route: TRADER_JOURNAL_ROUTE},\n    {icon: AnalyticsChartIcon, name: 'Analytics', subMenu: analyticsMenuItems},\n    //{icon: GalleryIcon, name: 'Gallery'},\n    {icon: NotesIcon, name: 'Notes', route: TRADER_NOTES_ROUTE}\n];\n\nconst bottomMenuItems = (logout: Function): MenuItemObject[] => {\n    return [\n        {icon: SettingsIcon, name: 'Settings', route: TRADER_SETTINGS_ROUTE},\n        {icon: LogOutIcon, name: 'Log Out', action: () => logout()},\n    ];\n}\n\nconst menuItems = (logout: Function) => {\n    return {\n        mainMenuItems,\n        bottomMenuItems: bottomMenuItems(logout)\n    }\n}\nexport default menuItems","/**\n * To determine the initial state for the navbar on page load\n */\n\nimport {useLocation, useNavigate, Location} from 'react-router'\nimport {MenuItemObject} from './types'\n\n\nconst getPageRouteName = (location: Location) => {\n    const locationList = location.pathname.split('/app');\n    let route = stripSlashes(locationList[locationList.length - 1]);\n    return route;\n}\n\nconst getIntialNavbarListStateValues = (location: Location, menuItems: {[key: string]: MenuItemObject[]}) => {\n    const pageRoute = getPageRouteName(location);\n    let [initialSubMenuName, initialMainMenuItemIndex] = getMenuInfo(pageRoute, menuItems);\n    let initialSubMenuIsOpen = false;\n    let initialSubMenuItemSelected = false;\n    let initialSelectedSubMenuItemIndex = -1;\n    if(initialSubMenuName.length !== 0){\n        initialSubMenuIsOpen = true;\n        initialSelectedSubMenuItemIndex = initialMainMenuItemIndex;\n        initialMainMenuItemIndex = -1;\n    }\n    return {\n        initialSubMenuName, initialMainMenuItemIndex, initialSubMenuItemSelected,\n        initialSelectedSubMenuItemIndex, initialSubMenuIsOpen\n    }\n}\n\n/**\n * Find the index of the menu item associated with a @param: route\n * and its subMenuName, if it belongs to a subMenu\n * */\nconst getMenuInfo = (route: string, menuItems: {[key: string]: MenuItemObject[]}): [string, number] => {\n    for(const itemsKey of Object.keys(menuItems)){\n        for(let i=0; i<menuItems[itemsKey].length; i++){\n            const item = menuItems[itemsKey][i];\n            if(item.subMenu !== undefined){\n                let [subMenuName, menuItemIndex] = getMenuInfo(route, {'submenu': item.subMenu});\n                subMenuName = item.name;\n                if(menuItemIndex !== -1){\n                    menuItemIndex = adjustIndexForBottomMenuItems(menuItemIndex, itemsKey, menuItems);\n                    return [subMenuName, menuItemIndex];\n                }\n            } else {\n                if(item.route === route){\n                    i = adjustIndexForBottomMenuItems(i, itemsKey, menuItems);\n                    return ['', i];\n                }\n            }\n        }\n    }\n    return ['', -1];\n}\n\nconst adjustIndexForBottomMenuItems = (menuItemIndex: number, itemsKey: string,\n        menuItems: {[key: string]: MenuItemObject[]}) => {\n    // Adjust the index for bottomMenuItems,\n    // so its indexes dont clash with the topMenuItems's\n    if(itemsKey === 'bottomMenuItems'){\n        menuItemIndex += menuItems['mainMenuItems'].length\n    }\n    return menuItemIndex;\n}\n\nconst stripSlashes = (route: string) => {\n    if(route.startsWith('/')){\n        route = route.substr(1);\n    }\n    if(route.endsWith('/')){\n        route = route.substr(0, route.length - 1);\n    }\n    return route;\n}\n\nexport default getIntialNavbarListStateValues","import {useState} from 'react'\nimport {useLocation, useNavigate} from 'react-router'\nimport {List, Divider} from '@mui/material'\nimport Logo from '@components/logo'\nimport {getDimen} from '@conf/utils'\nimport NavbarItem from './navbar-item'\nimport menuItems from './const'\nimport getIntialNavbarListStateValues from './utils'\n\n\nconst NavbarList = ({setMenuIsOpen, logout}: {setMenuIsOpen: Function, logout: Function}) => {\n    const location = useLocation();\n\n    const {mainMenuItems, bottomMenuItems} = menuItems(logout);\n    const {initialMainMenuItemIndex, initialSubMenuItemSelected, initialSubMenuName,\n        initialSelectedSubMenuItemIndex, initialSubMenuIsOpen\n    } = getIntialNavbarListStateValues(location, menuItems(logout));\n    /** Menu index of currently selected menu item */\n    const [selectedMainMenuItemIndex, setSelectedMainMenuItemIndex] = useState(initialMainMenuItemIndex);\n    /** Has a sub menu item being selected */\n    const [subMenuItemSelected, setSubMenuItemSelected] = useState(initialSubMenuItemSelected);\n    /** The array index of the sub menu item that has \n     * been selected in the array of its menu items */\n    const [selectedSubMenuItemIndex, setSelectedSubMenuItemIndex] = useState(initialSelectedSubMenuItemIndex);\n    /** The name that appears on the button of the drop down menu that has the sub menu */\n    const [selectedSubMenuName, setSelectedSubMenuName] = useState(initialSubMenuName);\n    /** Is a sub menu currently open */\n    const [subMenuIsOpen, setSubMenuIsOpen] = useState(initialSubMenuIsOpen);\n\n    const navigate = useNavigate();\n    const doesntHaveSubMenu = (item: {[key: string]: any}) => item.subMenu === undefined;\n    const unselectSubMenu = () => {\n        setSelectedSubMenuItemIndex(-1);\n        setSelectedSubMenuName('');\n    }\n    const unselectMainMenuItem = () => setSelectedMainMenuItemIndex(-1);\n    const selectSubMenuItem = (name: string, index: number) => {\n        setSubMenuItemSelected(true);\n        setSelectedSubMenuItemIndex(index);\n        setSelectedSubMenuName(name);\n    }\n    const closeSubMenu = () => {\n        setSubMenuIsOpen(false);\n        //setSelectedSubMenuItemIndex(-1);\n        //setSelectedSubMenuName('');\n    }\n    const closeMenu = () => setMenuIsOpen(false);\n    const carryOutItemAction = (item: {[key: string]: any}) => {\n        if(item.route !== undefined){\n            navigate(item.route);\n        } else {\n            item.action();\n        }\n    }\n    const itemInSubMenuIsSelected = (item: {[key: string]: any}) => \n        selectedMainMenuItemIndex === -1 && selectedSubMenuName === item.name;\n    const openSubMenu = (item: {[key: string]: any}) => {\n        setSubMenuIsOpen(true);\n        setSelectedSubMenuName(item.name);\n    }\n    const itemInASubMenuHasBeenSelected = () => selectedSubMenuItemIndex !== -1;\n\n    const onMainMenuItemClick = (e: Event, itemJustSelectedIndex: number, item: {[key: string]: any}) => {\n        // If item has sub menu, then it's a dropdown,\n        // not a link to a page\n        if(doesntHaveSubMenu(item)){\n            // Close any open sub menu first if any are open\n            if(subMenuItemSelected){\n                // Unselect the sub menus\n                unselectSubMenu();\n            }\n            // Sub menu might be open, even if none of its items have been selected\n            closeSubMenu();\n            setSelectedMainMenuItemIndex(itemJustSelectedIndex);\n            /** For small screens, close the menu on clicking an item */\n            closeMenu();\n            carryOutItemAction(item);\n        } else {\n            if(subMenuIsOpen){\n                closeSubMenu();\n                if(itemInSubMenuIsSelected(item)){\n                    setSelectedMainMenuItemIndex(itemJustSelectedIndex);\n                }\n            } else {\n                openSubMenu(item);\n                if(itemInASubMenuHasBeenSelected() && selectedSubMenuName === item.name){\n                    unselectMainMenuItem();\n                }\n            }\n        }\n    }\n    const onSubMenuItemSelect = (name: string, index: number, item: {[key: string]: any}) => {\n        // Unselect main menu items when sub menu item is selected\n        unselectMainMenuItem();\n        selectSubMenuItem(name, index);\n        carryOutItemAction(item);\n        /** For small screens */\n        closeMenu();\n    }\n\n    return(\n            <>\n                <List sx={{alignItems: 'center', padding: getDimen('padding-md')}}>\n                    <Logo style={{marginBottom: getDimen('padding-xbig')}} />\n                    {mainMenuItems.map((item, i) => (\n                        createNavbarItem(item, i, selectedMainMenuItemIndex, onMainMenuItemClick,\n                            onSubMenuItemSelect, selectedSubMenuItemIndex, subMenuIsOpen, selectedSubMenuName)\n                    ))}\n                </List>\n                <Divider sx={{mx: getDimen('padding-md')}}/>\n                <List sx={{alignItems: 'center', padding: getDimen('padding-md')}}>\n                    {bottomMenuItems.map((item, i) => (\n                        createNavbarItem(item, i + mainMenuItems.length, selectedMainMenuItemIndex,\n                            onMainMenuItemClick, onSubMenuItemSelect, selectedSubMenuItemIndex,\n                            subMenuIsOpen, selectedSubMenuName)\n                    ))}\n                </List>\n            </>\n    )\n}\n\nconst createNavbarItem = (item: {[key: string]: any}, i: number, selectedMainMenuItemIndex: number,\n        onMainMenuItemClick: Function, onSubMenuItemSelect: Function, selectedSubMenuItemIndex:number,\n        subMenuIsOpen: boolean, selectedSubMenuName: string) => {\n    return(\n        <NavbarItem\n            key={i}\n            Icon={item.icon}\n            index={i}\n            onClick={(e: Event, i: number) => onMainMenuItemClick(e, i, item)}\n            selected={selectedMainMenuItemIndex === i}\n            subMenu={item.subMenu ? item.subMenu : undefined}\n            onSubMenuItemSelect={onSubMenuItemSelect}\n            selectedSubMenuItemIndex={selectedSubMenuItemIndex}\n            subMenuIsOpen={subMenuIsOpen}\n            selectedSubMenuName={selectedSubMenuName}>\n                {item.name}\n        </NavbarItem>\n    );\n}\n\n\n\nexport default NavbarList","import {useContext, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport {Drawer, SwipeableDrawer} from '@mui/material'\nimport {useScreenIsSmall} from '@conf/utils'\nimport Navbar from '@components/navbar'\nimport {NAVBAR_WIDTH} from '@apps/trader-app/const'\nimport Http, {HttpErrorType} from '@services/http'\nimport NavbarList from './navbar-list'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport {ToastContext} from '@components/toast'\n\n\nconst TraderAppNavbar = () => {\n    const Toast = useContext(ToastContext);\n    const navigate = useNavigate();\n    /** Is the menu open. For small screens */\n    const [menuIsOpen, setMenuIsOpen] = useState(false);\n    const isScreenSmall = useScreenIsSmall();\n    const logout = () => {\n        const {BASE_URL, LOGOUT_URL} = HttpConst\n        Http.delete({\n            url: `${BASE_URL}/${LOGOUT_URL}/`,\n            successFunc: () => {\n                localStorage.removeItem('KEY');\n                const {INFO_LOGIN_ROUTE} = RouteConst;\n                navigate(`/${INFO_LOGIN_ROUTE}`);\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log(err);\n                Toast.error('Sorry. Something went wrong.');\n            }\n        })\n    }\n    \n    return(\n        <>\n            <Navbar\n                dontShowOnBigScreen={true}\n                links={[]}\n                sidebar={\n                    <SwipeableDrawer\n                        variant={isScreenSmall ? 'temporary' : 'permanent'}\n                        open={menuIsOpen}\n                        onClose={() => setMenuIsOpen(false)}\n                        onOpen={() => setMenuIsOpen(true)}\n                        sx={{width: `${NAVBAR_WIDTH}px`}}>\n                            <NavbarList setMenuIsOpen={setMenuIsOpen} logout={logout} />\n                    </SwipeableDrawer>\n                }\n                showLogo={false}\n                onSidebarMenuButtonClick={(e: Event) => setMenuIsOpen(menuIsOpen => !menuIsOpen)}\n            />\n            <Drawer\n                variant={isScreenSmall ? 'temporary' : 'permanent'}\n                open={menuIsOpen}\n                ModalProps={{\n                    keepMounted: true\n                }}\n                sx={{width: `${NAVBAR_WIDTH}px`}}>\n                    <NavbarList setMenuIsOpen={setMenuIsOpen} logout={logout} />\n            </Drawer>\n        </>\n    );\n}\n\nexport default TraderAppNavbar","const NAVBAR_WIDTH = 270;\n\nexport {\n    NAVBAR_WIDTH\n}","import {ColumnBox} from '@components/containers'\nimport {getDimen, getDimenInNo, useScreenIsSmall} from '@conf/utils'\nimport {NAVBAR_WIDTH} from '@apps/trader-app/const'\nimport {ReactNode} from 'react'\n\n/**\n * A container to wrap all pages in the trader app\n * Gives every page margins to avoid navbar and sidebar\n * overlaps\n */\n\nconst TraderAppContainer = ({children}: {children: ReactNode}) => {\n    /** \n     * If screen is small, then there will be a navbar.\n     * A margin has to be added on top of the container\n     * to stay below the navbar.\n     */\n    const screenIsSmall = useScreenIsSmall();\n\n    return(\n        <div \n            style={{\n                marginTop: screenIsSmall ? `${getDimenInNo('navbar-height') + 32}px` : 0,\n                paddingBottom: getDimen('padding-big'),\n                marginLeft: !screenIsSmall ? `${NAVBAR_WIDTH}px` : 0,\n                height: 'fit-content',\n            }}>\n                {children}\n        </div>\n    )\n}\n\nexport default TraderAppContainer","import {useContext} from 'react'\nimport {useNavigate} from 'react-router-dom'\nimport ReactGA from 'react-ga4'\nimport {Grid, createTheme, ThemeProvider} from '@mui/material'\nimport {Divider} from '@mui/material'\nimport {format} from 'timeago.js'\nimport {Button} from '@components/buttons'\nimport {RowBox} from '@components/containers'\nimport {P, SBP} from '@components/text'\nimport {RouteConst} from '@conf/const'\nimport {getColor, getDimen} from '@conf/utils'\nimport {RefreshDataContext, DataIsRefreshingContext, GlobalDataContext, PermissionsContext} from '@apps/trader-app'\nimport LoadingIcon from '@components/loading-icon'\n\n/*\nconst DataStatusBar = () => {\n    const globalData = useContext(GlobalDataContext);\n    const permissions = useContext(PermissionsContext);\n    const dataIsRefreshing = useContext(DataIsRefreshingContext);\n    const refreshData = useContext(RefreshDataContext);\n    const dataHasRefreshedBefore = () => {\n        // If the data has never been refreshed, the last refreshed time \n        // will be set to an impossibly long time ago, about 100 years\n        const currentYear = (new Date()).getFullYear();\n        const lastDataRefreshTimeYear = globalData.lastDataRefreshTime().getFullYear();\n        return currentYear - lastDataRefreshTimeYear < 1;\n    }\n    const lastDataRefreshDisplay = dataHasRefreshedBefore() ?\n        format(globalData.lastDataRefreshTime())\n        : 'Never'\n    const subscriptionStatusTextStyle = {fontWeight: 'bold', marginRight: getDimen('padding-xs')};\n    return(\n        <>\n            <RowBox style={{\n                justifyContent: 'space-between',\n                marginTop: getDimen('padding-xs'),\n                marginBottom: getDimen('padding-xs'),\n                alignItems: 'center'\n            }}>\n                {(() => {\n                    if(!permissions.canRefreshAccount){\n                        let text = <P style={subscriptionStatusTextStyle}>Your subscription has expired</P>;\n                        if(!globalData.userHasPaid()){\n                            text = <P style={subscriptionStatusTextStyle}>Your free trial is over</P>;\n                        }\n                        return(\n                            <RowBox style={{alignItems: 'center'}}>\n                                {text}\n                                <Button size='small'>Subscribe Now</Button>\n                            </RowBox>\n                        )\n                    }\n                    return null;\n                })()}\n                <RowBox style={{alignItems: 'center'}}>\n                    <SBP style={{\n                        color: getColor('dark-gray'),\n                        marginRight: getDimen('padding-xs')\n                    }}>Data Last Refreshed: {lastDataRefreshDisplay}</SBP>\n                    <Button \n                        variant='outlined'\n                        size='small'\n                        disabled={!permissions.canRefreshAccount}\n                        onClick={() => {\n                            if(!dataIsRefreshing){\n                                refreshData();\n                            }\n                        }}>{\n                            dataIsRefreshing ? \n                                <LoadingIcon color={getColor('gray')} size={20} />\n                                : 'Refresh Data'\n                        }</Button>\n                </RowBox>\n            </RowBox>\n            <Divider />\n        </>\n    )\n}\n*/\n\nconst DataStatusBar = () => {\n    const globalData = useContext(GlobalDataContext);\n    const permissions = useContext(PermissionsContext);\n    const dataIsRefreshing = useContext(DataIsRefreshingContext);\n    const refreshData = useContext(RefreshDataContext);\n    const navigate = useNavigate();\n    const dataHasRefreshedBefore = () => {\n        // If the data has never been refreshed, the last refreshed time \n        // will be set to an impossibly long time ago, about 100 years\n        const currentYear = (new Date()).getFullYear();\n        const lastDataRefreshTimeYear = globalData.lastDataRefreshTime().getFullYear();\n        return currentYear - lastDataRefreshTimeYear < 1;\n    }\n    const lastDataRefreshDisplay = dataHasRefreshedBefore() ?\n        format(globalData.lastDataRefreshTime())\n        : 'Never'\n    const subscriptionStatusTextStyle = {fontWeight: 'bold', marginRight: getDimen('padding-xs')};\n    const {TRADER_APP_ROUTE, TRADER_SUBSCRIBE_NOW_ROUTE} = RouteConst;\n    return(\n        <ThemeProvider theme={themeWithSpecificBrkpoints}>\n            <Grid container sx={{\n                paddingTop: getDimen('padding-xs'),\n                paddingBottom: getDimen('padding-xs'),\n                justifyContent: 'space-between'\n            }}>\n                <Grid item>\n                    {(() => {\n                        if(!permissions.canRefreshAccount){\n                            let text = <P style={subscriptionStatusTextStyle}>Your subscription has expired</P>;\n                            if(!globalData.userHasPaid()){\n                                text = <P style={subscriptionStatusTextStyle}>Your free trial is over</P>;\n                            }\n                            return(\n                                <RowBox style={{alignItems: 'center'}}>\n                                    {text}\n                                    <Button \n                                        size='small'\n                                        style={{marginRight: getDimen('padding-xs')}}\n                                        onClick={() => {\n                                            ReactGA.event('call_to_action_subscribe', {\n                                                'user_id': globalData.getUserId()\n                                            });\n                                            navigate(`/${TRADER_APP_ROUTE}/${TRADER_SUBSCRIBE_NOW_ROUTE}`)\n                                        }}>\n                                            Subscribe Now\n                                    </Button>\n                                </RowBox>\n                            )\n                        }\n                        return null;\n                    })()}\n                </Grid>\n                <Grid item sx={{\n                    paddingTop: {\n                        xs: getDimen('padding-xs'),\n                        sm: 0\n                    }\n                }}>\n                    <RowBox style={{alignItems: 'center'}}>\n                        <SBP style={{\n                            color: getColor('dark-gray'),\n                            marginRight: getDimen('padding-xs')\n                        }}>Data Last Refreshed: {lastDataRefreshDisplay}</SBP>\n                        <Button \n                            variant='outlined'\n                            size='small'\n                            disabled={!permissions.canRefreshAccount}\n                            onClick={() => {\n                                if(!dataIsRefreshing){\n                                    refreshData();\n                                }\n                            }}>{\n                                dataIsRefreshing ? \n                                    <LoadingIcon color={getColor('gray')} size={20} />\n                                    : 'Refresh Data'\n                            }</Button>\n                    </RowBox>\n                </Grid>\n            </Grid>\n            <Divider />\n        </ThemeProvider>\n    )\n}\n\n\nconst themeWithSpecificBrkpoints = createTheme({\n    breakpoints: {\n        values: {\n            xs: 0,\n            sm: 706,\n            md: 900,\n            lg: 1200,\n            xl: 1536,\n        }\n    }\n})\n\ndeclare module '@mui/material/styles' {\n  interface BreakpointOverrides {\n    xs: true;\n    sm: true;\n    md: true;\n    lg: true;\n    xl: true;\n    mobile: false;\n    tablet: false;\n    laptop: false;\n    desktop: false;\n  }\n}\n\n\n\nexport default DataStatusBar","import {ColumnBox} from '@components/containers'\nimport {getDimen} from '@conf/utils'\nimport DataStatusBar from './data-status-bar'\nimport {PageContainerPropTypes} from './types'\n\nconst PageContainer = ({children, style, className, showDataStatusBar}: PageContainerPropTypes) => {\n    return(\n        <ColumnBox\n            style={{\n                marginLeft: getDimen('padding-big'),\n                marginRight: getDimen('padding-big'),\n                ...style\n            }}\n            className={className ? className : ''}>\n            {showDataStatusBar !== undefined && !showDataStatusBar ?\n                null\n                : <DataStatusBar />\n            }\n            {children}\n        </ColumnBox>\n    )\n}\n\nexport default PageContainer","import {RowBox} from '@components/containers'\nimport {H4} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {AccountSelector} from '..'\nimport {PageHeadingPropTypes} from './types'\n\n/**\n * A component to display the heading of all pages in the\n * trader app\n * @prop heading: the heading to show at the top of the page\n * @prop dontShowSelector: should the account selector show?\n */\n\nconst PageHeading = ({heading, dontShowSelector}: PageHeadingPropTypes) => {\n    return(\n        <RowBox \n            style={{\n                justifyContent: 'space-between',\n                marginTop: getDimen('padding-md'),\n                marginBottom: getDimen('padding-md')\n            }}>\n            <H4>{heading}</H4>\n            {\n                dontShowSelector === undefined || !dontShowSelector ?\n                    <AccountSelector />\n                    : null\n            }\n        </RowBox>\n    )\n}\n\nexport default PageHeading","import {useContext, useState} from 'react'\nimport {SelectInput} from '@components/inputs'\nimport {GlobalDataContext, CurrentAccountChangerContext} from '@apps/trader-app'\n\n\nconst AccountSelector = () => {\n    const globalData = useContext(GlobalDataContext);\n    const accounts = globalData.getTradeAccountNames();\n    const currentAccountName = globalData.getCurrentTradeAccountName();\n    const onCurrentAccountChange = useContext(CurrentAccountChangerContext);\n    \n    return(\n        <SelectInput\n            value={currentAccountName}\n            onChange={(e) => onCurrentAccountChange(globalData.getTradeAccountIdOf(e.target.value))}\n            options={accounts}\n            placeholder='Accounts' />\n    )\n}\n\nexport default AccountSelector","import {RowBox} from '@components/containers'\nimport {H6} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {ChipSelectInput} from '@components/inputs'\nimport {GraphHeadingPropTypes} from './types'\n\n\nconst GraphHeading = ({title, selectorOptions, onSelectorSelectedOptionChange, paddingLeft, paddingTop}: GraphHeadingPropTypes) => {\n    if(title === undefined && selectorOptions === undefined){\n        return null\n    }\n    return(\n        <RowBox\n            style={{\n                paddingBottom: getDimen('padding-xs'),\n                paddingRight: getDimen('padding-sm'),\n                paddingTop: paddingTop !== undefined ? paddingTop : getDimen('padding-sm'),\n                paddingLeft: paddingLeft !== undefined ? paddingLeft : getDimen('padding-sm'),\n                justifyContent: 'space-between'\n            }}>\n            {title !== undefined ? <H6>{title}</H6> : null}\n            {selectorOptions !== undefined ?\n                <ChipSelectInput\n                    options={Object.keys(selectorOptions)}\n                    onChange={(option: string) => onSelectorSelectedOptionChange(option)} />\n                : null\n            }\n        </RowBox>\n    )\n}\n\nexport default GraphHeading","import {getColor} from '@conf/utils'\nimport {AreaChart, CartesianGrid, XAxis, YAxis, Area, Tooltip, ResponsiveContainer} from 'recharts'\nimport {BaseGraphPropTypes} from './types'\n\n\nconst LineGraph = ({data, xAxisKey, yAxisKey, height, tooltipName}: BaseGraphPropTypes) => {\n    return(\n        <ResponsiveContainer width='100%' height={height === undefined ? 250 : height}>\n            <AreaChart\n                data={data}\n                margin={{ \n                    top: 10, right: 30, left: 0, bottom: 0 \n                }}>\n                <CartesianGrid vertical={false} strokeDasharray=\"3 3\" />\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#0d6efd\" stopOpacity={0.2}/>\n                        <stop offset=\"95%\" stopColor=\"#9ec5ff\" stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <XAxis axisLine={false} tickLine={false} tick={false} dataKey={xAxisKey} />\n                <YAxis axisLine={false} tickLine={false} tick={{fill: getColor('dark-gray')}} />\n                <Tooltip />\n                <Area\n                    type='monotone'\n                    dataKey={yAxisKey}\n                    name={tooltipName ? tooltipName : undefined}\n                    stroke='#0d6efd' \n                    strokeWidth={2} \n                    fillOpacity={1}\n                    fill=\"url(#colorUv)\"\n                />\n            </AreaChart>\n        </ResponsiveContainer>\n    );\n}\n\n\nexport default LineGraph","import {BarChart as ReBarChart, CartesianGrid, XAxis, YAxis, Tooltip, Bar, Legend, ResponsiveContainer} from 'recharts'\nimport {BaseGraphPropTypes} from './types'\n\n\nconst BarChart = ({data, xAxisKey, yAxisKey, height, tooltipName}: BaseGraphPropTypes) => {\n    return(\n        <ResponsiveContainer width='100%' height={height === undefined ? 250 : height}>\n            <ReBarChart data={data} barSize={80}>\n                <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n                <XAxis axisLine={false} tickLine={false} dataKey={xAxisKey} />\n                <YAxis axisLine={false} tickLine={false} />\n                <Tooltip />\n                <Legend />\n                <Bar\n                    dataKey={yAxisKey}\n                    name={tooltipName ? tooltipName : undefined}\n                    fill=\"#0d6efd\"\n                    opacity='0.8' />\n            </ReBarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default BarChart","import {useEffect, useState} from 'react'\nimport {getColor, getDimen} from '@conf/utils'\nimport GraphHeading from './graph-heading'\nimport LineGraph from './line-graph'\nimport BarChart from './bar-chart'\nimport {GraphPropTypes, GraphData, GraphXAxisKey, SelectorOptions} from './types'\n\n\nconst Graph = ({data, variant, title, selectorOptions, outline, headerIsOutside, headerPaddingTop,\n        xAxisKey, 'data-testid': testId, ...props}\n    : GraphPropTypes) => {\n    const graphVariant = variant === undefined ? 'line' : variant;\n    const [graphData, setGraphData] = useState(initialGraphDataStateValues(data, selectorOptions));\n    const [currentXAxisKey, setcurrentXAxisKey] = useState(initialXAxisKeyStateValue(xAxisKey, selectorOptions));\n    const onSelectorSelectedOptionChange = (option: string) => {\n        if(selectorOptions !== undefined){\n            setGraphData(selectorOptions[option]);\n            // If it's not a string, then it's an object\n            // mapping option names to their respective xAxisKeys\n            // for the data they will display\n            // Had to use typeof directly because of the Typescript compiler\n            if(typeof(xAxisKey) !== 'string'){\n                setcurrentXAxisKey(xAxisKey[option]);\n            }\n        }\n    }\n\n    useEffect(() => {\n        if(data !== undefined){\n            setGraphData(data);\n        }\n    }, [data])\n\n    useEffect(() => {\n        if(selectorOptions !== undefined){\n            setGraphData(initialGraphDataStateValues(data, selectorOptions));\n        }\n    }, [selectorOptions])\n\n    return(\n        <div data-testid={testId}>\n        {headerIsOutside ? \n            <GraphHeading \n                title={title}\n                selectorOptions={selectorOptions} \n                onSelectorSelectedOptionChange={onSelectorSelectedOptionChange}\n                paddingLeft={0}\n                paddingTop={headerPaddingTop} />\n            : null }\n            <div\n                style={Object.assign(\n                    outline ? {\n                        border: `1px solid ${getColor('xlight-blue')}`,\n                        paddingRight: getDimen('padding-sm'),\n                        borderRadius: '5px'\n                    } : {},\n                    headerIsOutside ? {\n                        paddingTop: getDimen('padding-md'),\n                        paddingBottom: getDimen('padding-md')\n                    } : {}    \n                )}>\n                {!headerIsOutside ? \n                    <GraphHeading \n                        title={title}\n                        selectorOptions={selectorOptions} \n                        onSelectorSelectedOptionChange={onSelectorSelectedOptionChange}\n                        paddingTop={headerPaddingTop} />\n                    : null}\n                {graphVariant === 'line' ?\n                    <LineGraph data={graphData} xAxisKey={currentXAxisKey} {...props} />\n                    : <BarChart data={graphData} xAxisKey={currentXAxisKey} {...props} />\n                }\n            </div>\n        </div>\n    );\n}\n\nconst initialGraphDataStateValues = (data?: GraphData, selectorOptions?: {[key: string]: GraphData}) => {\n    if(data !== undefined){\n        return data;\n    }\n    if(selectorOptions !== undefined){\n        const options = Object.keys(selectorOptions);\n        const lastOptionName = options[options.length - 1];\n        return selectorOptions[lastOptionName];\n    }\n    return []\n}\n\nconst initialXAxisKeyStateValue = (xAxisKey: GraphXAxisKey, selectorOptions?: SelectorOptions): string => {\n    if(typeof(xAxisKey) === 'string'){\n        return xAxisKey\n    }\n    // If xAxisKey is not a string, then it is an object mapping\n    // selector option names to their respective xAxisKeys\n    // This implies that selectorOptions can't be undefined at this point\n    // But to satisfy the Typescript compiler\n    if(selectorOptions !== undefined){\n        const nameOfFirstOption = Object.keys(selectorOptions)[0];\n        return xAxisKey[nameOfFirstOption];\n    }\n    \n    return ''\n}\n\nexport default Graph    ","import {Paper, TableContainer, Table as MuiTable, TableHead, \n    TableCell, TableBody, TableRow} from '@mui/material'\nimport {BP, H6} from '@components/text'\nimport {getColor, getDimen} from '@conf/utils'\nimport {TablePropTypes, ConditionalStyle, HeaderItem, HeaderItemObject} from './types'\n\n\nconst Table = ({title, headers, rows, style, bodyColumnConditionalStyle, headerStyle,\n        headerRowConditionalStyle, headerColumnConditionalStyle, headerColumnTextConditionalStyle,\n        headerTextStyle, headerRowTextConditionalStyle, bodyStyle, bodyRowConditionalStyle, 'data-testid': testId}\n    : TablePropTypes) => {\n    return(\n        <div data-testid={testId}>\n        {title ? \n            <H6 style={{marginBottom: getDimen('padding-xs')}}>{title}</H6>\n            : null\n        }\n        <TableContainer \n            component={Paper} \n            sx={{\n                boxShadow: 'none',\n                border: `1px solid ${getColor('xlight-blue')}`,\n                borderRadius: '1%'\n            }}>\n            <MuiTable sx={{height: '100%'}}>\n                <TableHead>\n                    {(() => {\n                        if(headers !== undefined){\n                            const headersArray: Array<HeaderItemObject[]> = formatHeaders(headers);\n                            return headersArray.map((headers, rowi) => {\n                                const conditionalRowStyle = getConditionalStyles(rowi, headerRowConditionalStyle);\n                                const conditionalRowTextStyle = getConditionalStyles(rowi, headerRowTextConditionalStyle);\n                                return(\n                                    <TableRow>\n                                        {headers.map((headerItem: HeaderItemObject, coli: number) => {\n                                            const conditionalColumnTextStyle = getConditionalStyles(coli, headerColumnTextConditionalStyle);\n                                            const conditionalColumnStyle = getConditionalStyles(coli, headerColumnConditionalStyle);\n                                            const headerCellStyle = headerStyle ? headerStyle : {};\n                                            const textStyle = headerTextStyle ? headerTextStyle : {};\n                                            const globalStyle = style ? style : {};\n                                            return(\n                                                <TableCell \n                                                    key={rowi + coli} \n                                                    sx={{\n                                                        textAlign: 'center',\n                                                        ...globalStyle,\n                                                        ...headerCellStyle,\n                                                        ...conditionalRowStyle,\n                                                        ...conditionalColumnStyle\n                                                    }}\n                                                    colSpan={headerItem.colSpan}>\n                                                    <BP style={{\n                                                        color: getColor('light-blue'),\n                                                        ...textStyle,\n                                                        ...conditionalRowTextStyle,\n                                                        ...conditionalColumnTextStyle,\n                                                    }}>{headerItem.name}</BP>\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            }\n                            );\n                        }\n                        return null;\n                    })()}\n                </TableHead>\n                <TableBody>\n                    {rows.map((row, rowi) => {\n                        let conditionalRowStyles = getConditionalStyles(rowi, bodyRowConditionalStyle);\n                        return(\n                            <TableRow key={rowi}>\n                                {row.map((cell, coli) => {\n                                    const conditionalColumnStyles = getConditionalStyles(coli, bodyColumnConditionalStyle);\n                                    const bodyCellStyle = bodyStyle ? bodyStyle : {};\n                                    const globalStyle = style ? style : {};\n                                    return(\n                                        <TableCell \n                                            key={rowi + coli}\n                                            align='center'\n                                            sx={{\n                                                ...globalStyle,\n                                                ...bodyCellStyle,\n                                                ...conditionalColumnStyles,\n                                                ...conditionalRowStyles\n                                            }}>\n                                            {cell}\n                                        </TableCell>\n                                    );\n                                })}\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </MuiTable>\n        </TableContainer>\n        </div>\n    );\n}\n\n\n/**\n * \n * @param i: the index of whatever row or column calling the function.\n *  This parameter is passed to a conditionalStyle's condition function to determine\n *  whether or not to add the style associated with that conditionalStyle's style\n * @param conditionalStyle: an object with an object of styles and a condition function\n *  which takes the column or row index as an argument and returns a boolean that \n * determines whether or not to apply that style or an array of the same\n * @returns: a single object of all the styles whose condition evaluated to true\n *  when i is passed as an argument\n */\nconst getConditionalStyles = (i: number, conditionalStyle?: ConditionalStyle | Array<ConditionalStyle>) => {\n    // No style object, no style\n    if(conditionalStyle === undefined){\n        return {}\n    }\n    // Array of all conditional style objects\n    let conditionalStylesArray: Array<ConditionalStyle> = [];\n    if(Array.isArray(conditionalStyle)){\n        conditionalStylesArray = conditionalStyle;\n    } else {\n        conditionalStylesArray.push(conditionalStyle);\n    }\n    // Array of all style objects that will end up in the final style object\n    // For every condition that is false, an empty object is placed in the array\n    const stylesArray = conditionalStylesArray.map((conditionalStyle) => (\n        conditionalStyle.condition(i) ?\n            conditionalStyle.style\n            : {}\n    ));\n    const styles = mergeObject(stylesArray);\n    return styles;\n}\n\nconst mergeObject = (objArray: Array<{[key: string]: any}>): {[key: string]: any} => {\n    if(objArray.length === 0){\n        return {}\n    } else {\n        const lastObj = objArray.pop();\n        return Object.assign(mergeObject(objArray), lastObj);\n    }\n}\n\n/**\n * Headers are given as an array of HeaderItems,\n * which could be a string or object.\n * Examples of valid headers (which are the only headers we'll be expecting here)\n *      ['header1', 'header2', 'header3']\n *      [{name: 'header1', colSpan: 2}, {name: 'header2'}, 'header3']\n *      [\n *          [{name: 'header1', colSpan: 2}, {name: 'header2'}, 'header3'],\n *          [{name: 'header1', colSpan: 3}, {name: 'header2'}],\n *      ]\n * The job of this function is to take a @param headers array which could be\n * a combination of any of the forms above, and give a result of the following format\n *      [\n *          [{name: 'header1'}, {name: 'header2'}, {name: 'header3', colSpan: 2}]\n *      ]\n * \n */\nconst formatHeaders = (headers: Array<HeaderItem[]> | HeaderItem[]): Array<HeaderItemObject[]> => {\n    if(headers.length === 0){\n        return [[]]\n    }\n    // To handle the case where headers is an array of arrays of HeaderItems\n    const processMultipleHeaders = () => {\n        let headerRows: Array<HeaderItemObject[]> = [];\n        for(let i=0; i<headers.length; i++){\n            const headerItems = headers[i];\n            // headerItems is sure to be an array, but to satisfy the Typescript compiler\n            if(Array.isArray(headerItems)){\n                const headerRowToAdd = processHeaders(headerItems);\n                console.log(headerRowToAdd);\n                headerRows.push(headerRowToAdd);\n            }\n        }\n        return headerRows;\n    }\n    /** \n     * To handle the case where headers is an array of HeaderItems\n     * @operation\n     * The function assumes that all its items are HeaderItems\n     * So it initializes an array, headerRowToAdd, to store the final result\n     * It iterates over all the HeaderItems, which can be either strings or objects\n     * If it's a string it creates an object with the string as the name and adds it to headerRowToAdd\n     * If it's an object, it just adds the object\n     * It returns the final array inside another array, according to the description of\n     * what this function is supposed to return\n     */\n    const processHeaders = (headers: HeaderItem[] | Array<HeaderItem[]>) => {\n        const headerRowToAdd: HeaderItemObject[] = [];\n        for(let i=0; i<headers.length; i++){\n            const headerItem = headers[i];\n            if(typeof(headerItem) === 'string'){\n                headerRowToAdd.push({name: headerItem});\n            // Apart from strings, the only other possible type is an object\n            // but this additional check had to be added to satisfy the Typescript\n            // compiler\n            } else if(typeof(headerItem) === 'object' && !Array.isArray(headerItem)){\n                headerRowToAdd.push(headerItem);\n            }\n        }\n        return headerRowToAdd;\n    }\n    if(Array.isArray(headers[0])){\n        return processMultipleHeaders();\n    } else {\n        // processHeaders returns a single array of HeaderItems\n        return [processHeaders(headers)];\n    }\n}\n\nexport default Table\n// For testing\nexport {formatHeaders}","import {useEffect, useContext} from 'react'\nimport {GlobalDataContext} from '@apps/trader-app'\n\n\n/**\n * Hook to be used in trader app pages that need to make recalculations and\n * update calculations state when globalData changes\n * @param calcFunc: calculator function that recalculates values from the global data\n * @param updateComponentCalc: react setState function that is used to update the\n *  calculations state of whatever component called it\n * @param afterCalcFunc: function to execute immediately after calculating the new data,\n *  passing the new calculations as parameters to the function\n */\n\nconst useRecalc = (calcFunc: Function, updateComponentCalcState: Function, afterCalcFunc?: Function) => {\n    const globalData = useContext(GlobalDataContext);\n    useEffect(() => {\n        if(globalData.hasLoaded()){\n            const accountData = globalData.getCurrentTradeAccountData();\n            const newCalc = calcFunc(accountData);\n            updateComponentCalcState(newCalc);\n            if(afterCalcFunc){\n                afterCalcFunc(newCalc);\n            }\n        }\n    }, [globalData])\n}\n\nexport default useRecalc","import {ColumnBox} from '@components/containers'\nimport LoadingIcon from '@components/loading-icon'\nimport {getColor} from '@conf/utils'\n\n\nconst PageStillLoading = () => {\n    return(\n        <ColumnBox\n            style={{\n                height: '100vh',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n            <LoadingIcon\n                color={getColor('dark-gray')}\n                size={50} />\n        </ColumnBox>\n    )\n}\n\nexport default PageStillLoading","import {OverviewCalculations, OverviewCardsCalc, OverviewStatsCalc,\n    OverviewWeeklySummaryCalc, OverviewAccountReturnsGraphCalc} from 'calculator'\nimport {OverviewAccountReturnsGraphItem} from 'calculator/dist/overview-calculations/types'\n\nconst defaultCardsCalc: OverviewCardsCalc = {\n    totalBalance: 0,\n    noOfTrades: 0,\n    winRate: 0,\n    absGain: 0\n}\n\nconst defaultStatsCalc: OverviewStatsCalc = {\n    aveProfit: 0,\n    aveLoss: 0,\n    longsWonPercent: 0,\n    noOfLongsWon: 0,\n    noOfLongs: 0,\n    shortsWonPercent: 0,\n    noOfShortsWon: 0,\n    noOfShorts: 0,\n    bestTrade: 0,\n    worstTrade: 0,\n    highestBalance:0,\n    aveRRR: 0,\n    profitFactor: 0,\n    expectancy: 0,\n    lots: 0,\n    commissions: 0\n}\n\nconst defaultWeeklySummaryCalc: OverviewWeeklySummaryCalc = {\n    \n}\n\nconst defaultAccountReturnsGraphItem: OverviewAccountReturnsGraphItem[] = [];\nconst defaultAccountReturnsGraphCalc: OverviewAccountReturnsGraphCalc = {\n    todayGraphCalc: defaultAccountReturnsGraphItem,\n    thisWeekGraphCalc: defaultAccountReturnsGraphItem,\n    thisMonthGraphCalc: defaultAccountReturnsGraphItem,\n    thisYearGraphCalc: defaultAccountReturnsGraphItem,\n    allTimeGraphCalc: defaultAccountReturnsGraphItem\n}\n\nconst defaultOverviewCalc: OverviewCalculations = {\n    cardsCalc: defaultCardsCalc,\n    statsCalc: defaultStatsCalc,\n    weeklySummaryCalc: defaultWeeklySummaryCalc,\n    accountReturnsGraphCalc: defaultAccountReturnsGraphCalc\n}\n\nexport default defaultOverviewCalc","import {ColumnBox} from '@components/containers'\nimport {H4, H5, P} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport {BaseOverviewCardPropTypes} from './types'\n\n/**\n * Base card for the overview page\n */\n\nconst BaseOverviewCard = ({heading, content, backgroundColor}: BaseOverviewCardPropTypes) => {\n    return(\n        <ColumnBox \n            className='apps-trader-app-pages-overview-base-overview-card'\n            style={{backgroundColor: backgroundColor}}>\n            <P>{heading}</P>\n            <H5>{content}</H5>\n        </ColumnBox>\n    )\n}\n\nexport default BaseOverviewCard","import {getColor} from '@conf/utils'\nimport BaseOverviewCard from './base-card'\n\n\nconst BalanceCard = ({balance}: {balance: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Balance'\n            content={balance}\n            backgroundColor={getColor('xlight-blue')} />\n    )\n}\n\nexport default BalanceCard","import BaseOverviewCard from './base-card'\nimport {getColor} from '@conf/utils'\n\n\nconst NoOfTradesCard = ({noOfTrades}: {noOfTrades: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Number of Trades'\n            content={noOfTrades}\n            backgroundColor={getColor('light-green')} />\n    )\n}\n\nexport default NoOfTradesCard","import BaseOverviewCard from './base-card'\nimport {getColor} from '@conf/utils'\n\n\nconst WinRateCard = ({winRate}: {winRate: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Win Rate'\n            content={winRate}\n            backgroundColor={getColor('light-orange')} />\n    )\n}\n\nexport default WinRateCard","import {getColor} from '@conf/utils'\nimport BaseOverviewCard from './base-card'\n\n\nconst AbsGainCard = ({absGain}: {absGain: string}) => {\n    return(\n        <BaseOverviewCard\n            heading='Absolute Gain'\n            content={absGain}\n            backgroundColor={getColor('light-purple')} />\n    )\n}\n\nexport default AbsGainCard","import {formatMoney, formatPercent} from '@apps/trader-app/utils'\nimport {OverviewCardsCalc} from 'calculator'\nimport BalanceCard from './balance-card'\nimport NoOfTradesCard from './no-of-trades-card'\nimport WinRateCard from './win-rate-card'\nimport AbsGainCard from './abs-gain-card'\nimport './style.css'\n\n\nconst OverviewCards = ({calc}: {calc: OverviewCardsCalc}) => {\n    const balance = formatMoney(calc.totalBalance);\n    const noOfTrades = calc.noOfTrades.toString();\n    const winRate = formatPercent(calc.winRate);\n    const absGain = formatPercent(calc.absGain);\n\n    return(\n        <div className='apps-trader-app-pages-overview-overview-cards-container'\n            data-testid='overview-cards'>\n            <BalanceCard balance={balance} />\n            <NoOfTradesCard noOfTrades={noOfTrades} />\n            <WinRateCard winRate={winRate} />\n            <AbsGainCard absGain={absGain} />\n        </div>\n    )\n}\n\nexport default OverviewCards","import {Graph} from '@apps/trader-app/components'\nimport { objObjArrayTo2dp } from '@apps/trader-app/utils'\nimport {OverviewAccountReturnsGraphCalc} from 'calculator'\n\n\nconst AccountReturnsGraph = ({data}: {data: OverviewAccountReturnsGraphCalc}) => {\n    const options = objObjArrayTo2dp({\n        'Today': data.todayGraphCalc,\n        'This Week': data.thisWeekGraphCalc,\n        'This Month': data.thisMonthGraphCalc,\n        'This Year': data.thisYearGraphCalc,\n        'All Time': data.allTimeGraphCalc\n    }, 'result');\n\n    return(\n        <div style={{width: '100%'}}>\n            <Graph\n                title='Account Returns'\n                xAxisKey='tradeNo'\n                yAxisKey='result'\n                selectorOptions={options}\n                data-testid='account-returns-graph'\n                />\n        </div>\n    )\n}\n\n\nexport default AccountReturnsGraph","import {P, BP} from '@components/text'\nimport {getColor} from '@conf/utils'\nimport {formatMoney, to2dpstring} from '@apps/trader-app/utils'\nimport {OverviewStatsCalc} from 'calculator'\n\n\nconst createRows = (stats: OverviewStatsCalc) => {\n    const rows = [\n        [   \n            createCell(\n                'Average Profit',\n                formatMoney(stats.aveProfit),\n                getColor('light-blue')\n            ),\n            createCell('Average Loss', formatMoney(stats.aveLoss), getColor('red'))\n        ],\n        [   \n            createCell('Longs Won', `${to2dpstring(stats.longsWonPercent)}% (${stats.noOfLongsWon}/${stats.noOfLongs})`),\n            createCell('Shorts Won', `${to2dpstring(stats.shortsWonPercent)}% (${stats.noOfShortsWon}/${stats.noOfShorts})`)\n        ],\n        [\n            createCell(\n                'Best Trade',\n                formatMoney(stats.bestTrade)\n            ),\n            createCell(\n                'Worst Trade',\n                formatMoney(stats.worstTrade)\n            )\n        ],\n        [\n            createCell(\n                'Highest Balance',\n                formatMoney(stats.highestBalance)\n            ),\n            createCell('Average RRR', to2dpstring(stats.aveRRR))\n        ],\n        [\n            createCell('Profit Factor', to2dpstring(stats.profitFactor)),\n            createCell(\n                'Expectancy',\n                formatMoney(stats.expectancy)\n            )\n        ],\n        [\n            createCell(\n                'Commission',\n                formatMoney(stats.commissions)\n            )\n        ]\n    ]\n    return rows;\n}\n\nconst createCell = (heading: string, content: string, color: string | undefined = undefined) => {\n    return(\n        <StatsTableCell\n            heading={heading}\n            content={content}\n            color={color} />\n    )\n}\n\nconst StatsTableCell = ({heading, content, color}: any) => {\n    return(\n        <div>\n            <BP style={{color: getColor('dark-gray')}}>{heading}</BP>\n            <P style={{color: color}}>{content}</P>\n        </div>\n    )\n}\n\nexport default createRows","import {ReactNode} from 'react'\nimport {getColor} from '@conf/utils'\nimport {OverviewStatsCalc} from 'calculator/dist'\nimport {Table} from '@apps/trader-app/components'\nimport createRows from './create-rows'\n\n\nconst OverviewStats = ({stats}: {stats: OverviewStatsCalc}) => {\n    const rows: Array<Array<ReactNode>> = createRows(stats);\n    \n    return(\n        <div>\n            <Table\n                title='Statistics'\n                rows={rows}\n                style={{textAlign: 'left'}}\n                bodyColumnConditionalStyle={{\n                    condition: (columnIndex) => columnIndex % 2 !== 0,\n                    style: {background: getColor('light-gray')}\n                }}\n                data-testid='overview-stats' />\n        </div>\n    );\n}\n\n\nexport default OverviewStats","import {ReactNode} from 'react'\nimport {OverviewWeeklySummaryCalc} from 'calculator'\nimport {P} from '@components/text'\nimport {formatMoney} from '@apps/trader-app/utils'\nimport {getColor} from '@conf/utils'\n\n\nconst createRows = (summary: OverviewWeeklySummaryCalc): Array<Array<ReactNode>> => {\n    const rows = \n        Object.keys(summary).map((date) => (\n            [\n                <P>{date}</P>,\n                <P>{summary[date].trades.toString()}</P>,\n                resultInColor(summary[date].result),\n            ]\n        ));\n    return rows\n}\n\nconst resultInColor = (result: number): ReactNode => {\n    return result === 0 ?\n        <P>{formatMoney(result)}</P> \n        : result < 0 ? \n            <P style={{color: getColor('red')}}>{formatMoney(result)}</P> \n            : <P style={{color: getColor('light-blue')}}>{formatMoney(result)}</P>\n}\n\nexport default createRows","import {ReactNode} from 'react'\nimport {OverviewWeeklySummaryCalc} from 'calculator'\nimport {getColor} from '@conf/utils'\nimport {Table} from '@apps/trader-app/components'\nimport createRows from './create-rows'\n\n\nconst WeeklySummary = ({summary}: {summary: OverviewWeeklySummaryCalc}) => {\n    const rows: Array<Array<ReactNode>> = createRows(summary);\n    const headers: string[] = ['Date', 'Trades', 'Result'];\n    return(\n        <div>\n            <Table\n                title='Weekly Summary'\n                headers={headers} \n                rows={rows}\n                headerStyle={{textAlign: 'center'}}\n                bodyColumnConditionalStyle={{\n                    condition: (columnIndex) => columnIndex % 2 !== 0 ? true : false,\n                    style: {backgroundColor: getColor('light-gray')}\n                }}\n                data-testid='weekly-summary'\n                />\n        </div>\n    );\n}\n\nexport default WeeklySummary","import {useState} from 'react'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport {overviewCalculations, OverviewCalculations} from 'calculator'\nimport {defaultOverviewCalc} from './const'\nimport OverviewCards from './overview-cards'\nimport AccountReturnsGraph from './account-returns-graph'\nimport OverviewStats from './overview-stats'\nimport WeeklySummary from './weekly-summary'\nimport './style.css'\n\n\nconst Overview = () => {\n    const [overviewCalc, setOverviewCalc] = useState<OverviewCalculations>(defaultOverviewCalc);\n    useRecalc(overviewCalculations, setOverviewCalc);\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Overview' />\n            <OverviewCards calc={overviewCalc.cardsCalc} />\n            <AccountReturnsGraph data={overviewCalc.accountReturnsGraphCalc} />\n            <div id='apps-trader-app-pages-overview-stats-and-weekly-summary-container'>\n                <OverviewStats stats={overviewCalc.statsCalc} />\n                <WeeklySummary summary={overviewCalc.weeklySummaryCalc} />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Overview","import {CashGraphCalc, CashGraphItem} from 'calculator'\nimport {Graph} from '@apps/trader-app/components'\nimport {objObjArrayTo2dp} from '@apps/trader-app/utils'\n\n\nconst CashGraph = ({data}: {data: CashGraphCalc}) => {\n    const options = objObjArrayTo2dp({\n        'Today': data.todayGraphCalc,\n        'This Week': data.thisWeekGraphCalc,\n        'This Month': data.thisMonthGraphCalc,\n        'This Year': data.thisYearGraphCalc,\n        'All Time': data.allTimeGraphCalc\n    }, 'balance');\n    return(\n        <Graph\n            title='Cash'\n            selectorOptions={options}\n            xAxisKey='tradeNo'\n            yAxisKey='balance'\n            outline={true}\n            data-testid='cash-graph'\n            />\n    )\n}\n\n\n\nexport default CashGraph","import {GainsGraphCalc} from 'calculator'\nimport {Graph} from '@apps/trader-app/components'\nimport {objObjArrayTo2dp} from '@apps/trader-app/utils';\n\n\nconst GainsGraph = ({data}: {data: GainsGraphCalc}) => {\n    const options = objObjArrayTo2dp({\n        'Today': data.todayGraphCalc,\n        'This Week': data.thisWeekGraphCalc,\n        'This Month': data.thisMonthGraphCalc,\n        'This Year': data.thisYearGraphCalc,\n        'All Time': data.allTimeGraphCalc\n    }, 'gainsPercent');\n    return(\n        <Graph\n            title='Gains'\n            selectorOptions={options}\n            xAxisKey='tradeNo'\n            yAxisKey='gainsPercent'\n            tooltipName='Gains %'\n            outline={true}\n            data-testid='gains-graph'\n            />\n    )\n}\n\nexport default GainsGraph","import {CashAndGainsCalculations, CashGraphCalc, GainsGraphCalc} from 'calculator'\n\nconst defaultGraphCalc = {\n    todayGraphCalc: [],\n    thisWeekGraphCalc: [],\n    thisMonthGraphCalc: [],\n    thisYearGraphCalc: [],\n    allTimeGraphCalc: []\n}\n\nconst defaultCashGraphCalc: CashGraphCalc = defaultGraphCalc;\n\nconst defaultGainsGraphCalc: GainsGraphCalc = defaultGraphCalc;\n\nconst defaultCashAndGainsCalc: CashAndGainsCalculations = {\n    cashGraphCalc: defaultCashGraphCalc,\n    gainsGraphCalc: defaultGainsGraphCalc\n}\n\nexport default defaultCashAndGainsCalc","import {useState} from 'react'\nimport {cashAndGainsCalculations} from 'calculator'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport CashGraph from './cash-graph'\nimport GainsGraph from './gains-graph'\nimport defaultCashAndGainsCalc from './const'\nimport './style.css'\n\n\nconst CashAndGains = () => {\n    const [cashAndGainsCalc, setCashAndGainsCalc] = useState(defaultCashAndGainsCalc);\n    useRecalc(cashAndGainsCalculations, setCashAndGainsCalc);\n    return(\n        <PageContainer className='apps-trader-app-pages-cash-and-gains-container'>\n            <PageHeading heading='Cash and Gains' />\n            <CashGraph data={cashAndGainsCalc.cashGraphCalc} />\n            <GainsGraph data={cashAndGainsCalc.gainsGraphCalc} />\n        </PageContainer>\n    )\n}\n\nexport default CashAndGains","import {to2dpstring} from '@apps/trader-app/utils'\nimport {BP, P} from '@components/text'\nimport {ExpensesTableCalc} from 'calculator'\n\n\nconst createRows = (calcs: ExpensesTableCalc) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.pair}</BP>,\n        <P>{to2dpstring(calc.commission ? calc.commission : 0)}</P>,\n        <P>{to2dpstring(calc.swap ? calc.swap : 0)}</P>\n    ]));\n    return rows\n}\n\nexport default createRows","import {ExpensesCalc} from 'calculator'\n\n\nconst defaultExpensesCalc: ExpensesCalc = {\n    expensesTableCalc: []\n}\n\nexport default defaultExpensesCalc","import {useState} from 'react'\nimport {ExpensesCalc, expensesCalculations} from 'calculator'\nimport {PageContainer, PageHeading, Table, useRecalc} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport defaultExpensesCalc from './const'\n\n\nconst Expenses = () => {\n    const [expensesCalc, setExpensesCalc] = useState(defaultExpensesCalc);\n    const headers = ['Pair', 'Commissions ($)', 'Swap Fees ($)'];\n    const [rows, setRows] = useState(createRows(expensesCalc.expensesTableCalc));\n    useRecalc(expensesCalculations, setExpensesCalc, (newExpensesCalc: ExpensesCalc) => {\n        setRows(createRows(newExpensesCalc.expensesTableCalc));\n    });\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Expenses' />\n            <Table\n                headers={headers}\n                rows={rows}\n                bodyColumnConditionalStyle={{\n                    condition: (i) => i === 1,\n                    style: {background: getColor('light-gray')}\n                }}\n                data-testid='expenses-table'\n                />\n        </PageContainer>\n    )\n}\n\nexport default Expenses","import {BP, P} from '@components/text'\nimport {formatMoney, formatPercent, to2dpstring} from '@apps/trader-app/utils'\nimport {LongShortComparisonTableCalc} from 'calculator/dist'\n\n\nconst createRows = (data: LongShortComparisonTableCalc) => {\n    return(\n        [\n            [\n                <BP>No. of Trades</BP>,\n                <P>{data.long.noOfTrades.toString()}</P>,\n                <P>{data.short.noOfTrades.toString()}</P>\n            ],\n            [\n                <BP>Result</BP>,\n                <P>{formatMoney(data.long.result)}</P>,\n                <P>{formatMoney(data.short.result)}</P>\n            ],\n            [\n                <BP>Win Rate</BP>,\n                <P>{formatPercent(data.long.winRate)}</P>,\n                <P>{formatPercent(data.short.winRate)}</P>\n            ],\n            [\n                <BP>Average Profit</BP>,\n                <P>{formatMoney(data.long.aveProfit)}</P>,\n                <P>{formatMoney(data.short.aveProfit)}</P>\n            ],\n            [\n                <BP>RRR</BP>,\n                <P>{to2dpstring(data.long.rrr)}</P>,\n                <P>{to2dpstring(data.short.rrr)}</P>\n            ],\n        ]\n    )\n}\n\nexport default createRows","import {Table} from'@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {LongShortComparisonTableCalc} from 'calculator/dist'\n\nconst LongShortComparisonTable = ({data}: {data: LongShortComparisonTableCalc}) => {\n    const headers = ['', 'Long', 'Short'];\n    const rows = createRows(data);\n    return(\n        <div>\n            <Table\n                title='Long / Short Comparison'\n                headers={headers}\n                rows={rows}\n                headerStyle={{textAlign: 'center'}}\n                bodyColumnConditionalStyle={[\n                    {\n                        condition: (columnIndex) => columnIndex === 0,\n                        style: {textAlign: 'left'}\n                    },\n                    {\n                        condition: (columnIndex) => columnIndex === 1,\n                        style: {background: getColor('xlight-green')}\n                    },\n                    {\n                        condition: (columnIndex) => columnIndex === 2,\n                        style: {background: getColor('light-red')}\n                    }\n                ]}\n                data-testid='long-short-comparison-table'\n            />\n        </div>\n    )\n}\n\nexport default LongShortComparisonTable","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils'\nimport {LongShortComparisonGraphCalc} from 'calculator/dist'\n\n\nconst LongShortBarGraph = ({data}: {data: LongShortComparisonGraphCalc}) => {\n    const refinedData = objArrayTo2dp(data, 'result');\n    return(\n        <div>\n            <Graph\n                title='Long / Short'\n                data={refinedData}\n                variant='bar'\n                xAxisKey='label'\n                yAxisKey='result'\n                outline={true}\n                headerIsOutside={true}\n                headerPaddingTop={0}\n                height={270}\n                data-testid='long-short-bar-graph'\n                />\n        </div>\n    )\n}\n\nexport default LongShortBarGraph","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils';\nimport {LongBalanceGraphCalc} from 'calculator/dist'\n\n\nconst LongBalanceGraph = ({data}: {data: LongBalanceGraphCalc}) => {\n    const refinedData = objArrayTo2dp(data, 'result');\n    return(\n        <Graph\n            title='Long Balance'\n            data={refinedData}\n            xAxisKey='tradeNo'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='long-balance-graph'\n            />\n    );\n}\n\nexport default LongBalanceGraph","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils'\nimport {ShortBalanceGraphCalc} from 'calculator/dist'\n\n\nconst ShortBalanceGraph = ({data}: {data: ShortBalanceGraphCalc}) => {\n    const refinedData = objArrayTo2dp(data, 'result');\n    return(\n        <Graph\n            title='Short Balance'\n            data={refinedData}\n            xAxisKey='tradeNo'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='short-balance-graph'\n            />\n    );\n}\n\nexport default ShortBalanceGraph","import {LongBalanceGraphCalc, LongShortAnalysisCalculations,\n    LongShortComparisonGraphCalc, LongShortComparisonTableCalc, ShortBalanceGraphCalc} from 'calculator'\n\nconst defaultLongShortComparisonGraphCalc: LongShortComparisonGraphCalc = [\n    {label: 'long', result: 0},\n    {label: 'short', result: 0}\n]\n\nconst defaultLongBalanceGraphCalc: LongBalanceGraphCalc = []\n\nconst defaultShortBalanceGraphCalc: ShortBalanceGraphCalc = [];\n\nconst defaultLongShortComparisonTableCalcItem = {\n    noOfTrades: 0,\n    result: 0,\n    winRate: 0,\n    aveProfit: 0,\n    rrr: 0\n}\n\nconst defaultLongShortComparisonTableCalc: LongShortComparisonTableCalc = {\n    long: defaultLongShortComparisonTableCalcItem,\n    short: defaultLongShortComparisonTableCalcItem\n}\n\nconst defaultLongShortAnalysisCalc: LongShortAnalysisCalculations = {\n    longShortComparisonGraphCalc: defaultLongShortComparisonGraphCalc,\n    longBalanceGraphCalc: defaultLongBalanceGraphCalc,\n    shortBalanceGraphCalc: defaultShortBalanceGraphCalc,\n    longShortComparisonTableCalc: defaultLongShortComparisonTableCalc\n}\n\nexport default defaultLongShortAnalysisCalc","import {useState} from 'react'\nimport {longShortAnalysisCalculations} from 'calculator'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport LongShortComparisonTable from './long-short-comparison-table'\nimport LongShortBarGraph from './long-short-bar-graph'\nimport LongBalanceGraph from './long-balance-graph'\nimport ShortBalanceGraph from './short-balance-graph'\nimport defaultLongShortAnalysisCalc from './const'\nimport './style.css'\n\n\nconst LongShortAnalysis = () => {\n    const [longShortAnalysisCalc, setLongShortAnalysisCalc] = useState(defaultLongShortAnalysisCalc);\n    useRecalc(longShortAnalysisCalculations, setLongShortAnalysisCalc);\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Long / Short Analysis' />\n            <div className='apps-trader-app-pages-long-short-analysis-container'>\n                <div>\n                    <LongShortComparisonTable data={longShortAnalysisCalc.longShortComparisonTableCalc} />\n                    <LongShortBarGraph data={longShortAnalysisCalc.longShortComparisonGraphCalc} />\n                </div>\n                <div>\n                    <LongBalanceGraph data={longShortAnalysisCalc.longBalanceGraphCalc} />\n                    <ShortBalanceGraph data={longShortAnalysisCalc.shortBalanceGraphCalc} />\n                </div>\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default LongShortAnalysis","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils'\nimport {AveReturnsPerPairGraphCalc} from 'calculator'\n\n\nconst AveReturnPerPairGraph = ({data}: {data: AveReturnsPerPairGraphCalc}) => {\n    const graphData: AveReturnsPerPairGraphCalc = data.length === 0 ? [{pair: '', result: 0}]\n        : objArrayTo2dp(data, 'result');\n    return(\n        <Graph\n            title='Average Return Per Pair'\n            variant='bar'\n            data={graphData}\n            xAxisKey='pair'\n            yAxisKey='result'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='ave-returns-per-pair-graph'\n            />\n    )\n}\n\nexport default AveReturnPerPairGraph","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils'\nimport {AveRrrPerPairGraphCalc} from 'calculator'\n\n\nconst AveRrrPerPairGraph = ({data}: {data: AveRrrPerPairGraphCalc}) => {\n    const graphData: AveRrrPerPairGraphCalc = data.length === 0 ? [{pair: '', rrr: 0}]\n        : objArrayTo2dp(data, 'rrr');\n    return(\n        <Graph\n            title='Average RRR Per Pair'\n            variant='bar'\n            data={graphData}\n            xAxisKey='pair'\n            yAxisKey='rrr'\n            outline={true}\n            headerIsOutside={true}\n            data-testid='ave-rrr-per-pair-graph'\n            />\n    )\n}\n\nexport default AveRrrPerPairGraph","import {BP, P} from '@components/text'\nimport {getColor} from '@conf/utils'\nimport {formatPercent, to2dp} from '@apps/trader-app/utils'\nimport {PairsTableCalc} from './types'\n\n\nconst createRows = (calcs: Array<PairsTableCalc>) => {\n    const rows = calcs.map((calc) => ([\n        <BP style={{color: getColor('dark-gray')}}>{calc.pair}</BP>,\n        <P>{calc.noOfTradesOnPair.toString()}</P>,\n        <P>{noWithPercent(calc.noOfProfitableTradesOnPair, calc.profitableTradesOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfLosingTradesOnPair, calc.losingTradesOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfShortsOnPair, calc.shortsOnPairPercent)}</P>,\n        <P>{noWithPercent(calc.noOfLongsOnPair, calc.longsOnPairPercent)}</P>,\n        <P>{noWithPercent(to2dp(calc.noOfTpOnPair), calc.tpOnPairPercent)}</P>,\n        <P>{noWithPercent(to2dp(calc.noOfSlOnPair), calc.slOnPairPercent)}</P>,\n    ]));\n    return rows;\n}\n\nconst noWithPercent = (n: number, percent: number) => {\n    return `${n} (${formatPercent(percent)})`\n}\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {HeaderItemObject} from '@apps/trader-app/components/table/types'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {PairsTablePropTypes} from './types'\n\n\nconst PairsTable = ({calc}: PairsTablePropTypes) => {\n    const rows = createRows(calc);\n    return(\n        <Table\n            headers={[\n                [\n                    headerObj('Pair', 2), headerObj('Positions', 2),\n                    headerObj('Trades (%)', 2), headerObj('Triggered Positions (%)', 2)],\n                ['', 'Total', 'Profitable', 'Losing', 'Short', 'Long', 'TP', 'SL']\n            ]}\n            rows={rows}\n            headerStyle={{\n                textAlign: 'center'\n            }}\n            headerRowTextConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {color: getColor('dark-gray')}\n            }}\n            bodyColumnConditionalStyle={[\n                {condition: (i) => i === 1, style: {background: getColor('light-gray')}},\n                {condition: (i) => i === 2 || i === 6, style: {background: getColor('xlight-green')}},\n                {condition: (i) => i === 3 || i === 7, style: {background: getColor('light-red')}}\n            ]}\n            data-testid='pairs-table'\n            />\n    );\n}\n\nconst headerObj = (name: string, colSpan?: number) => {\n    const obj: HeaderItemObject = {name};\n    if(colSpan !== undefined){\n        obj.colSpan = colSpan;\n    }\n    return obj\n}\n\nexport default PairsTable","import {PairsAnalysisCalculations, AveReturnsPerPairGraphCalc,\n    AveRrrPerPairGraphCalc, PairsAnalysisTableCalc} from 'calculator/dist'\n\n\nconst defaultAveReturnPerPairGraphCalc: AveReturnsPerPairGraphCalc = []\nconst defaultAveRrrPerPairGraphData: AveRrrPerPairGraphCalc = []\nconst defaultPairsAnalysisTableCalc: PairsAnalysisTableCalc = []\n\nconst defaultPairsAnalysisCalc: PairsAnalysisCalculations = {\n    aveReturnsPerPairGraphCalc: defaultAveReturnPerPairGraphCalc,\n    aveRrrPerPairGraphCalc: defaultAveRrrPerPairGraphData,\n    pairsAnalysisTableCalc: defaultPairsAnalysisTableCalc\n}\n\nexport {\n    defaultPairsAnalysisCalc\n}","import {useState} from 'react'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport AveReturnPerPairGraph from './ave-return-per-pair-graph'\nimport AveRrrPerPairGraph from './ave-rrr-per-pair-graph'\nimport PairsTable from './pairs-table'\nimport {useRecalc} from '@apps/trader-app/components'\nimport {pairsAnalysisCalculations, PairsAnalysisCalculations} from 'calculator'\nimport {defaultPairsAnalysisCalc} from './const'\n\n\n\nconst PairsAnalysis = () => {\n    const [pairsAnalysisCalc, setPairsAnalysisCalc] = useState<PairsAnalysisCalculations>(defaultPairsAnalysisCalc);\n    useRecalc(pairsAnalysisCalculations, setPairsAnalysisCalc);\n    return(\n        <PageContainer>\n            <PageHeading heading='Pairs Analysis' />\n            <PairsTable calc={pairsAnalysisCalc.pairsAnalysisTableCalc} />\n            <AveReturnPerPairGraph data={pairsAnalysisCalc.aveReturnsPerPairGraphCalc} />\n            <AveRrrPerPairGraph data={pairsAnalysisCalc.aveRrrPerPairGraphCalc} />\n        </PageContainer>\n    )\n}\n\nexport default PairsAnalysis","import {DailyReturnsPerPeriodGraphCalc, MonthlyReturnsPerPeriodGraphCalc,\n    PeriodAnalysisCalculations, ReturnsPerPeriodGraphCalc, YearlyReturnsPerPeriodGraphCalc} from 'calculator'\n\n\nconst defaultDailyReturns: DailyReturnsPerPeriodGraphCalc = [\n    {day: 'Monday', result: 0},\n    {day: 'Tuesday', result: 0},\n    {day: 'Wednesday', result: 0},\n    {day: 'Thursday', result: 0},\n    {day: 'Friday', result: 0}\n]\n\nconst defaultMonthlyReturns: MonthlyReturnsPerPeriodGraphCalc = [\n    {month: 'January', result: 0},\n    {month: 'February', result: 0},\n    {month: 'March', result: 0},\n    {month: 'April', result: 0},\n    {month: 'May', result: 0},\n    {month: 'June', result: 0},\n    {month: 'July', result: 0},\n    {month: 'August', result: 0},\n    {month: 'September', result: 0},\n    {month: 'October', result: 0},\n    {month: 'November', result: 0},\n    {month: 'December', result: 0},\n]\n\nconst defaultYearlyReturns: YearlyReturnsPerPeriodGraphCalc = []\n\nconst defaultReturnsPerPeriodGraphCalc: ReturnsPerPeriodGraphCalc = {\n    daily: defaultDailyReturns,\n    monthly: defaultMonthlyReturns,\n    yearly: defaultYearlyReturns\n}\n\nconst defaultPeriodAnalysisCalculations: PeriodAnalysisCalculations = {\n    returnsPerPeriodGraphCalc: defaultReturnsPerPeriodGraphCalc\n}\n\nexport default defaultPeriodAnalysisCalculations","import {useState} from 'react'\nimport {PeriodAnalysisCalculations, ReturnsPerPeriodGraphCalc, periodAnalysisCalculations} from 'calculator'\nimport {Graph, PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport {objObjArrayTo2dp} from '@apps/trader-app/utils'\nimport defaultPeriodAnalysisCalc from './const'\n\n\nconst PeriodAnalysis = () => {\n    const [periodAnalysisCalc, setPeriodAnalysisCalc] = useState<PeriodAnalysisCalculations>(defaultPeriodAnalysisCalc);\n    useRecalc(periodAnalysisCalculations, setPeriodAnalysisCalc);\n    const returnsPerPeriodGraphCalc: ReturnsPerPeriodGraphCalc = objObjArrayTo2dp({\n        ...periodAnalysisCalc.returnsPerPeriodGraphCalc,\n        yearly: periodAnalysisCalc.returnsPerPeriodGraphCalc.yearly.length === 0 ?\n            [{year: 0, result: 0}, {year: 0, result: 0}]\n            : periodAnalysisCalc.returnsPerPeriodGraphCalc.yearly\n    }, 'result');\n    return(\n        <PageContainer>\n            <PageHeading heading='Period Analysis' />\n            <Graph\n                title='Returns Per Period'\n                variant='bar'\n                xAxisKey={{'daily': 'day', 'monthly': 'month', 'yearly': 'year'}}\n                yAxisKey='result'\n                selectorOptions={returnsPerPeriodGraphCalc}\n                outline={true}\n                data-testid='returns-per-period-graph'\n                />\n        </PageContainer>\n    )\n}\n\nexport default PeriodAnalysis","import {Graph} from '@apps/trader-app/components'\nimport {objArrayTo2dp} from '@apps/trader-app/utils'\nimport {TimeAnalysisGraphCalc, TimeAnalysisGraphCalcItem} from 'calculator'\n\n\nconst TimeAnalysisGraph = ({data}: {data: TimeAnalysisGraphCalc}) => {\n    const format = (data: TimeAnalysisGraphCalcItem[]) => {\n        if(data.length === 0){\n            return [{openHour: '', result: 0}]\n        }\n        return objArrayTo2dp(data, 'result');\n    }\n    const options = {\n        'Today': format(data.todayGraphCalc),\n        'This Week': format(data.thisWeekGraphCalc),\n        'This Month': format(data.thisMonthGraphCalc),\n        'This Year': format(data.thisYearGraphCalc),\n        'All Time': format(data.allTimeGraphCalc)\n    }\n    return(\n        <Graph\n            title='Open Hour'\n            variant='bar'\n            xAxisKey='openHour'\n            yAxisKey='result'\n            selectorOptions={options}\n            outline={true}\n            data-testid='open-hour-graph'\n            />\n    )\n}\n\nexport default TimeAnalysisGraph","import {P, BP} from '@components/text'\nimport {formatMoney} from '@apps/trader-app/utils'\nimport {TradeDurationTableCalc} from 'calculator'\n\nconst createRows = (calcs: TradeDurationTableCalc) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.duration}</BP>,\n        <P>{calc.noOfTrades.toString()}</P>,\n        <P>{formatMoney(calc.result)}</P>\n    ]))\n    return rows\n}\n\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {TradeDurationTableCalc} from 'calculator'\n\n\nconst TradeDurationTable = ({calc}: {calc: TradeDurationTableCalc}) => {\n    const headers = ['Duration', 'Num. of Trades', 'Result'];\n    const rows = createRows(calc);\n    return(\n        <Table\n            title='Results By Trade Duration'\n            headers={headers}\n            rows={rows}\n            bodyColumnConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {background: getColor('light-gray')}\n            }}\n            data-testid='trade-duration-table'\n            />\n    )\n}\n\nexport default TradeDurationTable","import {P, BP} from '@components/text'\nimport {formatMoney} from '@apps/trader-app/utils'\nimport {OpenHourTableCalc} from 'calculator'\n\n\nconst createRows = (calcs: OpenHourTableCalc) => {\n    const rows = calcs.map((calc) => ([\n        <BP>{calc.hour}</BP>,\n        <P>{calc.noOfTrades.toString()}</P>,\n        <P>{formatMoney(calc.result)}</P>\n    ]))\n    return rows\n}\n\n\nexport default createRows","import {Table} from '@apps/trader-app/components'\nimport {getColor} from '@conf/utils'\nimport createRows from './create-rows'\nimport {OpenHourTableCalc} from 'calculator'\n\n\nconst OpenHourTable = ({calc}: {calc: OpenHourTableCalc}) => {\n    const headers = ['Open Hour', 'Num. of Trades', 'Result'];\n    const rows = createRows(calc);\n    return(\n        <Table\n            title='Results By Open Hour'\n            headers={headers}\n            rows={rows}\n            bodyColumnConditionalStyle={{\n                condition: (i) => i === 1,\n                style: {background: getColor('light-gray')}\n            }}\n            data-testid='open-hour-table'\n            />\n    )\n}\n\nexport default OpenHourTable","import {OpenHourTableCalc, TimeAnalysisGraphCalc,\n    TradeDurationTableCalc, TradingTimeAnalysisCalculations} from 'calculator';\n\nconst defaultTradeDurationTableCalc: TradeDurationTableCalc =  [];\n\nconst defaultOpenHourCalc: OpenHourTableCalc = [];\n\nconst defaultTimeAnalysisGraphCalc: TimeAnalysisGraphCalc = {\n    todayGraphCalc: [],\n    thisWeekGraphCalc: [],\n    thisMonthGraphCalc: [],\n    thisYearGraphCalc: [],\n    allTimeGraphCalc: []\n}\n\nconst defaultTradingTimeAnalysis: TradingTimeAnalysisCalculations = {\n    timeAnalysisGraphCalc: defaultTimeAnalysisGraphCalc,\n    tradeDurationTableCalc: defaultTradeDurationTableCalc,\n    openHourTableCalc: defaultOpenHourCalc\n}\n\nexport default defaultTradingTimeAnalysis   ","import {useState} from 'react'\nimport {PageContainer, PageHeading, useRecalc} from '@apps/trader-app/components'\nimport {TradingTimeAnalysisCalculations, tradingTimeAnalysisCalculations} from 'calculator'\nimport TimeAnalysisGraph from './time-analysis-graph'\nimport TradeDurationTable from './trade-duration-table'\nimport OpenHourTable from './open-hour-table'\nimport defaultTradingTimeAnalysisCalc from './const'\nimport './style.css'\n\n\nconst TimeAnalysis = () => {\n    const [\n        tradingTimeAnalysisCalc,\n        setTradingTimeAnalysisCalc\n    ] = useState<TradingTimeAnalysisCalculations>(defaultTradingTimeAnalysisCalc);\n    useRecalc(tradingTimeAnalysisCalculations, setTradingTimeAnalysisCalc);\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Trading Time Analysis' />\n            <TimeAnalysisGraph data={tradingTimeAnalysisCalc.timeAnalysisGraphCalc} />\n            <div id='apps-trader-app-pages-time-analysis-tables-container'>\n                <TradeDurationTable calc={tradingTimeAnalysisCalc.tradeDurationTableCalc} />\n                <OpenHourTable calc={tradingTimeAnalysisCalc.openHourTableCalc} />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default TimeAnalysis","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\n\n\nconst EmailSection = ({email}: {email: string}) => {\n    return(\n        <ColumnBox>\n            <H6>Your Email</H6>\n            <P>{email}</P>\n        </ColumnBox>\n    )\n}\n\nexport default EmailSection","import {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport {RouteConst} from '@conf/const'\n\n\nconst ChangePasswordSection = () => {\n    const {INFO_CHANGE_PASSWORD_ROUTE} = RouteConst;\n    return(\n        <ColumnBox>\n            <H6>Your Password</H6>\n            <P>Change your password</P>\n            <a\n                href={`/${INFO_CHANGE_PASSWORD_ROUTE}`}\n                target='_blank'\n                rel='noreferrer'\n                >change password</a>\n        </ColumnBox>\n    )\n}\n\nexport default ChangePasswordSection","import ReactGA from 'react-ga4'\nimport Http from '@services/http'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport {ToastFuncType} from '@components/toast/types'\n\n\n/**\n * @param Toast toast object to alert user of errors\n * @param navigate function used to navigate to another page after successful account deletion\n * @param thenFunc function to be executed after attempt to delete, whether it ends in success or error\n * @param followUpNo number of times request has been remade\n */\nconst deleteAccount = (\n    userId: number,\n    Toast: ToastFuncType,\n    navigate: Function,\n    thenFunc: Function,\n    followUpNo: number = 0\n) => {\n    const {BASE_URL, DELETE_ACCOUNT_URL} = HttpConst;\n    setTimeout(() => Http.delete({\n        url: `${BASE_URL}/${DELETE_ACCOUNT_URL}/`,\n        successFunc: (resp: any) => {\n            if('detail' in resp.data){\n                if(resp.data['detail'] === 'removed'){\n                    ReactGA.event('delete_account_success', {\n                        'user_id': userId\n                    });\n                    const {INFO_LOGIN_ROUTE} = RouteConst;\n                    navigate(`/${INFO_LOGIN_ROUTE}`);\n                    thenFunc();\n                } else {\n                    if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                        ReactGA.event('delete_account_fail', {\n                            'user_id': userId\n                        });\n                        Toast.error('Sorry. Something went wrong.');\n                        thenFunc();\n                    } else {\n                        deleteAccount(userId, Toast, navigate, thenFunc, followUpNo + 1);\n                    }\n                }\n            } else {\n                ReactGA.event('delete_account_fail', {\n                    'user_id': userId\n                });\n                Toast.error('Sorry. Something went wrong.');\n                thenFunc();\n            }\n        },\n        errorFunc: (error: any) => {\n            ReactGA.event('delete_account_fail', {\n                'user_id': userId\n            });\n            Toast.error('Sorry. Something went wrong.');\n            thenFunc();\n        },\n    }), firstRequest(followUpNo) ? 0 : TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST);\n}\n\nconst firstRequest = (followUpNo: number) => followUpNo === 0\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 120;\n\nexport default deleteAccount ","import {useContext, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport ReactGA from 'react-ga4'\nimport {Button} from '@components/buttons'\nimport {ColumnBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport Dialog from '@components/dialog'\nimport {ToastContext} from '@components/toast'\nimport deleteAccount from './delete-account'\nimport LoadingIcon from '@components/loading-icon'\n\n\nconst DeleteAccountSection = ({userId}: {userId: number}) => {  \n    const navigate = useNavigate();\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const [accountIsDeleting, setAccountIsDeleting] = useState(false);\n    const Toast = useContext(ToastContext);\n    return(\n        <ColumnBox>\n            <Dialog\n                title='Delete Account?'\n                okButtonColor='error'\n                okButtonContent={accountIsDeleting ? <LoadingIcon /> : 'Delete Account'}\n                okButtonProps={{'data-testid': 'confirm-delete-account-button'}}\n                onOkClick={() => {\n                    ReactGA.event('delete_account_attempt', {\n                        'user_id': userId\n                    });\n                    setAccountIsDeleting(true);\n                    deleteAccount(userId, Toast, navigate, () => {\n                        setDialogIsOpen(false);\n                        setAccountIsDeleting(false)\n                    })}\n                }\n                onCancelClick={() => {\n                    ReactGA.event('delete_account_abort', {\n                        'user_id': userId\n                    });\n                    setDialogIsOpen(false)\n                }}\n                showCancelButton={!accountIsDeleting}\n                onClose={() => {\n                    if(!accountIsDeleting){\n                        setDialogIsOpen(false);\n                    }\n                }}\n                open={dialogIsOpen}>\n                    <P>Are you sure you want to delete your account.</P>\n                    <P>All your data will be deleted.</P>\n            </Dialog>\n            <H6>Delete Account</H6>\n            <P>Permanently delete your account. </P>\n            <ColumnBox style={{display: 'inline'}}>\n                <Button\n                    onClick={() => setDialogIsOpen(true)}\n                    color='error'\n                    data-testid='delete-account-button'>Delete Account</Button>\n            </ColumnBox>\n        </ColumnBox>\n    )\n}\n\nexport default DeleteAccountSection","import {Button} from '@components/buttons'\nimport {RouteConst} from '@conf/const'\n\nconst AddAccountButton = ({userCanAddAccount, navigate}: {userCanAddAccount: boolean, navigate: Function}) => { \n    const {TRADER_APP_ROUTE, TRADER_ADD_ACCOUNT_ROUTE} = RouteConst;\n    return(\n        <Button\n            disabled={!userCanAddAccount}\n            onClick={() => navigate(`/${TRADER_APP_ROUTE}/${TRADER_ADD_ACCOUNT_ROUTE}`)}>\n            Add Account\n        </Button>\n    )\n}\n\nexport default AddAccountButton","import {SBP} from '@components/text'\n\n\nconst NoOfAccountsLeftToAddStatus = ({noOfAccounts, maxAccounts, userCanAddAccount}: {noOfAccounts: number, maxAccounts: number, userCanAddAccount: boolean}) => {\n    if(noOfAccounts >= maxAccounts){\n        return(\n            <SBP style={{marginBottom: '10px'}}>\n                You have reached the maximum number of accounts\n            </SBP>\n        )\n    }\n    if(!userCanAddAccount){\n        return (\n            <SBP style={{marginBottom: '10px'}}>\n                You cannot add any more accounts\n            </SBP>\n        )\n    }\n    return(\n        <SBP style={{marginBottom: '10px'}}>\n            You can add only {(maxAccounts - noOfAccounts).toString()} more accounts\n        </SBP>\n    );\n    \n}\n\nexport default NoOfAccountsLeftToAddStatus","import ReactGA from 'react-ga4'\nimport Http from '@services/http'\nimport {HttpConst} from '@conf/const'\nimport {ToastFuncType} from '@components/toast/types'\n\n\n/**\n * @param accountId id of account to delete\n * @param removeAccountFromData function from trader app index to update state after successful deletion\n * @param Toast toast object to alert user of errors\n * @param thenFunc function to be executed after attempt to delete, whether it ends in success or error\n */\nconst removeAccount = (\n    userId:number,\n    accountId: number,\n    removeAccountFromData: Function,\n    Toast: ToastFuncType,\n    thenFunc: Function,\n    followUpNo: number = 0\n) => {\n    const {BASE_URL, REMOVE_TRADING_ACCOUNT_URL} = HttpConst;\n    setTimeout(() => Http.delete({\n        url: `${BASE_URL}/${REMOVE_TRADING_ACCOUNT_URL}/${accountId}/`,\n        successFunc: (resp: any) => {\n            if('detail' in resp.data){\n                if(resp.data['detail'] === 'removed'){\n                    ReactGA.event('remove_account_success', {\n                        'user_id': userId\n                    });\n                    removeAccountFromData(accountId);\n                    thenFunc();\n                } else {\n                    if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                        Toast.error('Sorry. Something went wrong.');\n                        ReactGA.event('remove_account_fail', {\n                            'user_id': userId\n                        });\n                        thenFunc();\n                    } else {\n                        removeAccount(userId, accountId, removeAccountFromData, Toast, thenFunc, followUpNo + 1);\n                    }\n                }\n            } else {\n                ReactGA.event('remove_account_fail', {\n                    'user_id': userId\n                })\n                Toast.error('Sorry. Something went wrong.');\n                thenFunc();\n            }\n        },\n        errorFunc: (error: any) => {\n            ReactGA.event('remove_account_fail', {\n                'user_id': userId\n            });\n            Toast.error('Sorry. Something went wrong.');\n        },\n    }), firstRequest(followUpNo) ? 0 : TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST);\n}\n\nconst firstRequest = (followUpNo: number) => followUpNo === 0\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 120;\n\nexport default removeAccount","import {useContext, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport ReactGA from 'react-ga4'\nimport {Button} from '@components/buttons'\nimport {ColumnBox, RowBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport {getDimen} from '@conf/utils'\nimport Dialog from '@components/dialog'\nimport {ToastContext} from '@components/toast'\nimport {ConfigConst} from '@conf/const'\nimport LoadingIcon from '@components/loading-icon'\nimport AddAccountButton from './add-account-button'\nimport {AccountsSectionPropTypes, AccountDataWithId} from './types'\nimport NoOfAccountsLeftToAddStatus from './no-of-accounts-left-to-add-status'\nimport removeAccount from './remove-account'\n\n\nconst AccountsSection = ({accounts, removeAccountFromData, userIsOnFreeTrial, userIsSubscribed, userId}: AccountsSectionPropTypes) => {\n    const navigate = useNavigate();\n    const [accountToDelete, setAccountToDelete] = useState<AccountDataWithId>(defaultAccountData);\n    const [isDeleting, setIsDeleting] = useState(false);\n    const Toast = useContext(ToastContext);\n    const maxNoOfAccounts = userIsOnFreeTrial ?\n        ConfigConst.MAX_NO_OF_TRADING_ACCOUNT_FREE_TRIAL_TRADER\n        : ConfigConst.MAX_NO_OF_TRADING_ACCOUNT_SUBSCRIBED_TRADER;\n    const userCanAddAccount = accounts.length < maxNoOfAccounts && (userIsOnFreeTrial || userIsSubscribed);\n    return(\n        <ColumnBox>\n            <Dialog\n                title='Remove Account'\n                onOkClick={() => {\n                    ReactGA.event('remove_account_attempt', {\n                        'user_id': userId\n                    });\n                    removeAccount(userId, accountToDelete.id, removeAccountFromData, Toast, () => {\n                        setIsDeleting(false);\n                        setAccountToDelete(defaultAccountData);\n                    });\n                    setIsDeleting(true);\n                }}\n                okButtonContent={isDeleting ? <LoadingIcon /> : 'ok'}\n                showCancelButton={!isDeleting}\n                onCancelClick={() => {\n                    ReactGA.event('remove_account_abort', {\n                        'user_id': userId\n                    });\n                    setAccountToDelete(defaultAccountData);\n                    setIsDeleting(false);\n                }}\n                onClose={() => {\n                    if(!isDeleting){\n                       setAccountToDelete(defaultAccountData);\n                    }\n                }}\n                open={accountToDelete != defaultAccountData || isDeleting}\n                >\n                    <ColumnBox>\n                        <P>Are you sure you want to remove {accountToDelete ? accountToDelete.name : ''}</P>\n                    </ColumnBox>\n            </Dialog>\n            <H6 style={{marginBottom: getDimen('padding-xs')}}>Your Trading Accounts</H6>\n            {accounts.map((account) => (\n                <RowBox style={{alignItems: 'baseline'}} key={account.id}>\n                    <P style={{marginRight: getDimen('padding-sm')}}>{account.name}</P>\n                    <Button \n                        size='small' \n                        variant='outlined' \n                        onClick={() => {\n                            setAccountToDelete(account);\n                        }}>Remove Account</Button>\n                </RowBox>\n            ))}\n            <div style={{marginTop: getDimen('padding-xs')}}>\n                <NoOfAccountsLeftToAddStatus\n                    noOfAccounts={accounts.length}\n                    maxAccounts={maxNoOfAccounts}\n                    userCanAddAccount={userCanAddAccount} />\n                <AddAccountButton\n                    userCanAddAccount={userCanAddAccount}\n                    navigate={navigate} />\n            </div>\n        </ColumnBox>\n    )\n}\n\nconst defaultAccountData: AccountDataWithId = {\n    id: -1,\n    name: '',\n    trades: [],\n    deposits: [],\n    withdrawals: []\n}\n\nexport default AccountsSection","import Http from '@services/http'\nimport {HttpConst, RouteConst} from '@conf/const'\nimport {ToastFuncType} from '@components/toast/types'\n\n\n/**\n * @param Toast toast object to alert user of errors\n * @param navigate function used to navigate to another page after successful account deletion\n * @param thenFunc function to be executed after attempt to delete, whether it ends in success or error\n * @param followUpNo number of times request has been remade\n */\nconst cancelSubscription = (\n    Toast: ToastFuncType,\n    onSubscriptionCancel: Function,\n    thenFunc: Function,\n    followUpNo: number = 0\n) => {\n    const {BASE_URL, CANCEL_SUBSCRIPTION_URL} = HttpConst;\n    setTimeout(() => Http.get({\n        url: `${BASE_URL}/${CANCEL_SUBSCRIPTION_URL}/`,\n        successFunc: (resp: any) => {\n            if('detail' in resp.data){\n                if(resp.data['detail'] === 'not pending'){\n                    const {TRADER_APP_ROUTE} = RouteConst;\n                    onSubscriptionCancel();\n                    thenFunc();\n                } else {\n                    if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                        Toast.error('Sorry. Something went wrong.');\n                        thenFunc();\n                    } else {\n                        cancelSubscription(Toast, onSubscriptionCancel, thenFunc, followUpNo + 1);\n                    }\n                }\n            } else {\n                console.log('elseblock', resp.data);\n                Toast.error('Sorry. Something went wrong.');\n                thenFunc();\n            }\n        },\n        errorFunc: (error: any) => {\n            console.log('errfunc', error);\n            Toast.error('Sorry. Something went wrong.');\n            thenFunc();\n        },\n    }), firstRequest(followUpNo) ? 0 : TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST);\n}\n\nconst firstRequest = (followUpNo: number) => followUpNo === 0\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 120;\n\nexport default cancelSubscription","import {useContext, useState} from 'react'\nimport ReactGA from 'react-ga4'\nimport {UserData} from '@apps/trader-app/models/types'\nimport {ColumnBox, RowBox} from '@components/containers'\nimport {H6, P} from '@components/text'\nimport Dialog from '@components/dialog'\nimport {Button} from '@components/buttons'\nimport LoadingIcon from '@components/loading-icon'\nimport cancelSubscription from './cancel-subscription'\nimport {ToastContext} from '@components/toast'\nimport {useNavigate} from 'react-router-dom'\nimport {RouteConst} from '@conf/const'\nimport {SubscriptionCancelContext} from '@apps/trader-app'\n\n\nconst SubscriptionSection = ({subscriptionPlan, daysLeftBeforeFreeTrialExpires, userId}: {subscriptionPlan: UserData['subscription_plan'], daysLeftBeforeFreeTrialExpires: number | string, userId: number}) => {\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const [subscriptionIsCancelling, setSubscriptionIsCancelling] = useState(false);\n    const onSubscriptionCancel = useContext(SubscriptionCancelContext)\n    const Toast = useContext(ToastContext);\n    const navigate = useNavigate();\n    const format = (plan: UserData['subscription_plan']): string => {\n        switch(plan){\n            case 'none':\n                return 'None'\n            case 'monthly':\n                return 'Monthly'\n            case 'yearly':\n                return 'Yearly'\n        }\n    }\n    return(\n        <ColumnBox>\n            <Dialog\n                title='Cancel Subscription?'\n                okButtonColor='error'\n                okButtonContent={subscriptionIsCancelling ? <LoadingIcon /> : 'Cancel Subscription'}\n                okButtonProps={{'data-testid': 'confirm-delete-account-button'}}\n                onOkClick={() => {\n                    setSubscriptionIsCancelling(true);\n                    cancelSubscription(Toast, onSubscriptionCancel, () => {\n                        setDialogIsOpen(false);\n                        setSubscriptionIsCancelling(false)\n                    })\n                }}\n                onCancelClick={() => setDialogIsOpen(false)}\n                showCancelButton={!subscriptionIsCancelling}\n                onClose={() => {\n                    if(!subscriptionIsCancelling){\n                        setDialogIsOpen(false);\n                    }\n                }}\n                open={dialogIsOpen}>\n                    <P>Are you sure you want to unsubscribe?</P>\n            </Dialog>\n            <RowBox>\n                <H6>Subscription Plan: &nbsp;</H6>\n                <H6>{format(subscriptionPlan)}</H6>\n            </RowBox>\n            <RowBox>\n                {subscriptionPlan === 'none' ?\n                    <FreeTrialInfo navigate={navigate}\n                        userId={userId}\n                        daysLeftBeforeFreeTrialExpires={daysLeftBeforeFreeTrialExpires} />\n                    : <Button color='error' onClick={() => setDialogIsOpen(true)}>Cancel Subscription</Button>\n                }\n            </RowBox>\n        </ColumnBox>\n    )\n}\n\n\nconst FreeTrialInfo = ({daysLeftBeforeFreeTrialExpires, navigate, userId}: {daysLeftBeforeFreeTrialExpires: number | string, navigate: Function, userId: number}) => {\n    const {TRADER_APP_ROUTE, TRADER_SUBSCRIBE_NOW_ROUTE} = RouteConst;\n    if(typeof(daysLeftBeforeFreeTrialExpires) === 'string' && daysLeftBeforeFreeTrialExpires.includes('not started')){\n        return <P>Your free trial has not yet started</P>\n    }\n    if(daysLeftBeforeFreeTrialExpires !== 0){\n        return(\n            <P>You have {daysLeftBeforeFreeTrialExpires.toString()}&nbsp;\n                more days before your free trial expires</P>\n        )\n    } else {\n        return(\n            <ColumnBox>\n                <P>Your free trial has expired</P>\n                <Button onClick={() => {\n                    ReactGA.event('call_to_action_subscribe', {\n                        'user_id': userId\n                    })\n                    navigate(`/${TRADER_APP_ROUTE}/${TRADER_SUBSCRIBE_NOW_ROUTE}`);\n                }}>Subscribe</Button>\n            </ColumnBox>\n        )\n    }\n}\n\nexport default SubscriptionSection","import {useContext} from 'react'\nimport {H5} from '@components/text'\nimport {GlobalDataContext} from '@apps/trader-app'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport EmailSection from './email-section'\nimport ChangePasswordSection from './change-password-section'\nimport DeleteAccountSection from './delete-account'\nimport AccountsSection from './accounts-section'\nimport SubscriptionSection from './subscription-section'\nimport './style.css'\n\n\nconst Settings = ({removeAccountFromGlobalData}: {removeAccountFromGlobalData: Function}) => {\n    const globalData = useContext(GlobalDataContext);\n    return(\n        <PageContainer showDataStatusBar={false}>\n            <PageHeading heading='Settings' dontShowSelector={true} />\n            <div id='apps-trader-app-pages-settings-sections'>\n                <H5>Profile</H5>\n                <div>\n                    <EmailSection email={globalData.getUserEmail()} />\n                    <ChangePasswordSection />\n                    <DeleteAccountSection userId={globalData.getUserId()} />\n                </div>\n                <div>\n                    <H5>Accounts</H5>\n                    <AccountsSection\n                        userId={globalData.getUserId()}\n                        userIsOnFreeTrial={globalData.userIsOnFreeTrial()}\n                        userIsSubscribed={globalData.userIsSubscribed()}\n                        accounts={globalData.getAllAccounts()}\n                        removeAccountFromData={removeAccountFromGlobalData}\n                        />\n                </div>\n                <div>\n                    <H5>Subscription</H5>\n                    <SubscriptionSection \n                        subscriptionPlan={globalData.getUserSubscriptionPlan()}\n                        daysLeftBeforeFreeTrialExpires={globalData.getDaysLeftBeforeFreeTrialExpires()}\n                        userId={globalData.getUserId()} />\n                </div>\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Settings","import {useContext, useEffect, useState} from 'react'\nimport {useNavigate} from 'react-router'\nimport ReactGA from 'react-ga4'\nimport {Yup} from '@apps/info-app/components'\nimport {Button} from '@components/buttons'\nimport {getColor} from '@conf/utils'\nimport {FormMsg, HttpMsg} from '@services/generic-msg'\nimport {FileInput, SelectInput, TextInput, Form} from '@components/forms'\nimport LoadingIcon from '@components/loading-icon'\nimport {HttpResponseType} from '@services/http'\nimport {buildErrors, canSubmit as baseCanSubmit} from '@components/forms'\nimport {ConfigConst, RouteConst} from '@conf/const'\nimport {RawData} from '@apps/trader-app/models/types'\nimport {P, SBP} from '@components/text'\nimport {ColumnBox} from '@components/containers'\nimport {FormikErrors, FormikProps} from 'formik'\nimport {getDimen} from '@conf/utils'\nimport {AddAccountFormPropTypes} from './types'\nimport { PermissionsObj } from '@apps/trader-app/services/types'\nimport { FormUtils } from '@components/forms/types'\n\n/**\n */\n\nconst AddAccountForm = ({\n    submitValues, onAccountAdded, noOfAccounts, userIsOnFreeTrial, permissions\n}: AddAccountFormPropTypes) => {\n    const navigate = useNavigate();\n    const [brokerNotSupportedProcessNeeded, setBrokerNotSupportedProcessNeeded] = useState(false);\n    const formInitialValues: FormInitialValues = {\n        name: '',\n        login: '',\n        password: '',\n        server: '',\n        platform: platforms[0],\n        brokerInfo: null\n    }\n    return(\n        <Form\n            title='Add Account'\n            initialValues={formInitialValues}\n            validationSchema={Yup.object({\n                name: Yup.string()\n                    .required('Please enter the account name'),\n                login: Yup.number()\n                    .integer('Please enter a valid login number')\n                    .moreThan(0, 'Please enter a valid login number')\n                    .positive('Please enter a valid login number')\n                    .typeError('Please enter a valid login number')\n                    .required(FormMsg.fieldRequiredErr('login')),\n                password: Yup.string()\n                    .min(5, 'Please enter a valid investor password')\n                    .required(FormMsg.fieldRequiredErr('password')),\n                server: Yup.string()\n                    .test('notDemo', 'Account cannot be a demo account', (value?: string): boolean => {\n                        if(value?.toLowerCase().includes('demo')){\n                            //return false;\n                            return true;\n                        } else {\n                            return true;\n                        }\n                    })\n                    .required(FormMsg.fieldRequiredErr('server')),\n                platform: Yup.string()\n                    .required(FormMsg.fieldRequiredErr('years spent trading'))\n                    .oneOf(platforms),\n                brokerInfo: Yup.mixed()\n                    .test('fileUploaded', 'The file is required', (value) => {\n                        if(!value && brokerNotSupportedProcessNeeded){\n                            return false;\n                        }\n                        return true;\n                    })\n                    .test('fileSize', 'The file is too big', (value) => {\n                        console.log('validSize', value);\n                        if(brokerNotSupportedProcessNeeded){\n                            if(value && value.size >= 500000){\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n                    .test('correctBrokerInfoFileMt4',\n                        'Should be a .srv file for mt4. Change mt version to 5 to upload .dat file',\n                        (value, context) => {\n                        if(brokerNotSupportedProcessNeeded){\n                            if(value && value.name.endsWith('.dat') && context.parent.platform === 'mt4'){\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n                    .test('correctBrokerInfoFileMt5',\n                        'Should be a .dat file for mt5. Change mt version to 4 to upload .srv file',\n                        (value, context) => {\n                        if(brokerNotSupportedProcessNeeded){\n                            if(value && value.name.endsWith('.srv') && context.parent.platform === 'mt5'){\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n                    .test('validSrvFile',\n                        'Should be a .srv file',\n                        (value, context) => {\n                        if(brokerNotSupportedProcessNeeded){\n                            if(value && !value.name.endsWith('.srv') && context.parent.platform === 'mt4'){\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n                    .test('validDatFile',\n                        'Should be a .dat file',\n                        (value, context) => {\n                        if(brokerNotSupportedProcessNeeded){\n                            if(value && !value.name.endsWith('.dat') && context.parent.platform === 'mt5'){\n                                return false;\n                            }\n                        }\n                        return true;\n                    })\n            })}\n            onSubmit={({values, setErrors, setSubmitting, setSuccessMsg, setNonFieldError, setInfoMsg}) => {\n                if(userIsOnFreeTrial){\n                    if(noOfAccounts >= ConfigConst.MAX_NO_OF_TRADING_ACCOUNT_FREE_TRIAL_TRADER){\n                        setNonFieldError('You have reached the maximum number of accounts you can add.');\n                        setSubmitting(false);\n                        return;\n                    }\n                } else {\n                    if(noOfAccounts >= ConfigConst.MAX_NO_OF_TRADING_ACCOUNT_SUBSCRIBED_TRADER){\n                        setNonFieldError('You have reached the maximum number of accounts you can add.');\n                        setSubmitting(false);\n                        return;\n                    }\n                }\n                setNonFieldError('');\n                setInfoMsg('Please wait. This could take several minutes.');\n                let processedValues;\n                if(!values.brokerInfo){\n                    processedValues = Promise.resolve(values);\n                } else {\n                    const fileName = values.brokerInfo.name;\n                    processedValues = toBase64(values.brokerInfo)\n                        .then((brokerInfo) => {\n                            return Promise.resolve({\n                                ...values,\n                                brokerInfoContent: brokerInfo,\n                                brokerInfoName: fileName\n                            })\n                        })\n                        .catch((err) => {\n                            console.log(err);\n                            setInfoMsg('');\n                            setSubmitting(false);\n                            setNonFieldError('Sorry. An unexpected error occured.');\n                        })\n                }\n                processedValues.then((values) => {\n                    console.log(values);\n                    submitValues({\n                        values,\n                        successFunc: submitValuesSuccessFunc(setNonFieldError, onAccountAdded, navigate),\n                        errorFunc: submitValuesErrorFunc(\n                            setBrokerNotSupportedProcessNeeded,\n                            setErrors, setNonFieldError, setSuccessMsg\n                        ),\n                        thenFunc: () => {\n                            setSubmitting(false);\n                            setInfoMsg('');\n                        }\n                    })\n                })\n            }}\n            underTitleComponent={(() => {\n                console.log('In add account form', permissions);\n                if(!permissions.canAddAccount){\n                    return(\n                        <P style={{textAlign: 'center', marginBottom: getDimen('padding-xs')}}>\n                            You cannot add any accounts\n                        </P>\n                    )\n                }\n            })()}>\n        {({values, errors, isSubmitting, submitForm}: FormUtils) => {\n            return (\n            <>\n                <TextInput name='name' placeholder='Account Name' data-testid='name' />\n                <TextInput name='login' placeholder='Login' data-testid='login' />\n                <TextInput name='password' placeholder='Investor Password' type='password' \n                    data-testid='password' />\n                <TextInput name='server' placeholder='Server' data-testid='server' />\n                <SelectInput name='platform' data-testid='platform'\n                    placeholder='MetaTrader Platform Version'\n                    options={platforms} />\n                <ColumnBox style={{display: brokerNotSupportedProcessNeeded ? 'inline' : 'none'}}>\n                    <P>\n                        File: {values.brokerInfo && values.brokerInfo.name && values.brokerInfo.name.length \n                                ? values.brokerInfo.name : 'None'}\n                    </P>\n                    <FileInput name='brokerInfo' data-testid='broker-info'\n                        placeholder={\n                            values.brokerInfo && values.brokerInfo.name && values.brokerInfo.name.length ?\n                            'Change Broker Info' : 'Upload Broker Info'\n                        }\n                        accept='.srv, .dat'/> \n                    <SBP style={{color: getColor('primary-blue'), marginTop: getDimen('padding-xs'),\n                        marginBottom: getDimen('padding-xs')}}>\n                        {values.platform === 'mt4' ? \n                            'Your broker .srv file (mt4)'\n                            : 'Your server .dat file (mt5)'}\n                    </SBP>\n                </ColumnBox>\n                <Button\n                    data-testid='submit-button'\n                    onClick={canSubmit(errors, values, permissions) ? () => submitForm() : () => {}}\n                    disabled={!canSubmit(errors, values, permissions)}>\n                {isSubmitting ?\n                    <LoadingIcon\n                        color={getColor('white')} \n                        style={{padding: '3px'}} />\n                    : 'Add Account'\n                }\n                </Button>\n            </>\n            )}}\n        </Form>\n    )\n}\n\nconst canSubmit = (\n    errors: FormikErrors<any>,\n    values: {[key: string]: any},\n    permissions: PermissionsObj\n): boolean => {\n    return permissions.canAddAccount && baseCanSubmit(errors, values)\n}\n\nconst submitValuesSuccessFunc = (setNonFieldError: Function, onAccountAdded: Function, navigate: Function) => {\n    return (data: RawData) => {\n        setNonFieldError('');\n        ReactGA.event('add_account', {\n            method: 'site '\n        });\n        //ReactGA.\n        onAccountAdded(data);\n        navigate(`/${RouteConst.TRADER_APP_ROUTE}/`);\n    }\n}\n\nconst submitValuesErrorFunc = (setBrokerNotSupportedProcessNeeded: Function, \n    setErrors: Function, setNonFieldError: Function, setSuccessMsg: Function) => {\n    return (err: any) => {\n        try {\n            const errors: {[key: string]: string} = buildErrors(err.response.data, {\n                login: 'login',\n                server: 'server',\n                password: 'password',\n                platform: 'platform'\n            });\n            if(errors['non_field_errors']){\n                if(errors['non_field_errors'].includes('unknown error')){\n                    const unknownErrorMsg = 'An error occured. ' +\n                        'Please, ensure the details you entered are precisely ' +\n                        'correct and try again. If this error persists, please ' +\n                        'contact support.';\n                    errors['non_field_errors'] = unknownErrorMsg;\n                }\n            }\n            if('server' in errors){\n                if(errors['server'].includes('not supported')){\n                    errors['server'] = '';\n                    const serverErrorMsg = 'Unable to perform automatic broker detection. ' +\n                        'Please upload your broker .srv file (mt4) or servers .dat file ' +\n                        '(mt5) in the last field.';\n                    if(errors['non_field_errors'] && errors['non_field_errors'].length){\n                        errors['non_field_errors'] += `\\n${serverErrorMsg}`;\n                    } else {\n                        errors['non_field_errors'] = serverErrorMsg;\n                    }\n                    setBrokerNotSupportedProcessNeeded(true);\n                }\n            }\n            setErrors(errors);\n            if(errors['non_field_errors']){\n                setNonFieldError(errors['non_field_errors'])\n            }\n            setSuccessMsg('')\n        } catch(err){\n            console.log(err);\n            setNonFieldError(\n                'An error occured. ' +\n                'Please check your credentials and ' +\n                'make sure they are precisely correct. ' +\n                'If this error persists, please contact support.'\n            );\n        }\n    }\n}\n\nconst toBase64 = (file: File) => {\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.readAsDataURL(file);\n        fileReader.onload = () => {\n            let result = fileReader.result;\n            if(typeof(result) === 'string'){\n                const THE_DATA = 1;\n                result = result.split('data:application/octet-stream;base64,')[THE_DATA];\n            }\n            resolve(result);\n        }\n        fileReader.onerror = (err: any) => {\n            reject(err);\n        }\n    })\n}\n\nconst platforms: ['mt4', 'mt5'] = [\n    'mt4',\n    'mt5'\n];\n\ntype FormInitialValues = {\n\n    name: string,\n    login: string,\n    password: string,\n    server: string,\n    platform: 'mt4' | 'mt5',\n    brokerInfo: File | null\n}\n\nexport default AddAccountForm","import {useContext} from 'react'\nimport ReactGA from 'react-ga4'\nimport {CenterColumnBox} from '@components/containers'\nimport {HttpConst} from '@conf/const'\nimport Http, {HttpErrorType, HttpResponseType} from '@services/http'\nimport {getDimen} from '@conf/utils'\nimport {ToastContext} from '@components/toast'\nimport AddAccountForm from './add-account-form'\nimport {SubmitValuesTypes, AddAccountPropTypes} from './types'\nimport {PermissionsContext} from '@apps/trader-app'\nimport {GlobalData} from '@apps/trader-app/models'\n\n\nconst AddAccount = ({onAccountAdded, noOfAccounts, userIsOnFreeTrial, userId}: AddAccountPropTypes) => {\n    const permissions = useContext(PermissionsContext)\n    const Toast = useContext(ToastContext);\n    /** The function used by the form to submit values\n     * @param config: object used to configure the Http client\n     */\n    const submitValues = (config: SubmitValuesTypes) => {\n        const {BASE_URL, ADD_TRADING_ACCOUNT_URL} = HttpConst;\n        ReactGA.event('add_account_attempt', {\n            'user_id': userId\n        });\n        let successFunc = (resp: HttpResponseType) => {\n            ReactGA.event('add_account_success', {\n                'user_id': userId\n            })\n            config.successFunc();\n        };\n        let errorFunc = (err: HttpErrorType) => {\n            ReactGA.event('add_account_fail', {\n                'user_id': userId\n            });\n            config.errorFunc();\n        };\n        Http.post({\n            url: `${BASE_URL}/${ADD_TRADING_ACCOUNT_URL}/`,\n            data: config.values,\n            successFunc: (resp: any) => makeFollowUpRequests(\n                config.values,\n                successFunc,\n                errorFunc,\n                config.thenFunc\n            ),\n            errorFunc: (resp: HttpErrorType) => {\n                ReactGA.event('add_account_fail', {\n                    'user_id': userId\n                });\n                config.errorFunc(resp);\n                config.thenFunc();\n            }\n        });\n    }\n    const makeFollowUpRequests = (\n        values: SubmitValuesTypes['values'],\n        successFunc: SubmitValuesTypes['successFunc'],\n        errorFunc: SubmitValuesTypes['errorFunc'],\n        thenFunc: SubmitValuesTypes['thenFunc'],\n        followUpNo: number = 1\n    ) => {\n        const {BASE_URL, PENDING_ADD_TRADING_ACCOUNT_URL} = HttpConst;\n        setTimeout(() => Http.post({\n            url: `${BASE_URL}/${PENDING_ADD_TRADING_ACCOUNT_URL}/`,\n            data: values,\n            successFunc: (resp: HttpResponseType) => {\n                const data = resp.data;\n                if(data['detail']){\n                    if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                        Toast.error('Sorry. This is taking longer than expected. Please try again later.');\n                    } else {\n                        makeFollowUpRequests(values, successFunc, errorFunc, thenFunc, followUpNo + 1);\n                    }\n                } else {\n                    successFunc(resp.data);\n                    thenFunc();\n                }\n            },\n            networkErrorFunc: (err: HttpErrorType) => {\n                ReactGA.event('add_account_fail', {\n                    'user_id': userId\n                });\n            },\n            timeoutErrorFunc: (err: HttpErrorType) => {\n                ReactGA.event('add_account_fail', {\n                    'user_id': userId\n                });\n            },\n            errorFunc: (resp: HttpErrorType) => {\n                errorFunc(resp);\n                thenFunc();\n            }\n        }), TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST)\n    }\n    return(\n        <CenterColumnBox style={{marginTop: getDimen('padding-big')}}>\n            <AddAccountForm\n                submitValues={submitValues}\n                onAccountAdded={onAccountAdded}\n                noOfAccounts={noOfAccounts}\n                userIsOnFreeTrial={userIsOnFreeTrial}\n                permissions={permissions} />\n        </CenterColumnBox>\n    )\n}\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 180;\n\nexport default AddAccount","import {FlutterWaveTypes} from 'flutterwave-react-v3'\nimport {Http, HttpResponseType, HttpErrorType} from '@apps/trader-app/services'\nimport {HttpConst} from '@conf/const'\n\nconst saveSubscriptionStatus = (resp: FlutterWaveTypes.FlutterWaveResponse): Promise<boolean> => {\n    return new Promise((resolve, reject) => {\n        Http.post({\n            url: `${BASE_URL}/${RECORD_NEW_SUBSCRIPTION_URL}/`,\n            data: {amount: resp.amount},\n            successFunc: (resp: HttpResponseType) => {\n                if(resp.data['status'] === 'pending'){\n                    resolve(true);\n                } else {\n                    resolve(false);\n                }\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log(err);\n                reject();\n            }\n        })\n        \n    })\n}\n\nconst {BASE_URL, RECORD_NEW_SUBSCRIPTION_URL} = HttpConst;\n\nexport default saveSubscriptionStatus","import React from 'react'\nimport ReactGA from 'react-ga4'\nimport {useFlutterwave, closePaymentModal, FlutterWaveTypes} from 'flutterwave-react-v3'\nimport saveSubscriptionStatus from './save-subscription-status'\nimport {BaseSubscriptionButtonPropTypes} from './types'\n\nconst BaseSubscriptionButton = React.forwardRef<HTMLButtonElement, BaseSubscriptionButtonPropTypes>((props, ref) => {\n    const {config, abortSubscription, onSubscriptionFinished, onSubscriptionRecordFailed, userId} = props;\n    const handleFlutterPayment = useFlutterwave(config);\n    return(\n        <button style={{display: 'none'}}\n            ref={ref}\n            onClick={(e) => {\n                handleFlutterPayment({\n                    callback: (resp: FlutterWaveTypes.FlutterWaveResponse) => {\n                        console.log('in callback', resp);\n                        saveSubscriptionStatus(resp)\n                            .then((postActionsPending: boolean) => {\n                                ReactGA.event('subscribe_success', {\n                                    'user_id': userId\n                                });\n                                onSubscriptionFinished(postActionsPending, {amount: resp.amount})\n                            })\n                            .catch((err) => {\n                                console.log(err);\n                                ReactGA.event('subscribe_fail', {\n                                    'user_id': userId\n                                });\n                                onSubscriptionRecordFailed();\n                            })\n                        closePaymentModal();\n                    },\n                    onClose: () => {\n                        ReactGA.event('subscribe_abort', {\n                            'user_id': userId\n                        })\n                        abortSubscription();\n                    }\n                })\n            }}></button>\n    )\n})\n\nexport default BaseSubscriptionButton","import React from 'react'\nimport logo from '@visuals/images/logo.png'\nimport {HttpConst} from '@conf/const'\nimport {SubscriptionButtonPropTypes} from './types'\nimport BaseSubscriptionButton from './base-subscription-button'\nimport {MONTHLY_SUBSCRIPTION_PRICE} from './const'\n\n\nconst MonthlySubscriptionButton = React.forwardRef<HTMLButtonElement, SubscriptionButtonPropTypes>((props, ref) => {\n    const {email, userId, ...others} = props;\n    const config = {\n        public_key: 'FLWPUBK_TEST-abbddb271c00020e17219254c27054e5-X',\n        payment_plan: '25045',\n        tx_ref: `user-${userId}-date-${Date.now().toString()}`,\n        amount: MONTHLY_SUBSCRIPTION_PRICE,\n        currency: 'USD',\n        payment_options: 'card',\n        customer: {\n            email,\n            name: '',\n            phonenumber: ''\n        },\n        text: '',\n        customizations: {\n            title: 'MyFxTracker-Monthly',\n            description: '',\n            logo: `${HttpConst.BASE_URL}${logo}`\n        }\n    };\n    \n    return(\n        <BaseSubscriptionButton config={config} ref={ref} userId={userId} {...others} />\n    )\n})\n\nexport default MonthlySubscriptionButton","const MONTHLY_SUBSCRIPTION_PRICE = 29.95\nconst YEARLY_SUBSCRIPTION_PRICE = 299.40\n\nexport {\n    MONTHLY_SUBSCRIPTION_PRICE,\n    YEARLY_SUBSCRIPTION_PRICE\n}","import React from 'react'\nimport logo from '@visuals/images/logo.png'\nimport {HttpConst} from '@conf/const'\nimport {SubscriptionButtonPropTypes} from './types'\nimport BaseSubscriptionButton from './base-subscription-button'\nimport {YEARLY_SUBSCRIPTION_PRICE} from './const'\n\n\nconst YearlySubscriptionButton = React.forwardRef<HTMLButtonElement, SubscriptionButtonPropTypes>((props, ref) => {\n    const {email, userId, ...others} = props;\n    const config = {\n        public_key: 'FLWPUBK_TEST-abbddb271c00020e17219254c27054e5-X',\n        payment_plan: '25045',\n        tx_ref: `user-${userId}-date-${Date.now().toString()}`,\n        amount: YEARLY_SUBSCRIPTION_PRICE,\n        currency: 'USD',\n        payment_options: 'card',\n        customer: {\n            email,\n            name: '',\n            phonenumber: ''\n        },\n        text: '',\n        customizations: {\n            title: 'MyFxTracker-Yearly',\n            description: '',\n            logo: `${HttpConst.BASE_URL}${logo}`\n        }\n    };\n    return(\n        <BaseSubscriptionButton config={config} ref={ref} userId={userId} {...others} />\n    )\n})\n\nexport default YearlySubscriptionButton","import {SubscribeNowPropTypes} from './types'\nimport {getDimen} from '@conf/utils'\nimport React, {useContext, useRef, useState} from 'react'\nimport ReactGA from 'react-ga4'\nimport LoadingIcon from '@components/loading-icon'\nimport MonthlySubscriptionButton from './monthly-subscription-button'\nimport YearlySubscriptionButton from './yearly-subscription-button'\nimport {NewSubscriptionContext} from '@apps/trader-app'\nimport {ToastContext} from '@components/toast'\nimport {YEARLY_SUBSCRIPTION_PRICE} from './const'\nimport {UserData} from '@apps/trader-app/models/types'\nimport {PricingPage} from '@apps/info-app/pages'\nimport './style.css'\n\n\nconst SubscribeNow = ({userHasPaidOnce, email, userId}: SubscribeNowPropTypes) => {\n    const [subscribing, setSubscribing] = useState('');\n    const onNewSubscription = useContext(NewSubscriptionContext);\n    const Toast = useContext(ToastContext)\n    const monthlySubscriptionTrigger = React.createRef<HTMLButtonElement>();\n    const yearlySubscriptionTrigger = React.createRef<HTMLButtonElement>();\n    const subscriptionIsOngoing = () => {\n        return subscribing.length !== 0\n    }\n    const abortSubscription = () => {\n        setSubscribing('');\n    }\n    /**\n     * @param postActionsPending this is set when the record subscription response returns a \n     * successful pending response because of some actions that the backend needed to take after\n     * recording the user as subscribed (such as reconnecting the user's trading account).\n     * In such a scenario the page loading page must be shown and user has to be alerted that\n     * this could take a while\n     */\n    const onSubscriptionFinished = (postActionsPending: boolean, data: {[key: string]: any}) => {\n        let subscriptionPlan: UserData['subscription_plan'] = 'monthly';\n        if(data.amount === YEARLY_SUBSCRIPTION_PRICE){\n            subscriptionPlan = 'yearly';\n        }\n        onNewSubscription(postActionsPending, data, subscriptionPlan);\n    }\n    const onSubscriptionRecordFailed = () => {\n        setSubscribing('none')\n        Toast.error('Your subscription was successful, but something went wrong on our end. Please contact support.');\n    }\n    return(\n        <>\n            <PricingPage navbar={null} \n                subscribeContent={{\n                    monthly: subscribing.toLowerCase() === 'monthly' ?\n                        <LoadingIcon />\n                        : 'Subscribe Now',\n                    yearly: subscribing.toLowerCase() === 'yearly' ?\n                        <LoadingIcon />\n                        :'Subscribe Now'\n                }}\n                subscribeEnabled={{\n                    monthly: (subscriptionIsOngoing() && subscribing.toLowerCase()) === 'monthly' ||\n                        !subscriptionIsOngoing(),\n                    yearly: (subscriptionIsOngoing() && subscribing.toLowerCase()) === 'yearly' ||\n                        !subscriptionIsOngoing()\n                }}\n                subscribeAction={{\n                    monthly: () => {\n                        setSubscribing('Monthly');\n                        ReactGA.event('subscribe_attempt', {\n                            'user_id': userId,\n                            'pricing_plan': 'monthly'\n                        });\n                        if(monthlySubscriptionTrigger && monthlySubscriptionTrigger.current){\n                            monthlySubscriptionTrigger.current.click();\n                        }\n                    },\n                    yearly: () => {\n                        ReactGA.event('subscribe_attempt', {\n                            'user_id': userId,\n                            'pricing_plan': 'yearly'\n                        });\n                        setSubscribing('Yearly');\n                        if(yearlySubscriptionTrigger && yearlySubscriptionTrigger.current){\n                            yearlySubscriptionTrigger.current.click();\n                        }\n                    }\n                }}\n                style={{\n                    marginTop: getDimen('padding-md'),\n                    marginLeft: getDimen('padding-xs'),\n                    marginRight: getDimen('padding-xs')\n                }} />\n            <MonthlySubscriptionButton email={email}\n                ref={monthlySubscriptionTrigger} userId={userId}\n                abortSubscription={abortSubscription} onSubscriptionFinished={onSubscriptionFinished}\n                onSubscriptionRecordFailed={onSubscriptionRecordFailed} />\n            <YearlySubscriptionButton email={email} ref={yearlySubscriptionTrigger}\n                    userId={userId} abortSubscription={abortSubscription}\n                    onSubscriptionFinished={onSubscriptionFinished}\n                    onSubscriptionRecordFailed={onSubscriptionRecordFailed} />\n        </>\n    )\n}\n\nexport default SubscribeNow","const cloneObject = (obj: Object) => {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nexport {\n    cloneObject\n}","/**\n * A class to represent the global data from the backend\n * \n * Format of global data from backend:\n * The index of the trades, withdrawals and deposits arrays in data corresponds to the index of the account\n * it is associated with in the accounts array\n * user_data: {\n *   id: id of current user,\n *   email: email-of-current-user,\n *   is_subscribed: subscription-status-of-current-user,\n *   on_free: true or false, whether or not user is still using free version,\n *   logins_after_ask: number of times user logged in after last feedback popup question,\n *   current_feedback_question: index of the current feedback question\n * },\n * trade_data: {\n *        'no_of_trades': total number of trades the user has added\n *        'current_account_id': id-of-currently-selected-account,\n *        'accounts': {\n *            'Account id': {\n *                    'name': 'Name of the account',\n *                    'trades': [trades],\n *                    'deposits': [deposits],\n *                    'withdrawals': [withdrawals]\n *            },\n *            ...\n *        }\n *    }\n*/\n\nimport {AccountData} from 'calculator/dist'\nimport {RawData, UserData} from './types'\nimport {cloneObject} from './utils'\n\nclass GlobalData {\n    rawData: RawData;\n    constructor(rawData: RawData | null){\n        if(rawData === null){\n            this.rawData = initialEmptyRawData;\n        } else {\n            this.rawData = rawData\n        }\n        this.hasLoaded = this.hasLoaded.bind(this);\n        this.getCurrentTradeAccountData = this.getCurrentTradeAccountData.bind(this);\n        this.getCurrentTradeAccountId = this.getCurrentTradeAccountId.bind(this);\n        this.getCurrentTradeAccountName = this.getCurrentTradeAccountName.bind(this);\n        this.getTradeAccountNames = this.getTradeAccountNames.bind(this);\n        this.changeCurrentTradeAccountId = this.changeCurrentTradeAccountId.bind(this);\n        this.getTradeAccountIdOf = this.getTradeAccountIdOf.bind(this);\n        this.getUserEmail = this.getUserEmail.bind(this);\n        this.userIsSubscribed = this.userIsSubscribed.bind(this);\n        this.userIsOnFreeTrial = this.userIsOnFreeTrial.bind(this);\n        this.numberOfAccounts = this.numberOfAccounts.bind(this);\n        this.getUserId = this.getUserId.bind(this);\n        this.getAllAccounts = this.getAllAccounts.bind(this);\n        this.getTradeAccountIdOf = this.getTradeAccountIdOf.bind(this);\n        this.removeAccount = this.removeAccount.bind(this);\n        this.lastDataRefreshTime = this.lastDataRefreshTime.bind(this);\n        this.subscribeUser = this.subscribeUser.bind(this);\n        this.unsubscribeUser = this.unsubscribeUser.bind(this);\n    }\n    /** Has the data from the backend loaded */\n    hasLoaded(): boolean {\n        /** A real user id is always a positive number an never negative */\n        return this.rawData.user_data.id !== -1\n    }\n    /** What is the id of the currently selected trading account */\n    getCurrentTradeAccountId(): number {\n        let accountId = this.rawData.trade_data.current_account_id;\n        if(accountId === -1){\n            return parseInt(Object.keys(this.rawData.trade_data.accounts)[0]);\n        }\n        return accountId;\n    }\n    /** What is the account name of the currently selected trading account */\n    getCurrentTradeAccountName(): string {\n        if(this.hasLoaded()){\n            let accountId = this.getCurrentTradeAccountId();\n            return this.rawData.trade_data.accounts[accountId].name;\n        } else {\n            return 'None';\n        }\n    }\n    /** What are the names of all the trading accounts */\n    getTradeAccountNames(): string[] {\n        const accountIds = Object.keys(this.rawData.trade_data.accounts);\n        if(accountIds.length === 0){\n            /** Just so the account selector will have something to show */\n            return ['None'];\n        }\n        let accountNames: string[] = [];\n        accountIds.forEach((accountId: string) => {\n            accountNames.push(this.rawData.trade_data.accounts[parseInt(accountId)].name);\n        });\n        return accountNames\n    }\n    /** Change the currently selected trading account id to @param newCurrentAccountId */\n    changeCurrentTradeAccountId(newCurrentAccountId: number): GlobalData{\n        const rawDataClone = cloneObject(this.rawData);\n        rawDataClone.trade_data.current_account_id = newCurrentAccountId;\n        return new GlobalData(rawDataClone);\n    }\n    /** Returns an object of all data related to the currently selected account */\n    getCurrentTradeAccountData(): AccountData{\n        const currentAccountId = this.getCurrentTradeAccountId();\n        return this.rawData.trade_data.accounts[currentAccountId];\n    }\n    /** Given the account name @param accountName, return the associated id */\n    getTradeAccountIdOf(accountName: string): number {\n        const accountIds = Object.keys(this.rawData.trade_data.accounts);\n        for(const accountId of accountIds){\n            const account = this.rawData.trade_data.accounts[parseInt(accountId)];\n            if(account.name === accountName){\n                return parseInt(accountId);\n            }\n        }\n        /** The fact that this function is called means the id can never be -1\n         * But this line is here just to satisfy the typescript compiler\n         */\n        return -1;\n    }\n    /** Get number of accounts */\n    numberOfAccounts(): number {\n        return Object.keys(this.rawData.trade_data.accounts).length\n    }\n    /** Get all accounts as an array of objects */\n    getAllAccounts(): (AccountData & {id: number})[] {\n        const accountIds = Object.keys(this.rawData.trade_data.accounts);\n        return accountIds.map((accountId: any) => ({\n            id: accountId as number, ...this.rawData.trade_data.accounts[accountId as number]\n        }));\n    }\n    /** \n     * Remove account with an id of @param id \n     * and return a new updated GlobalData object\n     * */\n    removeAccount(id: number): GlobalData {\n        const newAccounts = Object.keys(this.rawData.trade_data.accounts)\n            .filter((accountId) => accountId != id.toString())\n            .map((accountId) => ({\n                ...this.rawData.trade_data.accounts[parseInt(accountId)]\n            }));\n        const newRawData: RawData = cloneObject(this.rawData);\n        newRawData.trade_data.accounts = newAccounts;\n        if(newRawData.trade_data.current_account_id === id){\n            newRawData.trade_data.current_account_id = -1;\n        }\n        const newGlobalData = new GlobalData(newRawData);\n        return newGlobalData;\n    }\n    /** Set the user's is subscribed field to true */\n    subscribeUser(subscriptionPlan: UserData['subscription_plan']): GlobalData {\n        const rawDataClone: RawData = cloneObject(this.rawData);\n        rawDataClone.user_data.is_subscribed = true;\n        rawDataClone.user_data.has_paid = true;\n        rawDataClone.user_data.subscription_plan = subscriptionPlan;\n        return new GlobalData(rawDataClone);\n    }\n    /** Set the user's is subscribed field to false */\n    unsubscribeUser(): GlobalData {\n        const rawDataClone: RawData = cloneObject(this.rawData);\n        rawDataClone.user_data.is_subscribed = false;\n        rawDataClone.user_data.subscription_plan = 'none';\n        return new GlobalData(rawDataClone);\n    }\n    /** Are there any accounts? */\n    noAccounts(): boolean {\n        return this.numberOfAccounts() === 0;\n    }\n    lastDataRefreshTime(): Date {\n        return new Date(this.rawData.trade_data.last_data_refresh_time);\n    }\n    getUserId(): number {\n        return this.rawData.user_data.id\n    }\n    getUserEmail(): string {\n        return this.rawData.user_data.email\n    }\n    getUserDsUsername(): string {\n        return this.rawData.user_data.ds_username;\n    }\n    getUserSubscriptionPlan(): UserData['subscription_plan'] {\n        return this.rawData.user_data.subscription_plan\n    }\n    getDaysLeftBeforeFreeTrialExpires(): number | string {\n        return this.rawData.user_data.days_left_before_free_trial_expires\n    }\n    userIsSubscribed(): boolean {\n        return this.rawData.user_data.is_subscribed\n    }\n    userIsOnFreeTrial(): boolean {\n        return this.rawData.user_data.on_free\n    }\n    userHasPaid(): boolean {\n        const hasPaid = this.rawData.user_data.has_paid;\n        return hasPaid !== undefined && hasPaid\n    }\n}\n\nconst initialEmptyRawData: RawData = {\n    user_data: {\n        id: -1,\n        email: '',\n        ds_username: '',\n        is_subscribed: false,\n        on_free: false,\n        logins_after_ask: -1,\n        current_feedback_question: -1,\n        subscription_plan: 'none',\n        days_left_before_free_trial_expires: 7\n    },\n    trade_data: {\n        current_account_id: -1,\n        last_data_refresh_time: new Date(1900, 0, 1),\n        accounts: {}\n    }\n};\n\nexport default GlobalData","import {GlobalData} from '../models'\nimport {PermissionsObj, PermissionFuncs} from './types'\n\n/**\n * Couldn't use anonymous functions here because the name properties are needed\n */\n\nfunction canAddAccount(globalData: GlobalData): boolean {\n    console.log('In permissions func: (isSubscribed: ',\n        globalData.userIsSubscribed(),\n        ', onFreeTrial: ',\n        globalData.userIsOnFreeTrial(),\n        ')'\n    );\n    if(globalData.userIsSubscribed() || globalData.userIsOnFreeTrial()){\n        return true;\n    }\n    return false;\n}\n\nfunction canRefreshAccount(globalData: GlobalData): boolean {\n    return canAddAccount(globalData);\n}\n\nfunction canCreateNote(globalData: GlobalData): boolean {\n    return canAddAccount(globalData);\n}\n\nfunction canModifyNotes(globalData: GlobalData): boolean {\n    return canAddAccount(globalData);\n}\n\nconst defaultPermissions: PermissionsObj = {\n    canAddAccount: false,\n    canRefreshAccount: false,\n    canCreateNote: false,\n    canModifyNotes: false\n}\n\nconst permissionFuncs: PermissionFuncs = {\n    'canAddAccount': canAddAccount,\n    'canRefreshAccount': canRefreshAccount,\n    'canCreateNote': canCreateNote,\n    'canModifyNotes': canModifyNotes\n}\n\nexport default permissionFuncs\nexport {\n    defaultPermissions\n}","/**\n * Hook to set global data in TraderApp\n */\n\nimport {useState, useEffect, useContext} from 'react'\nimport {GlobalData} from '@apps/trader-app/models'\nimport {Http, HttpErrorType, HttpResponseType} from '@apps/trader-app/services'\nimport {HttpConst} from '@conf/const'\nimport {RawData, UseGlobalDataType} from './types'\nimport {AccountData} from 'calculator/dist'\nimport permissionFuncs, {defaultPermissions} from '../services/permissions'\nimport {PermissionsObj} from '../services/types'\nimport {ToastContext} from '@components/toast'\n\n\nconst useGlobalData: UseGlobalDataType = () => {\n    const [globalData, baseSetGlobalData] = useState<GlobalData>(new GlobalData(null));\n    const [permissions, setPermissions] = useState<PermissionsObj>(defaultPermissions);\n    const Toast = useContext(ToastContext);\n    useEffect(() => {\n        /* The real thing to be used.\n            Going to use dummy data just for development*/\n        // Request init data from backend\n        const {BASE_URL, GET_INIT_DATA_URL} = HttpConst;\n        Http.get({\n            url: `${BASE_URL}/${GET_INIT_DATA_URL}/`,\n            successFunc: (resp: HttpResponseType) => {\n                setGlobalData(new GlobalData(resp.data));\n            },\n            errorFunc: (err: HttpErrorType) => {\n                Toast.error('Sorry. Something went wrong');\n                console.log(err);\n            }\n        })\n    }, [])\n    const createPermissions = (globalData: GlobalData) => {\n        console.log('building permissions');\n        let permissions: PermissionsObj = {...defaultPermissions};\n        Object.keys(permissionFuncs).forEach((funcName: string) => {\n            permissions[funcName as keyof(PermissionsObj)] = permissionFuncs[funcName](globalData);\n        })\n        console.log('built permissions', permissions);\n        return permissions;\n    }\n    const setGlobalData = (arg: GlobalData) => {\n        baseSetGlobalData(arg);\n        setPermissions(createPermissions(arg));\n    }\n    return [globalData, setGlobalData, permissions];\n}\n\nconst noAccountsRawData  = {\n    user_data: {\n        id: 1,\n        email: 'newuser@email.com',\n        ds_username: 'dsusername',\n        is_subscribed: false,\n        subscription_plan: 'none',\n        on_free: true,\n        logins_after_ask: 2,\n        current_feedback_question: 1,\n        days_left_before_free_trial_expires: 3\n    },\n    trade_data: {\n        no_of_trades: 0,\n        current_account_id: -1,\n        last_data_refresh_time: new Date(2022, 10, 11),\n        accounts: {}\n    }\n}\n\nconst someAccounts: {[key: string]: AccountData} = {\n    2: {\n        name: 'kot-demo',\n        trades: [\n            {\n                pair: 'USDGPY',\n                action: 'buy',\n                openTime: '2021-03-21 12:30:00+00:00',\n                closeTime: '2021-06-01 12:30:00+00:00',\n                profitLoss: 320,\n                pips: 3,\n                takeProfit: 20,\n                stopLoss: 13,\n                openPrice: 0,\n                closePrice: 9\n            }\n        ],\n        deposits: [\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-30 12:30:00+00:00'\n            },\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-30 12:30:00+00:00'\n            }\n        ],\n        withdrawals: [\n            {\n                account: 2,\n                amount: 20, \n                time: '2021-02-30 12:30:00+00:00'\n            },\n            {\n                account: 2,\n                amount: 50, \n                time: '2021-02-30 12:30:00+00:00'\n            }\n        ]\n    },\n    4: {\n        name: 'kot-live',\n        trades: [\n            {\n                pair: 'USDGPY',\n                action: 'buy',\n                openTime: '2021-12-03 12:30:00+00:00',\n                closeTime: '2022-05-02 12:30:00+00:00',\n                profitLoss: 320,\n                pips: 3,\n                takeProfit: 2,\n                stopLoss: 323,\n                openPrice: 0,\n                closePrice: 9\n            }\n        ],\n        deposits: [\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-03 12:30:00+00:00'\n            },\n            {\n                account: 2, \n                amount: 300, \n                time: '2021-02-03 12:30:00+00:00'\n            }\n        ],\n        withdrawals: [\n            {\n                account: 2,\n                amount: 20, \n                time: '2021-02-03 12:30:00+00:00'\n            },\n            {\n                account: 2,\n                amount: 50, \n                time: '2021-02-03 12:30:00+00:00'\n            }\n        ]\n    }\n}\n\nconst dummyRawData: RawData = {\n    user_data: {\n        id: 3,\n        email: 'sonugademilade8703@gmail.com',\n        ds_username: 'dsusername',\n        is_subscribed: false,\n        subscription_plan: 'none',\n        on_free: true,\n        logins_after_ask: 2,\n        current_feedback_question: 1,\n        days_left_before_free_trial_expires: 4\n    },\n    trade_data: {\n        current_account_id: 2,\n        accounts: someAccounts,\n        last_data_refresh_time: new Date(2022, 10, 11)\n    }\n}\n\nexport default useGlobalData","import {ToastFuncType} from '@components/toast/types'\nimport {HttpConst} from '@conf/const'\nimport {HttpErrorType, HttpResponseType} from '@services/http'\nimport {GlobalData} from '../models'\nimport {Http} from '../services'\n\n\nconst refreshAccountData = (Toast: ToastFuncType, setGlobalData: Function, setDataIsRefreshing: Function, successFunc: Function = () => {}) => {\n    const {BASE_URL, REFRESH_DATA_URL} = HttpConst;\n    setDataIsRefreshing(true);\n    Http.get({\n        url: `${BASE_URL}/${REFRESH_DATA_URL}/`,\n        successFunc: (resp: HttpResponseType) => {\n            makeFollowUpRequests(Toast, setGlobalData, setDataIsRefreshing, successFunc);\n        },\n        errorFunc: (err: HttpErrorType) => {\n            Toast.error('Sorry but something went wrong.');\n            setDataIsRefreshing(false)\n        }\n    })\n}\n\nconst makeFollowUpRequests = (\n    Toast: ToastFuncType,\n    setGlobalData: Function,\n    setDataIsRefreshing: Function,\n    successFunc: Function,\n    followUpNo: number = 1\n) => {\n    const {BASE_URL, PENDING_REFRESH_DATA_URL} = HttpConst;\n    setTimeout(() => Http.get({\n        url: `${BASE_URL}/${PENDING_REFRESH_DATA_URL}/`,\n        successFunc: (resp: HttpResponseType) => {\n            if('detail' in resp.data){\n                if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                    Toast.error('Sorry. This is taking longer than expected. Please try again later.');\n                    setDataIsRefreshing(false);\n                } else {\n                    makeFollowUpRequests(Toast, setGlobalData, setDataIsRefreshing, successFunc, followUpNo + 1);\n                }\n            } else {\n                const newGlobalData = new GlobalData(resp.data);\n                setGlobalData(newGlobalData);\n                setDataIsRefreshing(false);\n                successFunc();\n            }\n        },\n        errorFunc: (err: HttpErrorType) => {\n            console.log(err);\n            Toast.error('Sorry but something went wrong');\n            setDataIsRefreshing(false);\n        }\n    }), TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST);\n}\n\n\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 120;\n\nexport default refreshAccountData","import {ToastFuncType} from '@components/toast/types'\nimport {HttpConst} from '@conf/const'\nimport {HttpErrorType, HttpResponseType} from '@services/http'\nimport {GlobalData} from '../models'\nimport {Http} from '../services'\n\n\nconst makeFollowUpSubscriptionRequests = (\n    Toast: ToastFuncType,\n    data: {[key: string]: any},\n    successFunc: Function,\n    followUpNo: number = 1\n) => {\n    const {BASE_URL, RECORD_NEW_SUBSCRIPTION_URL} = HttpConst;\n    setTimeout(() => Http.post({\n        url: `${BASE_URL}/${RECORD_NEW_SUBSCRIPTION_URL}/`,\n        data,\n        successFunc: (resp: HttpResponseType) => {\n            if(resp.data['detail'] === 'pending'){\n                if(followUpNo >= MAX_NO_OF_FOLLOW_UP_REQUESTS){\n                    Toast.error('Sorry. This is taking longer than expected. Please try again later.');\n                } else {\n                    makeFollowUpSubscriptionRequests(Toast, data, successFunc, followUpNo + 1);\n                }\n            } else {\n                successFunc()\n            }\n        },\n        errorFunc: (err: HttpErrorType) => {\n            console.log(err);\n            Toast.error('Sorry. Something went wrong. ' + \n                'Try refreshing the page. If this error persists, please contact support.'\n            );\n        }\n    }), TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST);\n}\n\n\n\nconst TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST = 5000;\nconst MAX_NO_OF_FOLLOW_UP_REQUESTS = 120;\n\nexport default makeFollowUpSubscriptionRequests","import {createContext, useEffect, Suspense, lazy, useState, useContext} from 'react'\nimport {Route, useLocation, useNavigate, Navigate} from 'react-router-dom'\nimport {TraderAppContainer, TraderAppNavbar} from '@apps/trader-app/components'\nimport Routes from '@components/router'\nimport {RouteConst} from '@conf/const'\nimport {Overview, CashAndGains, Expenses, Settings, LongShortAnalysis, AddAccount,\n    PeriodAnalysis, TimeAnalysis, PairsAnalysis, SubscribeNow} from '@apps/trader-app/pages'\nimport {GlobalData, useGlobalData} from '@apps/trader-app/models'\nimport {UserData} from '@apps/trader-app/models/types'\nimport {Http, useNoteData} from '@apps/trader-app/services'\nimport {PageLoadingErrorBoundary, PageStillLoading} from '@components/generic-pages'\nimport {ToastContext} from '@components/toast'\nimport refreshAccountData from './services/refresh-account-data'\nimport makeFollowUpSubscriptionRequests from './services/follow-up-post-subscription-actions'\nimport permissionFuncs, { defaultPermissions } from './services/permissions'\nimport {RawData} from './models/types'\nimport {AddAccountPropTypes} from './pages/add-account/types'\nimport {SettingsPropTypes} from './pages/settings/types'\nimport {NotebookPropTypes} from './pages/notes/types'\nimport { PermissionsObj } from './services/types'\n\nconst Notebook = lazy(() => import('@apps/trader-app/pages/notes'));\nconst Journal = lazy(() => import('@apps/trader-app/pages/journal'));\n\n\nconst TraderApp = () => {\n    const location = useLocation();\n    /** User and trade data from the backend. Globally required by most trader app pages */\n    const [globalData, setGlobalData, permissions] = useGlobalData();\n    /** Is the data currently being refreshed */\n    const [dataIsRefreshing, setDataIsRefreshing] = useState(false);\n    /** Keep page on loading page indefinitely */\n    const [keepPageLoading, setKeepPageLoading] = useState(false);\n    const Toast = useContext(ToastContext);\n    /** Function called by account selector to change current account */\n    const onCurrentAccountChange = (newCurrentAccountId: number) => {\n        const newGlobalData = globalData.changeCurrentTradeAccountId(newCurrentAccountId);\n        setGlobalData(newGlobalData);\n    }\n    /** Function called when a new account is added */\n    const onAccountAdded = (rawData: RawData) => {\n        const newGlobalData = new GlobalData(rawData);\n        setGlobalData(newGlobalData);\n    }\n    /** Function called when an account is removed from settings */\n    const removeAccountFromGlobalData = (id: number) => {\n        const newGlobalData = globalData.removeAccount(id);\n        setGlobalData(newGlobalData);\n    }\n    /** Function called when refresh account data is called from the data status bar */\n    const refreshData = () => refreshAccountData(Toast, setGlobalData, setDataIsRefreshing);\n    /** Function called when a user makes a subscription */\n    const onNewSubscription = (postActionsPending: boolean, data: {[key: string]: any}, subscriptionPlan: UserData['subscription_plan']) => {\n        const newGlobalData = globalData.subscribeUser(subscriptionPlan);\n        setGlobalData(newGlobalData);\n        /**\n         * When postActionsPending are set, a loading icons has to be set\n         * and the backend has to be continuously queried for progress.\n         * The account data also has to be refreshed, since the setting of the postActionsPending\n         * variable means that the account needs to be reconnected for data\n         */\n        if(postActionsPending){\n            Toast.info('Please wait. This might take a while')\n            setKeepPageLoading(true);\n            // To reconnect the user's account\n            makeFollowUpSubscriptionRequests(\n                Toast,\n                data,\n                () => {\n                    // Need to refresh data now\n                    refreshAccountData(Toast, setGlobalData, setDataIsRefreshing, () => {\n                        setKeepPageLoading(false);\n                    });\n                }\n            )\n        }\n    }\n    /** Function called when user successfully cancels subscription */\n    const onSubscriptionCancel = () => {\n        const {TRADER_APP_ROUTE} = RouteConst;\n        const newGlobalData = globalData.unsubscribeUser();\n        setGlobalData(newGlobalData);\n        navigate(`/${TRADER_APP_ROUTE}`);\n    }\n    const navigate = useNavigate();\n    useEffect(() => {\n        Http.initNavigate(navigate);\n    }, [])\n    const noteData = useNoteData();\n    /*\n    const permissions: PermissionsObj = (() => {\n        console.log('building permissions')\n        let permissions: PermissionsObj = {...defaultPermissions};\n        permissionFuncs.forEach((permissionFunc: Function) => {\n            permissions[permissionFunc.name as keyof(PermissionsObj)] = permissionFunc(globalData);\n        })\n        console.log('built permissions', permissions);\n        return permissions;\n    })()\n    */\n    \n    return(\n        <>\n            <TraderAppNavbar />\n            <TraderAppContainer>\n                <GlobalDataContext.Provider value={globalData}>\n                    <CurrentAccountChangerContext.Provider value={onCurrentAccountChange}>\n                        <RefreshDataContext.Provider value={refreshData}>\n                        <DataIsRefreshingContext.Provider value={dataIsRefreshing}>\n                        <NewSubscriptionContext.Provider value={onNewSubscription}>\n                        <SubscriptionCancelContext.Provider value={onSubscriptionCancel}>\n                        <PermissionsContext.Provider value={permissions}>\n                        {(() => {\n                            const pageMap = pageMapConfig(\n                                globalData,\n                                keepPageLoading,\n                                {onAccountAdded: onAccountAdded,\n                                    noOfAccounts: globalData.numberOfAccounts(),\n                                    userIsOnFreeTrial: globalData.userIsOnFreeTrial(),\n                                    userId: globalData.getUserId()\n                                },\n                                {removeAccountFromGlobalData: removeAccountFromGlobalData},\n                                {noteData: noteData}\n                            )\n                            return(\n                                <PageLoadingErrorBoundary>\n                                    <Suspense fallback={<PageStillLoading />}>\n                                        <Routes>\n                                            {Object.keys(pageMap).map((route: string, i: number) => (\n                                                <Route path={route} element={pageMap[route]} key={i} />\n                                            ))}\n                                        </Routes>\n                                    </Suspense>\n                                </PageLoadingErrorBoundary>\n                            )\n                        })()}\n                        </PermissionsContext.Provider>\n                        </SubscriptionCancelContext.Provider>\n                        </NewSubscriptionContext.Provider>\n                        </DataIsRefreshingContext.Provider>\n                        </RefreshDataContext.Provider>\n                    </CurrentAccountChangerContext.Provider>\n                </GlobalDataContext.Provider>\n            </TraderAppContainer>\n        </>\n    );\n}\n\n/** Context to enable all components to have access to globalData */\nconst GlobalDataContext = createContext(new GlobalData(null));\n/**\n * Context for the account selector which is on almost all pages to\n * change accounts.\n * Initialized to empty function to satisfy the Typescript compiler\n * */\nconst CurrentAccountChangerContext = createContext((newCurrentAccountId: number) => {});\n/**\n * Is the data currently being refreshed\n */\nconst DataIsRefreshingContext = createContext(false);\nconst RefreshDataContext = createContext(() => {});\nconst NewSubscriptionContext = createContext((postActionsPending: boolean, data: {[key: string]: any}, subscriptionPlan: UserData['subscription_plan']) => {});\nconst SubscriptionCancelContext = createContext(() => {});\nconst PermissionsContext = createContext<PermissionsObj>(defaultPermissions)\n\n/** Returns a mapping of routes to components depending on the state */\nconst pageMapConfig = (\n    globalData: GlobalData,\n    keepPageLoading: boolean,\n    addAccountComponentConfig: AddAccountPropTypes,\n    settingsComponentConfig: SettingsPropTypes,\n    notebookProps: NotebookPropTypes\n) => {\n    const pageStillLoadingComponent = <PageStillLoading />\n    if(keepPageLoading){\n        return {\n            [TRADER_OVERVIEW_ROUTE]: pageStillLoadingComponent,\n            [TRADER_JOURNAL_ROUTE]: pageStillLoadingComponent,\n            [TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_CASH_AND_GAINS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_SETTINGS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_PAIRS_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_ADD_ACCOUNT_ROUTE]: pageStillLoadingComponent,\n            [TRADER_TIME_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_PERIOD_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_EXPENSES_ROUTE]: pageStillLoadingComponent,\n            [TRADER_NOTES_ROUTE]: pageStillLoadingComponent,\n        }\n    }\n    const addAccountComponent = <AddAccount {...addAccountComponentConfig} />\n    const subscribeNowComponent = <SubscribeNow \n        email={globalData.getUserEmail()}\n        userHasPaidOnce={globalData.userHasPaid()}\n        userId={globalData.getUserId()}\n        />\n    const subscribeNowRouteComponent = !globalData.userIsOnFreeTrial() && !globalData.userIsSubscribed() ?\n        subscribeNowComponent\n        : <Navigate to={`/${TRADER_APP_ROUTE}/${TRADER_OVERVIEW_ROUTE}`} />\n    if(globalData.hasLoaded()){\n        if(globalData.noAccounts()){\n            return {\n                [TRADER_OVERVIEW_ROUTE]: addAccountComponent,\n                [TRADER_JOURNAL_ROUTE]: addAccountComponent,\n                [TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE]: addAccountComponent,\n                [TRADER_CASH_AND_GAINS_ROUTE]: addAccountComponent,\n                [TRADER_SETTINGS_ROUTE]: <Settings {...settingsComponentConfig} />,\n                [TRADER_PAIRS_ANALYSIS_ROUTE]: addAccountComponent,\n                [TRADER_ADD_ACCOUNT_ROUTE]: addAccountComponent,\n                [TRADER_TIME_ANALYSIS_ROUTE]: addAccountComponent,\n                [TRADER_PERIOD_ANALYSIS_ROUTE]: addAccountComponent,\n                [TRADER_EXPENSES_ROUTE]: addAccountComponent,\n                [TRADER_NOTES_ROUTE]: addAccountComponent,\n                [TRADER_SUBSCRIBE_NOW_ROUTE]: subscribeNowRouteComponent\n            }\n        } else {\n            return {\n                [TRADER_OVERVIEW_ROUTE]: <Overview />,\n                [TRADER_JOURNAL_ROUTE]: <Journal />,\n                [TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE]: <LongShortAnalysis />,\n                [TRADER_CASH_AND_GAINS_ROUTE]: <CashAndGains />,\n                [TRADER_SETTINGS_ROUTE]: <Settings {...settingsComponentConfig} />,\n                [TRADER_PAIRS_ANALYSIS_ROUTE]: <PairsAnalysis />,\n                [TRADER_ADD_ACCOUNT_ROUTE]: addAccountComponent,\n                [TRADER_TIME_ANALYSIS_ROUTE]: <TimeAnalysis />,\n                [TRADER_PERIOD_ANALYSIS_ROUTE]: <PeriodAnalysis />,\n                [TRADER_EXPENSES_ROUTE]: <Expenses />,\n                [TRADER_NOTES_ROUTE]: <Notebook {...notebookProps} />,\n                [TRADER_SUBSCRIBE_NOW_ROUTE]: subscribeNowRouteComponent\n            }\n        }\n    } else {\n        return {\n            [TRADER_OVERVIEW_ROUTE]: pageStillLoadingComponent,\n            [TRADER_JOURNAL_ROUTE]: pageStillLoadingComponent,\n            [TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_CASH_AND_GAINS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_SETTINGS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_PAIRS_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_ADD_ACCOUNT_ROUTE]: pageStillLoadingComponent,\n            [TRADER_TIME_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_PERIOD_ANALYSIS_ROUTE]: pageStillLoadingComponent,\n            [TRADER_EXPENSES_ROUTE]: pageStillLoadingComponent,\n            [TRADER_NOTES_ROUTE]: pageStillLoadingComponent,\n            [TRADER_SUBSCRIBE_NOW_ROUTE]: pageStillLoadingComponent\n        }\n    }\n}\n\nconst {TRADER_OVERVIEW_ROUTE, TRADER_JOURNAL_ROUTE, TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE,\n    TRADER_CASH_AND_GAINS_ROUTE, TRADER_SETTINGS_ROUTE, TRADER_PAIRS_ANALYSIS_ROUTE, TRADER_ADD_ACCOUNT_ROUTE,\n    TRADER_TIME_ANALYSIS_ROUTE, TRADER_PERIOD_ANALYSIS_ROUTE, TRADER_EXPENSES_ROUTE, TRADER_NOTES_ROUTE,\n    TRADER_SUBSCRIBE_NOW_ROUTE, TRADER_APP_ROUTE\n} = RouteConst;\n\nexport default TraderApp\nexport {\n    GlobalDataContext,\n    CurrentAccountChangerContext,\n    DataIsRefreshingContext,\n    RefreshDataContext,\n    NewSubscriptionContext,\n    SubscriptionCancelContext,\n    PermissionsContext\n}","import {useContext, useEffect, useState} from 'react'\nimport {DataGrid, GridToolbar, GridColDef, GridRowsProp} from '@mui/x-data-grid'\nimport {BP} from '@components/text'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport {formatMoney} from '@apps/trader-app/utils'\nimport {GlobalDataContext} from '@apps/trader-app'\n\n\nconst Journal = () => {\n    const globalData = useContext(GlobalDataContext);\n    const columns: GridColDef[] = [\n        {field: 'id', renderHeader: () => <BP>ID</BP>, width: 90},\n        {field: 'openTime', renderHeader: () => (<BP>Open Date Time</BP>), type: 'dateTime', width: 190 },\n        {field: 'closeTime', renderHeader: () => (<BP>Close Date Time</BP>), type: 'dateTime', width: 190 },\n        {field: 'pair', renderHeader: () => (<BP>Pair</BP>), width: 110 },\n        {field: 'action', renderHeader: () => (<BP>Action</BP>), width: 80},\n        {field: 'fee', renderHeader: () => (<BP>Fee</BP>), type: 'number', width: 100},\n        {field: 'profit', renderHeader: () => (<BP>Profit</BP>), type: 'number', width: 120}\n    ];\n    const [rows, setRows] = useState<GridRowsProp>([]);\n    useEffect(() => {\n        if(globalData.hasLoaded()){\n            setRows(globalData.getCurrentTradeAccountData().trades.map((trade, i) => {\n                return {\n                    id: i + 1,\n                    openTime: new Date(trade.openTime).toString().split('GMT')[0],\n                    closeTime: new Date(trade.closeTime).toString().split('GMT')[0],\n                    pair: trade.pair, \n                    action: trade.action.toUpperCase(),\n                    fee: trade.commission !== undefined && trade.swap !== undefined ? trade.commission + trade.swap : 'None Found',\n                    profit: formatMoney(trade.profitLoss)\n                }\n            }));\n        }\n    }, [globalData])\n\n    return(\n        <PageContainer>\n            <PageHeading heading='Journal' />\n            <div style={{height: '75vh'}} data-testid='journal-table'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    pageSize={10}\n                    components={{\n                        Toolbar: GridToolbar\n                    }}\n                    />\n            </div>\n        </PageContainer>\n    )\n}\n\nexport default Journal","import {Http, HttpErrorType, HttpResponseType} from '@apps/trader-app/services'\nimport {HttpConst} from '@conf/const'\n\n\nclass Note {\n    id;\n    title;\n    content;\n    lastEdited;\n    // To synchronize multiple saves\n    // If the note is already being saved, append the current state\n    private isSaving;\n    private saveQueue: NoteData[];\n    constructor(noteData?: NoteData | RawNoteData){\n        if(noteData){\n            this.id = noteData.id;\n            this.title = noteData.title;\n            this.content = noteData.content;\n            if('lastEdited' in noteData){\n                this.lastEdited = new Date(noteData.lastEdited);\n            } else {\n                this.lastEdited = new Date(noteData.last_edited);\n            }\n        } else {\n            this.id = -1;\n            this.title = '';\n            this.content = [{type: 'p', children: [{text: ''}]}];\n            this.lastEdited = new Date();\n        }\n        this.saveQueue = [];\n        this.isSaving = false;\n    }\n\n    private _save(data: NoteData){\n        const {BASE_URL, SAVE_NOTE_URL, UPDATE_NOTE_URL} = HttpConst;\n        let url;\n        let httpMethod;\n        if(this.id === -1){\n            url = `${BASE_URL}/${SAVE_NOTE_URL}/`;\n            httpMethod = Http.post;\n        } else {\n            url = `${BASE_URL}/${UPDATE_NOTE_URL}/${this.id}/`;\n            httpMethod = Http.put;\n        }\n        httpMethod({\n            url,\n            data,\n            successFunc: (resp: HttpResponseType) => {\n                this.id = resp.data.id;\n                const latestChangeToSave = this.saveQueue.pop();\n                // other previous changes dont need to be saved\n                this.saveQueue = [];\n                if(latestChangeToSave === undefined){\n                    this.isSaving = false;\n                } else {\n                    this._save(latestChangeToSave);\n                }\n            },\n            errorFunc: (err: HttpErrorType) => {\n                console.log(err);\n                Http.toast.error('Sorry. Something went wrong while trying to save your note.');\n            }\n        })\n    }\n\n    save(){\n        if(this.isSaving){\n            // save the last state of the note\n            this.saveQueue.push({\n                id: this.id,\n                title: this.title,\n                content: this.content,\n                lastEdited: this.lastEdited.toISOString()\n            })\n        } else {\n            this.isSaving = true;\n            this._save(this.toNoteData())\n        }\n    }\n\n    delete(): Promise<void> {\n        if(this.id === -1){\n            return Promise.resolve();\n        } else {\n            const {BASE_URL, DELETE_NOTE_URL} = HttpConst\n            return Http.delete({\n                url: `${BASE_URL}/${DELETE_NOTE_URL}/${this.id}/`,\n                successFunc: () => {\n                    return Promise.resolve()\n                },\n                errorFunc: () => {\n                    return Promise.reject();\n                }\n            });\n        }\n    }\n\n    static fromRawData(noteData: NoteData[]): Note[]{\n        return noteData.map((data) => new Note(data))\n    }\n\n    lastEditedToString(): String {\n        return this.lastEdited.toDateString();\n    }\n    hasBeenSaved(){\n        // If the id is -1, then it has never been saved on the backend\n        return this.id != -1;\n    }\n    private toNoteData(){\n        return {\n            id: this.id,\n            title: this.title,\n            content: this.content,\n            lastEdited: this.lastEdited.toISOString()\n        }\n    }\n}\n\ntype NoteData = {\n    id: number,\n    title: string,\n    content: any,\n    lastEdited: string\n}\n\n// From the backend\ntype RawNoteData = {\n    id: number,\n    title: string,\n    content: any,\n    last_edited: string\n}\n\nexport default Note\nexport type {\n    NoteData\n}","import { PermissionsObj } from '@apps/trader-app/services/types';\nimport {ToastContext} from '@components/toast'\nimport {Delete} from '@mui/icons-material'\nimport {IconButton, ListItem, ListItemButton, ListItemText, CircularProgress} from '@mui/material'\nimport {useContext, useState} from 'react'\nimport Note from '../models';\n\n\nconst NoteListItem = ({noteItem, active, onClick, removeNoteFromList, noteIndex, permissions}: {noteItem: Note, active: boolean, onClick: Function, removeNoteFromList: Function, noteIndex: number, permissions: PermissionsObj}) => {\n    const [isDeleting, setIsDeleting] = useState(false);\n    const Toast = useContext(ToastContext);\n    return(\n        <ListItem>\n            <ListItemButton\n                disabled={isDeleting || !permissions.canModifyNotes}\n                onClick={(e) => onClick()}\n                selected={active}>\n                <ListItemText\n                    primary={noteItem.title ? noteItem.title : 'Untitled'}\n                    secondary={noteItem.lastEditedToString()}\n                    />\n            </ListItemButton>\n            {isDeleting ? \n                <CircularProgress />\n                : <IconButton onClick={() => {\n                        setIsDeleting(true);\n                        noteItem.delete()\n                            .then(() => removeNoteFromList(noteIndex))\n                            .catch(() => (\n                                Toast.error('Sorry. Something went wrong when trying to delete your note.')\n                            ))\n                            .then(() => setIsDeleting(false))\n                    }}><Delete /></IconButton>\n                }\n        </ListItem>\n    )\n}\n\nexport default NoteListItem","import {Divider, List, Slide,} from '@mui/material'\nimport {useRef} from 'react'\nimport NoteListItem from './note-list-item'\nimport Note from '../models'\nimport { PermissionsObj } from '@apps/trader-app/services/types'\n\n\nconst NoteList = ({noteItems, onNoteSelect, isEditing, removeNoteFromList, permissions}: {noteItems: Note[], onNoteSelect: Function, isEditing: boolean, removeNoteFromList: Function, permissions: PermissionsObj}) => {\n    const listContainerRef = useRef<HTMLDivElement>(null);\n    return(\n        <div ref={listContainerRef}>\n            <Slide direction='right' in={!isEditing} container={listContainerRef.current}>\n                <List>\n                    {noteItems.map((noteItem: any, i: number) => (\n                        <>\n                            <NoteListItem\n                                key={i}\n                                noteIndex={i}\n                                noteItem={noteItem}\n                                active={false}\n                                onClick={() => {\n                                    onNoteSelect(i);\n                                }}\n                                removeNoteFromList={removeNoteFromList}\n                                permissions={permissions}\n                                 />\n                            <Divider />\n                        </>\n                    ))}\n                </List>\n            </Slide>\n        </div>\n    )\n}\n\nexport default NoteList","import {getPluginType, MARK_BOLD, MARK_UNDERLINE, MARK_STRIKETHROUGH, MARK_ITALIC,\n    MARK_SUBSCRIPT, MARK_SUPERSCRIPT, PlateEditor} from '@udecode/plate'\nimport {MarkToolbarButton} from '@udecode/plate-ui-toolbar'\nimport {FormatBold, FormatItalic, FormatStrikethrough, FormatUnderlined, \n    Subscript, Superscript} from '@mui/icons-material'\nimport 'tippy.js/dist/tippy.css'\n\n\nconst TextFormatButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <MarkToolbarButton\n                id='apps-trader-app-pages-notes-toolbar-text-format-buttons-bold'\n                type={getPluginType(editor, MARK_BOLD)}\n                icon={<FormatBold />}\n                tooltip={{content: 'Bold (ctrl + b)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_ITALIC)}\n                icon={<FormatItalic />}\n                onMouseDown={() => editor.addMark(MARK_ITALIC, true)}\n                tooltip={{content: 'Italic (ctrl + i)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_UNDERLINE)}\n                icon={<FormatUnderlined />}\n                tooltip={{content: 'Underline (ctrl + u)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_STRIKETHROUGH)}\n                icon={<FormatStrikethrough />}\n                tooltip={{content: 'Strikethrough (ctrl + shift + x)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_SUPERSCRIPT)}\n                clear={getPluginType(editor, MARK_SUPERSCRIPT)}\n                icon={<Superscript />}\n                tooltip={{content: 'Superscript (ctrl + .)'}}\n                />\n            <MarkToolbarButton\n                type={getPluginType(editor, MARK_SUBSCRIPT)}\n                clear={getPluginType(editor, MARK_SUBSCRIPT)}\n                icon={<Subscript />}\n                tooltip={{content: 'Subscript (ctrl + ,)'}}\n                />\n        </>\n    )\n}\n\nexport default TextFormatButtons","import {FormatAlignCenter, FormatAlignJustify, FormatAlignLeft, FormatAlignRight} from '@mui/icons-material'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {AlignToolbarButton} from '@udecode/plate-ui'\n\nconst AlignContentButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <AlignToolbarButton\n                value='left'\n                icon={<FormatAlignLeft />}\n                tooltip={{content: 'Align Content Left'}}\n                />\n            <AlignToolbarButton\n                value='center'\n                icon={<FormatAlignCenter />}\n                tooltip={{content: 'Align Content Center'}}\n                />\n            <AlignToolbarButton\n                value='right'\n                icon={<FormatAlignRight />}\n                tooltip={{content: 'Align Content Right'}}\n                />\n            <AlignToolbarButton\n                value='justify'\n                icon={<FormatAlignJustify />}\n                tooltip={{content: 'Justify Content'}}\n                />\n        </>\n    )\n}\n\nexport default AlignContentButtons","import {ToolbarButton} from '@udecode/plate-ui'\nimport {Undo, Redo} from '@mui/icons-material'\nimport {PlateEditor} from '@udecode/plate-core'\n\n\nconst UndoRedoButtons = ({editor}: {editor: PlateEditor}) => {\n    const noMoreRedos = (editor: PlateEditor) => editor && editor.history.redos.length === 0;\n    const noMoreUndos = (editor: PlateEditor) => editor && editor.history.undos.length === 0;\n    \n    return(\n        <>\n            <ToolbarButton\n                icon={<Undo sx={{opacity: noMoreUndos(editor) ? 0.5 : undefined}} />}\n                onMouseDown={() => {\n                    if(!noMoreUndos(editor)){\n                        editor.undo();\n                    }\n                }}\n                tooltip={{content: 'Undo (ctrl + z)'}}\n                />\n            <ToolbarButton \n                icon={<Redo sx={{opacity: noMoreRedos(editor) ? 0.5 : undefined}} />}\n                onMouseDown={() => {\n                    if(!noMoreRedos(editor)){\n                        editor.redo();\n                    }\n                }}\n                tooltip={{content: 'Redo (ctrl + y)'}}\n                />\n        </>\n    )\n}\n\nexport default UndoRedoButtons","import {getPluginType, ELEMENT_UL, ELEMENT_OL, PlateEditor} from '@udecode/plate'\nimport {FormatListBulleted, FormatListNumbered} from '@mui/icons-material'\nimport {ListToolbarButton} from '@udecode/plate-ui-list'\n\n\nconst ListButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <ListToolbarButton\n                type={getPluginType(editor, ELEMENT_UL)}\n                icon={<FormatListBulleted />}\n                tooltip={{content: 'Insert Bulleted List'}}\n                />\n            <ListToolbarButton\n                type={getPluginType(editor, ELEMENT_OL)}\n                icon={<FormatListNumbered />}\n                tooltip={{content: 'Insert Numbered List'}}\n                />\n        </>\n    )\n}\n\nexport default ListButtons","const createHeaderRowNode = (columns: number) =>{\n    const headerRow: any = {type: 'tr', children: []}\n    for(let colNo=columns; colNo >= 1; colNo--){\n        headerRow.children.push({type: 'th', children: [{type: 'p', children: [{text: ''}]}]});\n    }\n    return headerRow\n}\n\nconst createRow = (columns: number) => {\n    const row: any = {type: 'tr', children: []}\n    for(let colNo=columns; colNo >= 1; colNo--){\n        row.children.push({type: 'td', children: [{type: 'p', children: [{text: ''}]}]});\n    }\n    return row\n}\n\nconst createTableNode = (rows: number, columns: number) => {\n    const tableNode = {\n        type: 'table',\n        isElement: true,\n        children: [\n            createHeaderRowNode(columns)\n        ]\n    }\n    for(let rowNo=rows; rowNo >= 1; rowNo--){\n        tableNode.children.push(createRow(columns));\n    }\n    return tableNode\n}\n\n\nexport default createTableNode","import {RowBox} from '@components/containers'\nimport {Input} from '@components/inputs'\nimport {P} from '@components/text'\nimport {getDimen} from '@conf/utils'\n\n\nconst NoOfRowsInput = ({rows, setRows}: {rows: number, setRows: Function}) => {\n    \n    return(\n        <RowBox\n            style={{\n                marginBottom: getDimen('padding-xs'),\n                justifyContent: 'space-between',\n                alignItems: 'baseline'\n            }}>\n            <P>Number of rows: &nbsp;</P>\n            <Input\n                autoFocus={true}\n                variant='standard'\n                type='number'\n                value={rows}\n                onChange={(e) => setRows(e.target.value)} />\n        </RowBox>\n    )\n}\n\nexport default NoOfRowsInput","import {RowBox} from '@components/containers'\nimport {Input} from '@components/inputs'\nimport {P} from '@components/text'\nimport {getDimen} from '@conf/utils'\n\n\nconst NoOfColumnsInput = ({columns, setColumns}: {columns: number, setColumns: Function}) => {\n    return(\n        <RowBox\n            style={{\n                justifyContent: 'space-between',\n                alignItems: 'baseline',\n                marginBottom: getDimen('padding-xs')\n            }}>\n            <P>Number of cols: &nbsp;</P>\n            <Input\n                variant='standard'\n                type='number'\n                value={columns}\n                onChange={(e: any) => setColumns(e.target.value)} />\n        </RowBox>\n    )\n}\n\nexport default NoOfColumnsInput","import {useState} from 'react'\nimport {Transforms} from 'slate'\nimport {getPluginType, PlateEditor} from '@udecode/plate'\nimport {ToolbarButton} from '@udecode/plate-ui-toolbar'\nimport {ELEMENT_PARAGRAPH} from '@udecode/plate-paragraph'\nimport {TableView} from '@mui/icons-material'\nimport Dialog from '@components/dialog'\nimport createTableNode from './create-table-node'\nimport NoOfRowsInput from './no-of-rows-input'\nimport NoOfColumnsInput from './no-of-columns-input'\n\n\nconst InsertTableButton = ({editor}: {editor: PlateEditor}) => {\n    const [rows, setRows] = useState(1);\n    const [columns, setColumns] = useState(2);\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const setNewValueIfValidNumber = (newValue: string, setValue: Function) => {\n        // No negative numbers or numbers greater than 10 are allowed\n        const validNumber = (num: number) => !isNaN(num) && num > 0 && num < 11\n        const num = parseInt(newValue);\n        if(validNumber(num)){\n            setValue(newValue);\n        }\n    }\n    const onOkClick = () => {\n        const tableNode = createTableNode(rows, columns);\n        // Adding a paragraph to make it easy to continue editing after inserting the table\n        const newParagraphNode = {type: ELEMENT_PARAGRAPH, children: [{text: ''}]};\n        Transforms.insertNodes(editor, [tableNode, newParagraphNode]);\n        setDialogIsOpen(false);\n    }\n\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Table'\n                open={true}\n                onClose={() => setDialogIsOpen(false)}\n                onOkClick={onOkClick}\n                onCancelClick={() => setDialogIsOpen(false)}>\n                <NoOfRowsInput\n                    rows={rows}\n                    setRows={(newValue: string) => setNewValueIfValidNumber(newValue, setRows)}\n                />\n                <NoOfColumnsInput\n                    columns={columns}\n                    setColumns={(newValue: string) => setNewValueIfValidNumber(newValue, setColumns)}\n                    />\n            </Dialog>\n            : null\n        }\n        <ToolbarButton\n            type={getPluginType(editor, 'table')}\n            icon={<TableView />}\n            tooltip={{content: 'Insert Table'}}\n            onMouseDown={() => {\n                setDialogIsOpen(true);\n            }}\n            />\n        </>\n    )\n}\n\nexport default InsertTableButton","import {useState} from 'react'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {ImageToolbarButton} from '@udecode/plate-ui-image'\nimport {Image} from '@mui/icons-material'\nimport {Input} from '@components/inputs'\nimport Dialog from '@components/dialog'\n\n\nconst InsertImageButton = ({editor}: {editor: PlateEditor}) => {\n    const [imageUrl, setImageUrl] = useState('');\n    const [resolve, setResolve] = useState<Function>(() => {});\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const closeDialog = () => {\n        setImageUrl('');\n        setResolve(() => {});\n        setDialogIsOpen(false);\n    }\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Image'\n                onClose={() => closeDialog()}\n                open={dialogIsOpen}\n                onOkClick={() => resolve(imageUrl)}\n                onCancelClick={() => closeDialog()}>\n                <Input\n                    value={imageUrl}\n                    onChange={(e) => setImageUrl(e.target.value)}\n                    placeholder='Image url'\n                />\n            </Dialog>\n            : null\n        }\n        <ImageToolbarButton\n            icon={<Image />}\n            getImageUrl={() => {\n                return new Promise((resolve) => {\n                    setResolve(prevResolve => (url: string) => resolve(url));\n                })\n            }}\n            tooltip={{content: 'Insert Image'}} />\n        </>\n    )\n}\n\nexport default InsertImageButton","import {useState} from 'react'\nimport {PlateEditor} from '@udecode/plate-core'\nimport {LinkToolbarButton} from '@udecode/plate-ui-link'\nimport {Link} from '@mui/icons-material'\nimport {Input} from '@components/inputs'\nimport Dialog from '@components/dialog'\n\n\nconst InsertLinkButton = ({editor}: {editor: PlateEditor}) => {\n    const [dialogIsOpen, setDialogIsOpen] = useState(false);\n    const [resolve, setResolve] = useState<Function>(() => {});\n    const [url, setUrl] = useState('');\n    const closeDialog = () => {\n        setUrl('');\n        setDialogIsOpen(false);\n        setResolve(() => {});\n    }\n    return(\n        <>\n        {dialogIsOpen ?\n            <Dialog\n                title='Insert Link'\n                open={dialogIsOpen}\n                onOkClick={() => {\n                    if(url.length === 0){\n                        resolve(null);\n                    } else {\n                        resolve(url);\n                    }\n                    closeDialog();\n                }}\n                onCancelClick={() => closeDialog()}\n                onClose={() => closeDialog()}>\n                    <Input\n                        value={url}\n                        onChange={(e) => {\n                            setUrl(e.target.value)\n                        }}\n                        placeholder='the url'\n                        />\n            </Dialog>\n            : null\n        }\n        <LinkToolbarButton\n            icon={<Link />}\n            getLinkUrl={() => {\n                return new Promise((resolve) => {\n                    setDialogIsOpen(true);\n                    setResolve(prevFunc => (url: string | null) => resolve(url));\n                })\n            }}\n            tooltip={{content: 'Insert Link'}}\n            />\n        </>\n    )\n}\n\nexport default InsertLinkButton","import {PlateEditor} from '@udecode/plate'\nimport ListButtons from './list-buttons'\nimport InsertTableButton from './insert-table-button'\nimport InsertImageButton from './insert-image-button'\nimport InsertLinkButton from './insert-link-button'\n\n\nconst InsertContentButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <ListButtons editor={editor} />\n            <InsertTableButton editor={editor} />\n            <InsertLinkButton editor={editor} />\n            <InsertImageButton editor={editor} />\n        </>\n    )\n}\n\nexport default InsertContentButtons","import {getPluginType, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, PlateEditor,\n    ELEMENT_H4, ELEMENT_H5, ELEMENT_H6, ELEMENT_BLOCKQUOTE} from '@udecode/plate'\nimport {BlockToolbarButton} from '@udecode/plate-ui'\nimport {LooksOne, LooksTwo, Looks3, Looks4, Looks5, Looks6, FormatQuote} from '@mui/icons-material'\n\n\nconst HeadersAndQuoteButtons = ({editor}: {editor: PlateEditor}) => {\n    return(\n        <>\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H1)}\n                icon={<LooksOne />}\n                tooltip={{content: 'Header 1'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H2)}\n                icon={<LooksTwo />}\n                tooltip={{content: 'Header 2'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H3)}\n                icon={<Looks3 />}\n                tooltip={{content: 'Header 3'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H4)}\n                icon={<Looks4 />}\n                tooltip={{content: 'Header 4'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H5)}\n                icon={<Looks5 />}\n                tooltip={{content: 'Header 5'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_H6)}\n                icon={<Looks6 />}\n                tooltip={{content: 'Header 6'}}\n            />\n            <BlockToolbarButton\n                type={getPluginType(editor, ELEMENT_BLOCKQUOTE)}\n                icon={<FormatQuote />}\n                tooltip={{content: 'Insert Blockquote'}}\n            />\n        </>\n    )\n}\n\nexport default HeadersAndQuoteButtons","import {usePlateEditorState} from '@udecode/plate'\nimport {HeadingToolbar} from '@udecode/plate-ui-toolbar'\nimport TextFormatButtons from './text-format-buttons'\nimport AlignContentButtons from './align-content-buttons'\nimport UndoRedoButtons from './undo-redo-buttons'\nimport InsertContentButtons from './insert-content-buttons'\nimport HeadersAndQuoteButtons from './headers-and-quote-buttons'\n\n\nconst Toolbar = () => {\n    const editor = usePlateEditorState();\n    return(\n        <HeadingToolbar>\n            <HeadersAndQuoteButtons editor={editor} />\n            <TextFormatButtons editor={editor} />\n            <UndoRedoButtons editor={editor} />\n            <AlignContentButtons editor={editor} />\n            <InsertContentButtons editor={editor} />\n        </HeadingToolbar>\n    )\n}\n\nexport default Toolbar","import {getColor} from '@conf/utils'\n\n\nconst LinkElement = ({attributes, children, element}: any) => {\n    return(\n        <a \n            {...attributes}\n            style={{\n                color: getColor('light-blue'),\n                textDecoration: 'underline',\n                onMouseOver: 'pointer'\n            }}\n            href={element.url} target='_blank'>{children}\n        </a>\n    );\n}\n\nexport default LinkElement","const TdElement = ({attributes, children, element}: any) => {\n    return(\n        <td\n            {...attributes}\n            style={{\n                border: '1px solid rgba(0,0,0,.55)'\n            }}>{children}</td>\n    );\n}\n\nexport default TdElement","import {createParagraphPlugin, createBlockquotePlugin, createHeadingPlugin,\n    createBoldPlugin, createItalicPlugin, createUnderlinePlugin, createStrikethroughPlugin, \n    createPlugins, createPlateUI, createSubscriptPlugin, createSuperscriptPlugin,\n    createListPlugin, createResetNodePlugin, createSoftBreakPlugin, createExitBreakPlugin,\n    createTablePlugin, createAlignPlugin, ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4,\n    ELEMENT_H5, ELEMENT_H6, ELEMENT_PARAGRAPH, createLinkPlugin, ELEMENT_LINK, createImagePlugin, withPlaceholders\n} from '@udecode/plate'\nimport {ELEMENT_TD} from '@udecode/plate-table'\nimport LinkElement from './link-element'\nimport TdElement from './td-element'\n\n\nconst plugins = createPlugins([\n    // elements\n    createParagraphPlugin(),      // paragraph element\n    createBlockquotePlugin(),     // blockquote element\n    createHeadingPlugin(),        // heading elements\n    createListPlugin(),           // list elements\n    createResetNodePlugin(),\n    createSoftBreakPlugin(),\n    createExitBreakPlugin(),\n    createTablePlugin(),          // tables\n    // links\n    createLinkPlugin(),\n\n    // marks\n    createBoldPlugin(),           // bold mark\n    createItalicPlugin(),         // italic mark\n    createUnderlinePlugin(),      // underline mark\n    createStrikethroughPlugin(),  // strikethrough mark\n    createSuperscriptPlugin(),    // superscript mark\n    createSubscriptPlugin(),      // subscript mark\n\n    // alignment\n    createAlignPlugin({ \n        inject: {\n        props: {\n            validTypes: [\n                ELEMENT_PARAGRAPH,\n                ELEMENT_H1,\n                ELEMENT_H2,\n                ELEMENT_H3,\n                ELEMENT_H4,\n                ELEMENT_H5,\n                ELEMENT_H6\n            ],\n        }\n        }\n    }),\n    createImagePlugin(),\n], {\n    components: createPlateUI({\n        [ELEMENT_LINK]: LinkElement,\n        [ELEMENT_TD]: TdElement\n    })\n});\n\nexport default plugins","import {getDimen} from '@conf/utils'\nimport {Input} from '@mui/material'\n\n\nconst TitleInput = ({title, setTitle}: {title: string, setTitle: Function}) => {\n    return(\n        <Input\n            value={title}\n            placeholder='Title'\n            style={{\n                border: 'none',\n                fontWeight: 500,\n                fontSize: '2rem',\n                marginBottom: getDimen('padding-xs')\n            }}\n            onChange={(e) => setTitle(e.target.value)}\n            />\n    )\n}\n\nexport default TitleInput","import {Plate} from '@udecode/plate'\nimport Toolbar from './toolbar'\nimport plugins from './plugins'\nimport {getDimen} from '@conf/utils'\nimport TitleInput from './title-input'\n\n\nconst NoteEditor = ({note, setTitle, setContent}: {note: any, setTitle: Function, setContent: Function}) => {\n    return(\n        <div style={{paddingTop: getDimen('padding-md')}}>\n            <TitleInput title={note.title} setTitle={setTitle} />\n            <Toolbar />\n            <Plate\n                plugins={plugins}\n                onChange={(newValue) => {\n                    setContent(newValue);\n                }}\n                editableProps={{\n                    placeholder: 'Notes...'\n                }} />\n        </div>\n    );\n}\n\nexport default NoteEditor","import {PermissionsObj} from '@apps/trader-app/services/types'\nimport {Button} from '@components/buttons'\nimport {getDimen} from '@conf/utils'\nimport {List} from '@mui/material'\n\nconst MainToolbar = ({isEditing, showAllNotes, createNewNote, permissions}: {isEditing: boolean, showAllNotes: Function, createNewNote: Function, permissions: PermissionsObj}) => {\n    return(\n        <List>\n            {isEditing ? \n                <Button\n                    disabled={!permissions.canModifyNotes}\n                    onClick={\n                        () => showAllNotes()\n                    }>All Notes</Button>\n                : \n                <Button\n                    disabled={!permissions.canCreateNote}\n                    onClick={() => createNewNote()}\n                    style={{\n                        marginRight: getDimen('padding-xs')\n                    }}>New Note</Button>}\n        </List>\n    )\n}\n\nexport default MainToolbar","import {ColumnBox} from '@components/containers'\nimport {H6} from '@components/text'\n\n\nconst NoNotesFound = () => {\n    return(\n        <ColumnBox\n            style={{\n                width: '100%',\n                height: '40vh',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n            <H6>No Notes Found</H6>\n        </ColumnBox>\n    )\n}\n\nexport default NoNotesFound","import {useContext, useEffect, useState} from 'react'\nimport {usePlateStore} from '@udecode/plate-core'\nimport {PageContainer, PageHeading} from '@apps/trader-app/components'\nimport {ColumnBox} from '@components/containers'\nimport Note from './models'\nimport NoteList from './note-list'\nimport NoteEditor from './note-editor'\nimport MainToolbar from './main-toolbar'\nimport NoNotesFound from './no-notes-found'\nimport {PageStillLoading} from '@apps/trader-app/components'\nimport {NotebookPropTypes} from './types'\nimport { PermissionsContext } from '@apps/trader-app'\nimport { BP } from '@components/text'\n\n\nconst Notebook = ({noteData}: NotebookPropTypes) => {\n    const permissions = useContext(PermissionsContext);\n    // Index of currently chosen note in noteItems\n    const [currentNoteIndex, setCurrentNoteIndex] = useState(-1);\n    const [isEditing, setIsEditing] = useState(false);\n    const [notesHasLoaded, setNotesHasLoaded] = useState(false);\n    const [noteItems, setNoteItems] = useState<Note[]>([]);\n    const setEditorValue = usePlateStore().set.value;\n    useEffect(() => {\n        noteData.then((rawNoteData) => {\n            setNoteItems(Note.fromRawData(rawNoteData));\n            setNotesHasLoaded(true);\n        })\n    }, [])\n    const createNewNote = () => {\n        const newNote = new Note();\n        const newNoteItems = [...noteItems, newNote];\n        setNoteItems(newNoteItems);\n        setCurrentNoteIndex(newNoteItems.length - 1);\n        setEditorValue(newNote.content);\n        setIsEditing(true);\n    }\n    const setCurrentNoteTitle = (title: string) => {\n        if(title.length <= 10000){\n            const newNoteItems = [...noteItems];\n            newNoteItems[currentNoteIndex].title = title;\n            setNoteItems(newNoteItems);\n            newNoteItems[currentNoteIndex].save();\n        }\n    }\n    const setCurrentNoteContent = (content: any) => {\n        const newNoteItems = [...noteItems];\n        newNoteItems[currentNoteIndex].content = content;\n        setNoteItems(newNoteItems);\n        newNoteItems[currentNoteIndex].save();\n\n    }\n    const showAllNotes = () => {\n        const currentNote = noteItems[currentNoteIndex];\n        if(!currentNote.hasBeenSaved()){\n            const newNoteItems = noteItems.filter((note, i) => i !== currentNoteIndex);\n            setNoteItems(newNoteItems);\n        }\n        setIsEditing(false);\n    }\n    if(!notesHasLoaded){\n        return <PageStillLoading />\n    }\n    return(\n        <PageContainer showDataStatusBar={false}>\n            <PageHeading heading='Notes' dontShowSelector={true} />\n            <ColumnBox data-testid='notebook'>\n                <MainToolbar \n                    isEditing={isEditing}\n                    showAllNotes={showAllNotes}\n                    createNewNote={createNewNote}\n                    permissions={permissions}\n                    />\n                {noteItems.length === 0 ?\n                    <NoNotesFound />\n                    : isEditing ?\n                        <NoteEditor\n                            note={noteItems[currentNoteIndex]}\n                            setTitle={setCurrentNoteTitle}\n                            setContent={setCurrentNoteContent}\n                            />\n                        : \n                            <NoteList\n                                removeNoteFromList={(noteIndex: number) => {\n                                    // Call function to remove note from list\n                                    const newNoteItems = noteItems.filter((note, index) => (\n                                        index !== noteIndex\n                                    ));\n                                    setNoteItems(newNoteItems);\n                                }}\n                                noteItems={noteItems}\n                                isEditing={isEditing}\n                                onNoteSelect={(noteIndex: number) => {\n                                    setEditorValue(noteItems[noteIndex].content);\n                                    setIsEditing(true);\n                                    setCurrentNoteIndex(noteIndex);\n                                }}\n                                permissions={permissions}\n                            />\n                    \n                }\n            </ColumnBox>\n        </PageContainer>\n    )\n}\n\nexport default Notebook","import {useEffect, useState} from 'react'\nimport {HttpConst} from '@conf/const'\nimport Http, {HttpErrorType, HttpResponseType} from '@services/http'\n\n\nconst useNoteData = (): Promise<any> => {\n    const {BASE_URL, GET_ALL_NOTES_URL} = HttpConst;\n    const [noteData, setNoteData] = useState<Promise<any>>(new Promise((resolve, reject) => {}));\n    useEffect(() => {\n        Http.get({\n            url: `${BASE_URL}/${GET_ALL_NOTES_URL}/`,\n            successFunc: (resp: HttpResponseType) => {\n                setNoteData(Promise.resolve(resp.data));\n            },\n            errorFunc: (err: HttpErrorType) => {\n                setNoteData(Promise.resolve(err));\n            }\n        })\n    }, [])\n    return noteData;\n}\n\nexport default useNoteData","import BaseHttp, {HttpGetConfigType, HttpPostConfigType, HttpPutConfigType,\n    HttpDeleteConfigType, HttpErrorType, HttpClientType} from '@services/http'\nimport {RouteConst} from '@conf/const'\n\nconst {INFO_LOGIN_ROUTE} = RouteConst;\nconst LOGIN_ROUTE = `/${INFO_LOGIN_ROUTE}`;\n\nconst handleRequest = (httpMethod: Function, config: any): Promise<any> => {\n    return httpMethod({\n        ...config,\n        errorFunc: (err: HttpErrorType) => {\n            if(err.response.status === 401 || err.response.status === 403){\n                Http.navigate(LOGIN_ROUTE);\n            } else {\n                return config.errorFunc(err);\n            }\n        },\n    })\n}\n\nconst get = (config: HttpGetConfigType) => {\n    return handleRequest(BaseHttp.get, config);\n}\n\nconst post = (config: HttpPostConfigType) => {\n    return handleRequest(BaseHttp.post, config);\n}\n\nconst put = (config: HttpPutConfigType) => {\n    return handleRequest(BaseHttp.put, config);\n}\n\nconst httpDelete = (config: HttpDeleteConfigType) => {\n    return handleRequest(BaseHttp.delete, config);\n}\n\n\nconst Http: TraderHttpClient = {\n    ...BaseHttp,\n    get,\n    put,\n    post,\n    delete: httpDelete,\n    navigate: (route: string) => {},\n    initNavigate: function(navigate: NavigateFunc){\n        this.navigate = navigate;\n    }\n}\n\ntype TraderHttpClient = HttpClientType & {\n    navigate: NavigateFunc,\n    initNavigate: {\n        (navigate: NavigateFunc): void\n    }\n}\n\ntype NavigateFunc = {\n    (route: string): void\n}\n\nexport default Http\nexport * from '@services/http'","import {cloneDeep} from 'lodash'\n\n/**\n * To turn raw money calculations to a presentable format\n * If money is negative, it should output money in\n * 2dp with a currency symbol in front, like -$45\n * If its positive, it should output it in 2dp with a currency symbol\n * in front, like $34\n */\nconst formatMoney = (amount: number): string => {\n    if(amount < 0){\n        return `-$${to2dp(amount * -1)}`\n    } else {\n        return `$${to2dp(amount)}`\n    }\n}\n\nconst formatPercent = (num: number) => {\n    return `${to2dp(num)}%`;\n}\n\nconst to2dpstring = (num: number) => {\n    return num.toFixed(2);\n}\n\nconst to2dp = (num: number) => {\n    return parseFloat(num.toFixed(2));\n}\n\nconst objArrayTo2dp = <T extends {[key: string]: any}>(objArray: T[], objArrayKey: keyof T): T[] => {\n    return objArray.map((obj) => (\n        {...obj, [objArrayKey]: to2dp(obj[objArrayKey])}\n    ));\n}\n\nconst objObjArrayTo2dp = <T extends {[key: string]: any}>(data: T, objKey: keyof T[keyof T][number]): T => {\n    const data2dp: T = cloneDeep(data);\n    Object.keys(data).forEach((skey) => {\n        const key = skey as keyof T;\n        data2dp[key] = objArrayTo2dp<T[keyof T]>(data[key], objKey) as T[keyof T];\n    })\n    return data2dp;\n}\n\nexport {\n    formatMoney,\n    to2dp,\n    to2dpstring,\n    formatPercent,\n    objArrayTo2dp,\n    objObjArrayTo2dp\n}","import {RowBox} from '@components/containers'\nimport {Button} from '@components/buttons'\nimport {getDimen} from '@conf/utils'\nimport {DialogButtonsPropTypes} from './types'\n\n\nconst Buttons = ({onOkClick, onCancelClick, okButtonColor, okButtonContent, okButtonProps, showCancelButton}: DialogButtonsPropTypes) => {\n    return(\n        <RowBox style={{\n            justifyContent: 'right',\n            marginTop: getDimen('padding-xs')\n            }}>\n            {showCancelButton !== undefined && !showCancelButton?\n                null\n                : <Button\n                    style={{\n                        marginRight: getDimen('padding-xs')\n                    }}\n                    onClick={() => onCancelClick()}\n                    color='neutral'>Cancel</Button>\n            }\n            <Button\n                color={okButtonColor}\n                onClick={(e) => onOkClick()}\n                {...okButtonProps}>\n                {okButtonContent ? \n                    typeof(okButtonContent) === 'string' ? 'ok' : okButtonContent\n                    : 'ok'\n                }\n            </Button>\n        </RowBox>\n    )\n}\n\nexport default Buttons","import {Dialog as MuiDialog} from '@mui/material'\nimport {ColumnBox} from '@components/containers'\nimport {getDimen} from '@conf/utils'\nimport {H6} from '@components/text'\nimport Buttons from './buttons'\nimport {DialogPropTypes} from './types'\nimport { useEffect } from 'react'\n\n\nconst Dialog = ({children, onOkClick, title, onClose, open, ...props}: DialogPropTypes) => {\n    return(\n        <MuiDialog onClose={() => onClose()} open={open}>\n            <div onKeyPress={(e: any) => {\n                if(e.key === 'Enter'){\n                    onOkClick();\n                }\n            }}>\n                <ColumnBox\n                    style={{\n                        margin: getDimen('padding-md')\n                    }}>\n                    <H6 style={{textAlign: 'center'}}>{title}</H6>\n                    {children}\n                    <Buttons \n                        onOkClick={onOkClick}\n                        {...props} />\n                </ColumnBox>\n            </div>\n        </MuiDialog>\n    )\n}\n\nexport default Dialog","import {cloneObj, sameDay, sameMonth, sameWeek, sameYear} from '@root/utils'\nimport {balanceCalc} from './common-calc'\nimport {AccountData, Trade} from '..'\nimport {CashGraphCalc} from './types'\n\n/**\n * For calculating the datasets for the Cash Graph on the\n * Cash And Gains page\n */\nconst cashGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: CashGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameDay(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameWeek(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameMonth(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    const accData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameYear(trade.closeTime, today)\n    ));\n    return graphCalc(accData);\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData);\n}\n\nconst graphCalc = (accountData: AccountData) => {\n    const initialDeposit = accountData.deposits.length !== 0 ? accountData.deposits[0].amount : 0\n    return [\n        {tradeNo: 0, balance: initialDeposit},\n        ...balanceCalc(accountData)\n            .map((calc, i) => ({\n                tradeNo: i + 1, balance: calc.balance\n            }))\n    ]\n}\n\nexport default cashGraphCalc\nexport {\n    graphCalc\n}","import {AccountData, Trade, Deposit, Withdrawal} from '@root/types'\nimport {FAR_IN_THE_FUTURE_YEAR} from '@root/utils'\nimport {BalanceCalcItem} from './types'\n\n\n/**\n * @returns an array of objects each of which hold a trade with the balance \n *  at the time the trade was made\n */\nconst balanceCalc = (accountData: AccountData): BalanceCalcItem[] => {\n    let tradesIndex = 0;\n    let withdrawalsIndex = 0;\n    let depositsIndex = 0;\n    let currentBalance = 0;\n    const calc: BalanceCalcItem[] = [];\n    while(tradesIndex !== accountData.trades.length){\n        const currentDeposit = accountData.deposits[depositsIndex];\n        const currentWithdrawal = accountData.withdrawals[withdrawalsIndex];\n        const currentTrade = accountData.trades[tradesIndex];\n        const [depositPos, withdrawalPos, tradePos] = getDatePos(currentDeposit, currentWithdrawal, currentTrade);\n        const tradeIsEarliest = () => tradePos === 1;\n        const withdrawalIsEarliest = () => withdrawalPos === 1;\n        const withdrawalIsSecond = () => withdrawalPos === 2;\n        const depositIsEarliest = () => depositPos === 1;\n        const depositIsSecond = () => depositPos === 2;\n        const addTradeToBalance = () => {\n            currentBalance += currentTrade.profitLoss;\n            tradesIndex += 1;\n        }\n        const decreaseWithdrawalFromBalance = () => {\n            currentBalance -= currentWithdrawal.amount;\n            withdrawalsIndex += 1;\n        }\n        const addDepositToBalance = () => {\n            currentBalance += currentDeposit.amount;\n            depositsIndex += 1;\n        }\n        // Trade is earliest        \n        if(tradeIsEarliest()){\n            addTradeToBalance();\n            // withdrawal on the same day\n            if(withdrawalIsEarliest()){\n                decreaseWithdrawalFromBalance();\n            }\n            // deposit on the same day\n            if(depositIsEarliest()){\n                addDepositToBalance();\n            }\n        } else if(depositIsEarliest()){\n            addDepositToBalance();\n            if(withdrawalIsSecond()){\n                decreaseWithdrawalFromBalance();\n            }\n            // At this point, trade can only be the 3rd\n            addTradeToBalance();\n        } else {\n            // At this point, only the withdrawal can be the earliest\n            decreaseWithdrawalFromBalance();\n            if(depositIsSecond()){\n                addDepositToBalance();\n            }\n            addTradeToBalance();\n        }\n        calc.push({trade: currentTrade, balance: currentBalance});\n    }\n    return calc\n}\n\n/**\n * Returns a triple with each slot holding the position of the trade, deposit and withdrawal\n * indicating which took place the earliest, second earliest and latest.\n * For example, if the deposit has the earliest date, withdrawal with the second earliest and\n * trade with the latest, what will be returned will look like this:\n * [1, 2, 3], because the deposit is the first earliest, the withdrawal is the second earliest\n * and the trade is the latest.\n * The positions in the triple are arranged in that order: deposits position, withdrawal's\n * position and trade's position \n * */\nconst getDatePos = (deposit: Deposit, withdrawal: Withdrawal, trade: Trade) => {\n    const depositDate = deposit === undefined ? new Date(FAR_IN_THE_FUTURE_YEAR, 11, 31)\n        : new Date(deposit.time);\n    const withdrawalDate = withdrawal === undefined ? new Date(FAR_IN_THE_FUTURE_YEAR, 10, 30) \n        : new Date(withdrawal.time);\n    const tradeDate = new Date(trade.closeTime);\n    const posTriple = [-1, -1, -1];\n    // Their indexes in the posTriple\n    const DEPOSIT = 0;\n    const WITHDRAWAL = 1;\n    const TRADE = 2;\n    // Their positions\n    const UNSET = -1;\n    const FIRST = 1;\n    const SECOND = 2;\n    const THIRD = 3;\n    // To check if a slot in the posTriple has already been set\n    const posAlreadySet = (pos: number) => pos !== -1\n    const tradeDateIsEarliest = () => tradeDate <= depositDate && tradeDate <= withdrawalDate;\n    const depositDateIsEarliest = () => depositDate <= tradeDate && depositDate <= withdrawalDate;\n    const withdrawalDateIsEarliest = () => withdrawalDate <= tradeDate && withdrawalDate <= depositDate;\n    const sameDate = (date1: Date, date2: Date) => date1 === date2\n    /**\n     * possible positions:\n     *  trade, deposit, withdrawal\n     *  trade, withdrawal, deposit\n     *  deposit, trade, withdrawal\n     *  deposit, withdrawal, trade\n     *  withdrawal, deposit, trade\n     *  withdrawal, trade, deposit\n     * There is also a possibility that any of the dates may be the same\n     */\n    if(tradeDateIsEarliest()){\n        posTriple[TRADE] = FIRST;\n        posTriple[DEPOSIT] = sameDate(tradeDate, depositDate) ? FIRST : UNSET;\n        posTriple[WITHDRAWAL] = sameDate(tradeDate, withdrawalDate) ? FIRST : UNSET;\n        // At this point, the positions of deposit and withdrawal don't matter\n        // because as long as trade comes first, the only other things that\n        // need to be checked are if the deposits and withdrawals have the same position\n    } else if(depositDateIsEarliest()){\n        posTriple[DEPOSIT] = FIRST;\n        posTriple[TRADE] = sameDate(tradeDate, depositDate) ? FIRST : UNSET;\n        posTriple[WITHDRAWAL] = sameDate(withdrawalDate, depositDate) ? FIRST : UNSET;\n        if(tradeDate <= withdrawalDate){\n            /**\n             * Checking if the position is already set to consider the scenario\n             * where tradeDate is equal to depositDate, and its position is already 1st\n             */\n            posTriple[TRADE] = posAlreadySet(TRADE) ? posTriple[TRADE] : SECOND;\n            /**\n             * If withdrawal's position is already set, that means withdrawalDate is\n             * equal to depositDate and so, the date is already 1st\n             */\n            if(sameDate(tradeDate, withdrawalDate)){\n                posTriple[WITHDRAWAL] = posAlreadySet(WITHDRAWAL) ? posTriple[WITHDRAWAL] : SECOND;    \n            } else {\n                /**\n                 * If tradeDate comes before withdrawalDate, then it's not possible for\n                 * withdrawal's position to have been set. If withdrawal's position was\n                 * set, then it must be equal to depositDate, which is the earliest, but\n                 * if it was equal to depositDate, then tradeDate could not have come before\n                 * it, so the code here would never have been reached\n                 */\n                posTriple[WITHDRAWAL] = THIRD;\n            }\n        } else {\n            /**\n             * At this point, withdrawalDate is sure to be before tradeDate\n             */\n            posTriple[TRADE] = THIRD;\n            posTriple[WITHDRAWAL] = SECOND;\n        }\n    } else if(withdrawalDateIsEarliest()){\n        posTriple[WITHDRAWAL] = FIRST;\n        posTriple[TRADE] = sameDate(tradeDate, withdrawalDate) ? FIRST : UNSET;\n        posTriple[DEPOSIT] = sameDate(depositDate, withdrawalDate) ? FIRST : UNSET;\n        if(tradeDate <= depositDate){\n            /**\n             * Checking if the position is already set to consider the scenario\n             * where tradeDate is equal to withdrawalDate, and its position is already 1st\n             */\n            posTriple[TRADE] = posAlreadySet(TRADE) ? posTriple[TRADE] : SECOND;\n            /**\n             * If deposit's position is already set, that means withdrawalDate is\n             * equal to depositDate and so, the date is already 1st\n             */\n            if(sameDate(tradeDate, depositDate)){\n                posTriple[DEPOSIT] = posAlreadySet(DEPOSIT) ? posTriple[DEPOSIT] : SECOND;\n            } else {\n                /**\n                 * If tradeDate comes before depositDate, then it's not possible for\n                 * deposit's position to have been set. If deposit's position was\n                 * set, then it must be equal to withdrawalDate, which is the earliest, but\n                 * if it was equal to withdrawalDate, then tradeDate could not have come before\n                 * it, so the code here would never have been reached\n                 */\n                posTriple[DEPOSIT] = THIRD;\n            }\n        } else {\n            /**\n             * At this point, depositDate is sure to be before tradeDate\n             */\n            posTriple[TRADE] = THIRD;\n            posTriple[DEPOSIT] = SECOND;\n        }\n    }\n    return posTriple\n}\n\nexport {\n    balanceCalc\n}","import {Trade} from '@root/types'\nimport {cloneObj, sameDay, sameMonth, sameWeek, sameYear, approximate} from '@root/utils'\nimport {AccountData} from '..'\nimport { balanceCalc } from './common-calc'\nimport {GainsGraphCalc, GainsGraphItem} from './types'\n\n/**\n * Gains graph is a graph of cummulative gains percentages against tradeNo\n * gainsPercent is defined as profitLoss / totalDeposits\n * Each item in the object is an array of objects\n * with keys tradeNo and gainsPercent.\n * tradeNo is the index of a trade in a chronologically ordered\n * array of trades. For example, if trade A is the first trade a user\n * ever made and trade B was made after it, then trade A will have a tradeNo\n * of 0 and trade B will have a tradeNo of 1\n * The gainsPercent is the cummulative profit / loss of that trade.\n * That is the gainsPercent is the addition of all the profit profit / losses up to\n * the one with the current tradeNo divided by all the deposits up to the last deposit that happened\n * on or before the trade with the current tradeNo took place\n * Each field in the calculations object shows different views over the\n * same data, which correspond to different time ranges:\n * today, this week, this month, this year and all time\n */\nconst gainsGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: GainsGraphCalc = {\n        todayGraphCalc: todayGainsPercent(accountData, today),\n        thisWeekGraphCalc: thisWeekGainsPercent(accountData, today),\n        thisMonthGraphCalc: thisMonthGainsPercent(accountData, today),\n        thisYearGraphCalc: thisYearGainsPercent(accountData, today),\n        allTimeGraphCalc: allTimeGainsPercent(accountData)\n    }\n    return calculations;\n}\n\nconst todayGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData: AccountData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameDay(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisWeekGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData: AccountData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameWeek(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisMonthGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData: AccountData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameMonth(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst thisYearGainsPercent = (accountData: AccountData, today: Date) => {\n    const accData: AccountData = cloneObj(accountData);\n    accData.trades = accData.trades.filter((trade: Trade) => (\n        sameYear(trade.closeTime, today)\n    ));\n    return gainsPercent(accData);\n}\n\nconst allTimeGainsPercent = (accountData: AccountData) => {\n    return gainsPercent(accountData);\n}\n\nconst gainsPercent = (accountData: AccountData) => {\n    return [\n        {tradeNo: 0, gainsPercent: 0},\n        ...balanceCalc(accountData)\n            .map((calc, i) => ({\n                tradeNo: i + 1, gainsPercent: gain(calc.trade.profitLoss, calc.balance)\n            }))\n    ]\n}\n\nconst gain = (profitLoss: number, balance: number) => {\n    if(balance == 0){\n        return 0;\n    }\n    return (profitLoss / balance) * 100;\n}\n\nexport default gainsGraphCalc","import {AccountData} from '..'\nimport {CashAndGainsCalculations} from './types'\nimport cashGraphCalc from './cash-graph-calc'\nimport gainsGraphCalc from './gains-graph-calc'\n\n\nconst cashAndGainsCalculations = (accountData: AccountData) => {\n    const calculations: CashAndGainsCalculations = {\n        cashGraphCalc: cashGraphCalc(accountData),\n        gainsGraphCalc: gainsGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default cashAndGainsCalculations\nexport {graphCalc} from './cash-graph-calc'","import {AccountData, Trade} from './types'\n\n\nconst totalNoOfLongs = (data: AccountData | Trade[]) => {\n    let noOfLongs = 0;\n    if(Array.isArray(data)){\n        noOfLongs = noOfLongsFromTradeArray(data);\n    } else {\n        noOfLongs = noOfLongsFromAccountData(data);\n    }\n    return noOfLongs;\n}\n\nconst noOfLongsFromTradeArray = (trades: Trade[]) => {\n    let noOfLongs = 0;\n    for(const trade of trades){\n        if(trade.action === 'buy'){\n            noOfLongs += 1;\n        }\n    }\n    return noOfLongs\n}\n\nconst noOfLongsFromAccountData = (accountData: AccountData) => {\n    let noOfLongs = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            noOfLongs += 1;\n        }\n    }\n    return noOfLongs\n}\n\nconst totalNoOfShorts = (data: AccountData | Trade[]) => {\n    let noOfShorts = 0;\n    if(Array.isArray(data)){\n        noOfShorts = noOfShortsFromTradesArray(data);\n    } else {\n        noOfShorts = noOfShortsFromAccountData(data);\n    }\n    return noOfShorts;\n}\n\nconst noOfShortsFromTradesArray = (trades: Trade[]) => {\n    let noOfShorts = 0;\n    for(const trade of trades){\n        if(trade.action === 'sell'){\n            noOfShorts += 1;\n        }\n    }\n    return noOfShorts\n}\n\nconst noOfShortsFromAccountData = (accountData: AccountData) => {\n    let noOfShorts = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            noOfShorts += 1;\n        }\n    }\n    return noOfShorts\n}\n\nconst totalNoOfLongsWon = (accountData: AccountData) => {\n    let noOfLongsWon = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            if(trade.profitLoss > 0){\n                noOfLongsWon += 1;\n            }\n        }\n    }\n    return noOfLongsWon;\n}\n\nconst longsWonPercent = (accountData: AccountData) => {\n    const noOfLongsWon = totalNoOfLongsWon(accountData);\n    const noOfLongs = totalNoOfLongs(accountData);\n    if(noOfLongs === 0) return 0\n    return (noOfLongsWon / noOfLongs) * 100;\n}\n\nconst totalNoOfShortsWon = (accountData: AccountData) => {\n    let noOfShortsWon = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            if(trade.profitLoss > 0){\n                noOfShortsWon += 1;\n            }\n        }\n    }\n    return noOfShortsWon;\n}\n\nconst shortsWonPercent = (accountData: AccountData) => {\n    const noOfShortsWon = totalNoOfShortsWon(accountData);\n    const noOfShorts = totalNoOfShorts(accountData);\n    if(noOfShorts === 0) return 0\n    return (noOfShortsWon / noOfShorts) * 100\n}\n\n\n/** Counts the number of profitable trades in account */\nconst totalNoOfWinningTrades = (data: AccountData | Trade[]) => {\n    let totalNoOfWinningTrades = 0;\n    if(Array.isArray(data)){\n        totalNoOfWinningTrades = totalNoOfWinningTradesFromTradesArray(data);\n    } else {\n        totalNoOfWinningTrades = totalNoOfWinningTradesFromAccountData(data);\n    }\n    return totalNoOfWinningTrades\n}\n\nconst totalNoOfWinningTradesFromAccountData = (accountData: AccountData) => {\n    let totalNoOfWinningTrades = 0;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss > 0){\n            totalNoOfWinningTrades += 1;\n        }\n    }\n    return totalNoOfWinningTrades\n}\n\nconst totalNoOfWinningTradesFromTradesArray = (trades: Trade[]) => {\n    let totalNoOfWinningTrades = 0;\n    for(const trade of trades){\n        if(trade.profitLoss > 0){\n            totalNoOfWinningTrades += 1;\n        }\n    }\n    return totalNoOfWinningTrades\n}\n\n/** \n * Calculates winning trades divided by total number of trades\n * expressed as a percentage\n */\n const winRate = (data: AccountData | Trade[]) => {\n    const noOfWinningTrades = totalNoOfWinningTrades(data);\n    const noOfTradess = noOfTrades(data);\n    if(noOfTradess === 0) return 0\n    return (noOfWinningTrades / noOfTradess) * 100\n}\n\n/** Counts the number of trades in account */\nconst noOfTrades = (data: AccountData | Trade[]) => {\n    if(Array.isArray(data)){\n        return data.length\n    }\n    return data.trades.length\n}\n\nexport {\n    totalNoOfLongs,\n    totalNoOfShorts, \n    longsWonPercent,\n    shortsWonPercent,\n    totalNoOfLongsWon,\n    totalNoOfShortsWon,\n    totalNoOfWinningTrades,\n    winRate,\n    noOfTrades\n}","import {AccountData} from '@root/types'\nimport {ExpensesTableCalcItem} from '..'\nimport {ExpensesTableCalc} from './types'\n\n\nconst expensesTableCalc = (accountData: AccountData) => {\n    const expensesPerPair: ExpensesPerPair = calcExpensesPerPair(accountData);\n    const calculations: ExpensesTableCalc = Object.keys(expensesPerPair)\n        .map((pair): ExpensesTableCalcItem => ({\n            pair,\n            commission: expensesPerPair[pair].commissions,\n            swap: expensesPerPair[pair].swap\n   }))\n    return calculations\n}\n\nconst calcExpensesPerPair = (accountData: AccountData) => {\n    const expensesPerPair: ExpensesPerPair = {}\n    for(const trade of accountData.trades){\n        if(!(trade.pair in expensesPerPair)){\n            expensesPerPair[trade.pair] = {commissions: 0, swap: 0}\n        }\n        expensesPerPair[trade.pair].commissions += \n            trade.commission !== undefined ? trade.commission : 0;\n        expensesPerPair[trade.pair].swap += \n            trade.swap !== undefined ? trade.swap : 0;\n    }\n    return expensesPerPair\n}\n\ntype ExpensesPerPair = {[key: string]: {commissions: number, swap: number}}\n\n\nexport default expensesTableCalc","import {AccountData} from '@root/types'\nimport expensesTableCalc from './expenses-table-calc'\nimport {ExpensesCalc} from './types'\n\n\nconst expensesCalculations = (accountData: AccountData) => {\n    const calculations: ExpensesCalc = {\n        expensesTableCalc: expensesTableCalc(accountData)\n    }\n    return calculations\n}\n\n\nexport default expensesCalculations","import overviewCalculations from '@root/overview-calculations'\nexport * from '@root/overview-calculations/types'\n\nexport * from '@root/types'\n\nimport cashAndGainsCalculations from '@root/cash-and-gains-calculations'\nexport * from '@root/cash-and-gains-calculations/types'\n\nimport expensesCalculations from '@root/expenses-calculations'\nexport * from '@root/expenses-calculations/types'\n\nimport longShortAnalysisCalculations from '@root/long-short-analysis-calculations'\nexport * from '@root/long-short-analysis-calculations/types'\n\nimport pairsAnalysisCalculations from '@root/pairs-analysis-calculations'\nexport * from '@root/pairs-analysis-calculations/types'\n\nimport tradingTimeAnalysisCalculations from '@root/trading-time-analysis-calculations'\nexport * from '@root/trading-time-analysis-calculations/types'\n\nimport periodAnalysisCalculations from '@root/period-analysis-calculations'\nexport * from '@root/period-analysis-calculations/types'\n\nexport {\n    overviewCalculations,\n    cashAndGainsCalculations,\n    expensesCalculations,\n    longShortAnalysisCalculations,\n    pairsAnalysisCalculations,\n    tradingTimeAnalysisCalculations,\n    periodAnalysisCalculations\n}\n","import {AccountData} from '..'\n\n/**\n * The total profit / loss gotten from all longs (trade.action = 'buy')\n * in accountData.trades\n * */\n const totalLongsProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'buy'){\n            totalProfitLoss += trade.profitLoss\n        }\n    }\n    return totalProfitLoss\n}\n\n/**\n * The total profit / loss gotten from all longs (trade.action = 'buy')\n * in accountData.trades\n * */\n const totalShortsProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        if(trade.action === 'sell'){\n            totalProfitLoss += trade.profitLoss\n        }\n    }\n    return totalProfitLoss\n}\n\nexport {\n    totalLongsProfitLoss,\n    totalShortsProfitLoss\n}","import {AccountData} from '..'\nimport {LongShortAnalysisCalculations} from './types'\nimport longShortComparisonTableCalc from './long-short-comp-table-calc'\nimport longShortComparisonGraphCalc from './long-short-comp-graph-calc'\nimport longBalanceGraphCalc from './long-balance-graph-calc'\nimport shortBalanceGraphCalc from './short-balance-graph-calc'\n\n\nconst longShortAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: LongShortAnalysisCalculations = {\n        longShortComparisonTableCalc: longShortComparisonTableCalc(accountData),\n        longShortComparisonGraphCalc: longShortComparisonGraphCalc(accountData),\n        longBalanceGraphCalc: longBalanceGraphCalc(accountData),\n        shortBalanceGraphCalc: shortBalanceGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default longShortAnalysisCalculations","import {AccountData} from '..'\nimport {LongBalanceGraphCalc} from './types'\n\n\n/**\n * Profit / loss of longs against an index no in which a trade having an index\n * number 1 implies that it was carried out before a trade with an index number 2\n */\nconst longBalanceGraphCalc = (accountData: AccountData) => {\n    let cummulativeResult = 0;\n    const calculations: LongBalanceGraphCalc = [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => trade.action === 'buy')\n            .map((trade, i) => {\n                cummulativeResult += trade.profitLoss;\n                return {\n                    tradeNo: i + 1,\n                    result: cummulativeResult\n                }\n            })\n    ]\n    return calculations\n}\n\nexport default longBalanceGraphCalc","import {AccountData} from '..'\nimport {totalLongsProfitLoss, totalShortsProfitLoss} from './common-calc'\nimport {LongShortComparisonGraphCalc} from './types'\n\n\n/**\n * Returns an array of 2 items, 1 containing the profit / loss (result)\n * of all longs and the other containing the result of all shorts\n */\nconst longShortComparisonGraphCalc = (accountData: AccountData) => {\n    const calculations: LongShortComparisonGraphCalc = [\n        {label: 'long', result: totalLongsProfitLoss(accountData)},\n        {label: 'short', result: totalShortsProfitLoss(accountData)}\n    ]\n    return calculations\n}\n\nexport default longShortComparisonGraphCalc","import {AccountData} from '..'\nimport {longsWonPercent, shortsWonPercent, totalNoOfLongs, totalNoOfShorts} from '../common-calc'\nimport {totalLongsProfitLoss, totalShortsProfitLoss} from './common-calc'\nimport {LongShortComparisonTableCalc} from './types'\n\nconst longShortComparisonTableCalc = (accountData: AccountData) => {\n    const calculations: LongShortComparisonTableCalc = {\n        long: {\n            noOfTrades: totalNoOfLongs(accountData),\n            result: totalLongsProfitLoss(accountData),\n            winRate: longsWonPercent(accountData),\n            aveProfit: aveLongsProfitLoss(accountData),\n            rrr: longsRrr(accountData)\n        },\n        short: {\n            noOfTrades: totalNoOfShorts(accountData),\n            result: totalShortsProfitLoss(accountData),\n            winRate: shortsWonPercent(accountData),\n            aveProfit: aveShortsProfitLoss(accountData),\n            rrr: shortsRrr(accountData)\n        }\n    }\n    return calculations\n}\n\nconst aveLongsProfitLoss = (accountData: AccountData) => {\n    const longsProfit = totalLongsProfitLoss(accountData);\n    const noOfLongs = totalNoOfLongs(accountData);\n    if(noOfLongs === 0) return 0;\n    return longsProfit / noOfLongs\n}\n\nconst aveShortsProfitLoss = (accountData: AccountData) => {\n    const shortsProfit = totalShortsProfitLoss(accountData);\n    const noOfShorts = totalNoOfShorts(accountData);\n    if(noOfShorts === 0) return 0;\n    return shortsProfit / noOfShorts\n}\n\n/** @todo: calculate the risk reward ratio */\nconst longsRrr = (accountData: AccountData) => {\n    return 0\n}\n\n/** @todo: calculate the risk reward ratio */\nconst shortsRrr = (accountData: AccountData) => {\n    return 0\n}\n\nexport default longShortComparisonTableCalc","import {AccountData} from '..'\nimport {ShortBalanceGraphCalc} from './types'\n\n\n/**\n * Profit / loss of longs against an index no in which a trade having an index\n * number 1 implies that it was carried out before a trade with an index number 2\n */\nconst shortBalanceGraphCalc = (accountData: AccountData) => {\n    let cummulativeResult = 0;\n    const calculations: ShortBalanceGraphCalc = [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => trade.action === 'sell')\n            .map((trade, i) => {\n                cummulativeResult += trade.profitLoss;\n                return {\n                    tradeNo: i + 1,\n                    result: cummulativeResult\n                }\n            })\n    ]\n    return calculations\n}\n\nexport default shortBalanceGraphCalc","import {AccountData} from '..'\nimport {sameDay, sameWeek, sameMonth, sameYear} from '@root/utils'\nimport {OverviewAccountReturnsGraphCalc} from './types'\n\n/**\n * For calculating the datasets for the Account Returns graph\n * on the overview page of the trader app\n */\n\n/**\n * Each item in the object is an array of objects\n * with keys tradeNo and result.\n * tradeNo is the index of a trade in a chronologically ordered\n * array of trades. For example, if trade A is the first trade a user\n * ever made and trade B was made after it, then trade A will have a tradeNo\n * of 0 and trade B will have a tradeNo of 1\n * The result is the cummulative profit / loss of that trade.\n * That is the result is the addition of all the previous profit / losses and the profitLoss of\n * the trade with the current tradeNo\n * Each field in the calculations object shows different views over the\n * same data, which correspond to different time ranges:\n * today, this week, this month, this year and all time\n */\nconst accountReturnsGraphCalc = (accountData: AccountData, today: Date = new Date()) => {\n    const calculations: OverviewAccountReturnsGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameDay, today);\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameWeek, today);\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameMonth, today);\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, sameYear, today);\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData, () => true, today);\n}\n\n/**\n * Create graph calc with the only the subset of the trades whose exit_date\n * satisfies the period condition and makes it return true\n */\nconst graphCalc = (accountData: AccountData, periodCondition: Function, today: Date) => {\n    let cummulativeProfitLoss = 0;\n    return [\n        {tradeNo: 0, result: 0},\n        ...accountData.trades\n            .filter((trade) => periodCondition(trade.closeTime, today))\n            .map((trade, i) => {\n                cummulativeProfitLoss += trade.profitLoss;\n                return {\n                    tradeNo: i + 1,\n                    result: cummulativeProfitLoss\n                }\n            })\n    ]\n}\n\nexport default accountReturnsGraphCalc","import overviewCardsCalc from './overview-cards-calc'\nimport statsCalc from './overview-stats-calc'\nimport weeklySummaryCalc from './weekly-summary-calc'\nimport accountReturnsGraphCalc from './account-returns-graph-calc'\nimport {OverviewCalculations} from './types'\nimport {AccountData} from '@root/types'\n\n\nconst overviewCalculations = (accountData: AccountData) => {\n    const calculations: OverviewCalculations = {\n        cardsCalc: overviewCardsCalc(accountData),\n        statsCalc: statsCalc(accountData),\n        weeklySummaryCalc: weeklySummaryCalc(accountData),\n        accountReturnsGraphCalc: accountReturnsGraphCalc(accountData)\n    };\n    return calculations;\n}\n\n\nexport default overviewCalculations\nexport {aveRRR} from './overview-stats-calc'","/**\n * Functions for calculating the info on the overview cards\n */\n\nimport {winRate, noOfTrades} from '@root/common-calc'\nimport {OverviewCardsCalc} from './types'\nimport {AccountData} from '..'\n\nconst overviewCardsCalc = (accountData: AccountData) => {\n    const calculations: OverviewCardsCalc = {\n        totalBalance: totalBalance(accountData),\n        winRate: winRate(accountData),\n        noOfTrades: noOfTrades(accountData),\n        absGain: absGain(accountData)\n    }\n    return calculations;\n}\n\n/**\n * To calculate the total balance of the account\n * Adds all profits, losses (always negative), deposits and subtracts withdrawals\n * */\n const totalBalance = (accountData: AccountData) => {\n    let totalBalance = totalProfitLoss(accountData) + totalDeposits(accountData)\n        - totalWithdrawals(accountData) - totalExpenses(accountData);\n    return totalBalance;\n}\n\n/** Sums all profit and losses */\nconst totalProfitLoss = (accountData: AccountData) => {\n    let totalProfitLoss = 0;\n    for(const trade of accountData.trades){\n        totalProfitLoss += trade.profitLoss;\n    }\n    return totalProfitLoss;\n}\n\n/** Sums all deposits */\nconst totalDeposits = (accountData: AccountData) => {\n    let totalDeposits = 0;\n    for(const deposit of accountData.deposits){\n        totalDeposits += deposit.amount;\n    }\n    return totalDeposits;\n}\n\n/** Sums all withdrawals */\nconst totalWithdrawals = (accountData: AccountData) => {\n    let totalWithdrawals = 0;\n    for(let withdrawal of accountData.withdrawals){\n        totalWithdrawals += withdrawal.amount;\n    }\n    return totalWithdrawals;\n}\n\n\n/** \n * Calculates total profit and loss divided by total deposits\n * expressed as a precentage\n */\nconst absGain = (accountData: AccountData) => {\n    const profitLoss = totalProfitLoss(accountData);\n    const deposits = totalDeposits(accountData);\n    if(deposits === 0) return 0\n    return (profitLoss / deposits) * 100;\n}\n\nconst totalExpenses = (accountData: AccountData) => {\n    let expenses = 0;\n    for(const trade of accountData.trades){\n        if(trade.commission){\n            expenses += trade.commission;\n        }\n        if(trade.swap){\n            expenses += trade.swap;\n        }\n    }\n    return expenses;\n}\n\nexport default overviewCardsCalc","import {totalNoOfWinningTrades, winRate} from '@root/common-calc'\nimport {graphCalc as balanceCalc} from '@root/cash-and-gains-calculations'\nimport {CashGraphItem} from '@root/cash-and-gains-calculations/types'\nimport {totalNoOfLongs, totalNoOfShorts, longsWonPercent,\n    shortsWonPercent, totalNoOfLongsWon, totalNoOfShortsWon} from '../common-calc'\nimport {OverviewStatsCalc} from './types'\nimport {AccountData} from '../types'\nimport {Trade} from '..'\n\n\nconst statsCalc = (accountData: AccountData) => {\n    const calculations: OverviewStatsCalc = {\n        aveProfit: aveProfit(accountData),\n        aveLoss: aveLoss(accountData),\n        longsWonPercent: longsWonPercent(accountData), \n        noOfLongsWon: totalNoOfLongsWon(accountData),\n        noOfLongs: totalNoOfLongs(accountData),\n        shortsWonPercent: shortsWonPercent(accountData),\n        noOfShortsWon: totalNoOfShortsWon(accountData),\n        noOfShorts: totalNoOfShorts(accountData),\n        bestTrade: bestTrade(accountData),\n        worstTrade: worstTrade(accountData),\n        highestBalance: highestBalance(accountData),\n        aveRRR: aveRRR(accountData),\n        profitFactor: profitFactor(accountData),\n        expectancy: expectancy(accountData),\n        lots: totalLots(accountData),\n        commissions: totalCommissions(accountData)\n    }\n    return calculations;\n}\n\nconst aveProfit = (accountData: AccountData | Trade[]) => {\n    const profit = totalProfit(accountData);\n    const noOfWinningTrades = totalNoOfWinningTrades(accountData);\n    if(noOfWinningTrades === 0) return 0;\n    return profit / noOfWinningTrades;\n}\n\nconst totalProfit = (data: AccountData | Trade[]) => {\n    let totalProfit = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades;\n    }\n    for(const trade of trades){\n        if(trade.profitLoss > 0){\n            totalProfit += trade.profitLoss;\n        }\n    }\n    return totalProfit;\n}\n\nconst aveLoss = (data: AccountData | Trade[]) => {\n    // Multiplying by -1 to remove the negative sign\n    // When displayed, it should be -$loss, not -$-loss\n    const loss = totalLoss(data) * -1;\n    const noOfLosingTrades = totalNoOfLosingTrades(data);\n    if(noOfLosingTrades === 0) return 0;\n    return loss / noOfLosingTrades\n}\n\nconst totalLoss = (data: AccountData | Trade[]) => {\n    let totalLoss = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades;\n    }\n    for(const trade of trades){\n        if(trade.profitLoss < 0){\n            totalLoss += trade.profitLoss;\n        }\n    }\n    return totalLoss;\n}\n\nconst totalNoOfLosingTrades = (data: AccountData | Trade[]) => {\n    let noOfLosingTrades = 0;\n    let trades: Trade[];\n    if(Array.isArray(data)){\n        trades = data;\n    } else {\n        trades = data.trades\n    }\n    for(const trade of trades){\n        if(trade.profitLoss < 0){\n            noOfLosingTrades += 1;\n        }\n    }\n    return noOfLosingTrades;\n}\n\n/** Trade with highest profit */\nconst bestTrade = (accountData: AccountData) => {\n    if(accountData.trades.length === 0) return 0\n    let bestTrade = accountData.trades[0].profitLoss;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss > bestTrade){\n            bestTrade = trade.profitLoss;\n        }\n    }\n    return bestTrade;\n}\n\n/** Trade with the lowest profit (or loss) */\nconst worstTrade = (accountData: AccountData) => {\n    if(accountData.trades.length === 0) return 0\n    let worstTrade = accountData.trades[0].profitLoss;\n    for(const trade of accountData.trades){\n        if(trade.profitLoss < worstTrade){\n            worstTrade = trade.profitLoss;\n        }\n    }\n    return worstTrade;\n}\n\nconst highestBalance = (accountData: AccountData) => {\n    const balanceData: CashGraphItem[] = balanceCalc(accountData);\n    let highestBalance = -Infinity;\n    balanceData.forEach((data) => {\n        if(data.balance > highestBalance){\n            highestBalance = data.balance;\n        }\n    })\n    return highestBalance\n}\n\nconst aveRRR = (data: AccountData | Trade[]) => {\n    const profit = aveProfit(data);\n    const loss = aveLoss(data);\n    if(profit === 0 || loss === 0) return 0\n    return profit / loss\n}\n\nconst profitFactor = (accountData: AccountData) => {\n    // What should be returned when loss is 0?\n    const profit = totalProfit(accountData);\n    const loss = totalLoss(accountData);\n    if(profit === 0 && loss === 0) return 0\n    return profit / loss;\n}\n\nconst expectancy = (accountData: AccountData) => {\n    const winrate = winRate(accountData) / 100;\n    return (\n        (aveProfit(accountData) * winrate) - (aveLoss(accountData) * (1 - winrate))\n    );\n}\n\nconst totalLots = (accountData: AccountData) => {\n    let totalLots = 0;\n    for(const trade of accountData.trades){\n        if(trade.lots){\n            totalLots += trade.lots;\n        }\n    }\n    return totalLots;\n}\n\nconst totalCommissions = (accountData: AccountData) => {\n    let totalCommissions = 0;\n    for(const trade of accountData.trades){\n        if(trade.swap){\n            totalCommissions += trade.swap;\n        }\n        if(trade.commission){\n            totalCommissions += trade.commission\n        }\n    }\n    return totalCommissions;\n}\n\nexport default statsCalc\nexport {aveRRR}","/**\n * Functions for calculating the info on the weekly summary table\n * The weekly summary calculates the total number of trades,\n * lots and profit gotten for each day of the current week,\n * from Friday to Monday\n */\n\nimport {OverviewWeeklySummaryCalc} from './types'\nimport {AccountData} from '../types'\n\n\nconst weeklySummaryCalc = (accountData: AccountData, today: Date = new Date()) => {\n    let calculations: OverviewWeeklySummaryCalc = {};\n    const weekDates = getWeekDates(today);\n    for(const weekDate of weekDates){\n        calculations[dateToString(weekDate)] = {\n            trades: 0,\n            lots: 0,\n            result: 0\n        }\n    }\n    for(const trade of accountData.trades){\n        for(const weekDate of weekDates){\n            if(extractDateStr(trade.closeTime) === dateToTradeDateFormat(weekDate)){\n                const strDate: string = dateToString(weekDate);\n                calculations[strDate]['trades'] += 1;\n                if(trade.lots){\n                    calculations[strDate]['lots'] += trade.lots;\n                }\n                calculations[strDate]['result'] += trade.profitLoss;\n            }\n        }\n    }\n    return calculations;\n}\n\n/** Receives a date and returns the dates of all days in the week, from monday to friday */\nconst getWeekDates = (today: Date) => {\n    /** Dates of the format 01 Jan, 13 Oct, ... */\n    // Dates are always in the descending order, from latest to earliest\n    let dates = [];\n    /**\n     * To get all dates from Friday to today\n     * Friday's index is 5\n     * today's index is anywhere from 0 to 6\n     * At any point in time, \n     * Friday's index - today's index = number of days to add to today to get Friday\n     * That's why i starts from Friday's index - today's index\n     * When the date gets moved forward by the initial i times, it becomes the Friday of the week\n     * i then keeps reducing, so when today is increased by i - 1, it becomes the Thursday of the week\n     * This continues until i becomes 0\n     * When i is 0, today gets added, because today is moved forward 0 times\n     * Except when today is Sunday. Since Sunday should never be added, a condition is in place\n     * to first check if the day is sunday.\n     */\n    for(let i=FRIDAY - today.getDay(); i>=0; i--){\n        let dayToAdd = new Date(today);\n        // Don't add Sundays\n        if(!(today.getDay() === SUNDAY && i === 0)){\n            dayToAdd.setDate(today.getDate() + i);\n            dates.push(dayToAdd);\n        }\n    }\n    /**\n     * To get the remaining days from yesterday to Monday\n     * i starts from Monday's index because Monday's index is 1\n     * today's date moved back by 1 will give yesterday's date\n     * Moved back by 2 will give day before yesterday's date\n     * So we start from Monday's index, which is 1\n     * i then increases until it is the index of yesterday\n     * At any point, today's date moved back by yesterday's index will give Monday\n     */\n    for(let i=MONDAY; i<today.getDay(); i++){\n        let dayToAdd = new Date(today);\n        dayToAdd.setDate(today.getDate() - i);\n        dates.push(dayToAdd);\n    }\n    return dates\n}\n\nconst dateToString = (date: Date) => {\n    return `${date.getDate()} ${monthMap[date.getMonth()]}`\n}\n\n/** Converts date object into the format of date in the accountData trades */\nconst dateToTradeDateFormat = (date: Date) => {\n    // Add one because JS's months are 0-indexed\n    let month = date.getMonth() + 1;\n    let monthStr = month < 10 ? `0${month}` : `${month}`;\n    let day = date.getDate();\n    let dayStr = day < 10 ? `0${day}` : `${day}`\n    return `${date.getFullYear()}-${monthStr}-${dayStr}`\n}\n\n/**\n* Takes date string of the format 2022-04-22 18:34:00+00:00 and returns 2022-04-22\n*/\nconst extractDateStr = (dateStr: string) => {\n    return dateStr.split('T')[0]\n}\n\nconst SUNDAY = 0;\nconst MONDAY = 1;\nconst TUESDAY = 2;\nconst WEDNESDAY = 3;\nconst THURSDAY = 4;\nconst FRIDAY = 5;\nconst SATURDAY = 6;\n\nconst monthMap: {[key: number]: string} = {\n    0: 'Jan',\n    1: 'Feb',\n    2: 'Mar',\n    3: 'Apr',\n    4: 'May',\n    5: 'Jun',\n    6: 'Jul',\n    7: 'Aug',\n    8: 'Sep',\n    9: 'Oct',\n    10: 'Nov',\n    11: 'Dec'\n}\n\nexport default weeklySummaryCalc\nexport {getWeekDates}","import {AccountData} from '@root/types'\nimport {AveReturnsPerPairGraphCalc} from './types'\n\nconst aveReturnsPerPairGraphCalc = (accountData: AccountData) => {\n    // An object to get all the number of trades and profit / losses\n    // for a pair, to calculate the average returns for that pair\n    const perPairData: PerPairDataCalc = calcPerPairData(accountData);\n    const calculations: AveReturnsPerPairGraphCalc = calcGraphData(perPairData);\n    return calculations\n}\n\n/**\n * Turn the result from calcPerPairData into an array of AveReturnsPerPairGraphCalcItem\n * objects with a pair and the average returns associated with it\n */\nconst calcGraphData = (perPairData: PerPairDataCalc) => {\n    // No need to check if the tradeNo is 0, because if can't be\n    // The fact that the pair appears in this object implies that there must be at\n    // least 1 trade that has this pair\n    const aveReturns = (pair: string) => perPairData[pair].profitLoss / perPairData[pair].tradeNo\n    return Object.keys(perPairData).map((pair) => (\n        {pair, result: aveReturns(pair)}\n    ));\n}\n\n/** \n * Returns an object to get all the number of trades and profit / losses \n * for a pair, which will be used to calculate the average returns for that pair\n*/\nconst calcPerPairData = (accountData: AccountData) => {\n    const perPairData: PerPairDataCalc = {};\n    for(const trade of accountData.trades){\n        if(!(trade.pair in perPairData)){\n            perPairData[trade.pair] = {tradeNo: 0, profitLoss: 0}\n        }\n        perPairData[trade.pair].tradeNo += 1;\n        perPairData[trade.pair].profitLoss += trade.profitLoss;\n    }\n    return perPairData\n}\n\ntype PerPairDataCalc = {[key: string]: {tradeNo: number, profitLoss: number}}\n\nexport default aveReturnsPerPairGraphCalc","import {aveRRR} from '@root/overview-calculations'\nimport {AccountData} from '@root/types'\nimport {AveRrrPerPairGraphCalc} from './types'\nimport {groupTradesByPair} from './utils'\n\n\nconst aveRrrPerPairGraphCalc = (accountData: AccountData): AveRrrPerPairGraphCalc => {\n    const pairToTradesMap = groupTradesByPair(accountData);\n    return Object.keys(pairToTradesMap).map((pair) => ({\n        pair,\n        rrr: aveRRR(pairToTradesMap[pair])\n    }))\n}\n\nexport default aveRrrPerPairGraphCalc","import {AccountData} from '@root/types'\nimport aveReturnsPerPairGraphCalc from './ave-returns-per-pair-graph-calc'\nimport aveRrrPerPairGraphCalc from './ave-rrr-per-pair-graph-calc'\nimport pairsAnalysisTableCalc from './pairs-analysis-table-calc'\nimport {PairsAnalysisCalculations} from './types'\n\n\nconst pairsAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: PairsAnalysisCalculations = {\n        aveReturnsPerPairGraphCalc: aveReturnsPerPairGraphCalc(accountData),\n        aveRrrPerPairGraphCalc: aveRrrPerPairGraphCalc(accountData),\n        pairsAnalysisTableCalc: pairsAnalysisTableCalc(accountData)\n    }\n    return calculations\n}\n\nexport default pairsAnalysisCalculations","import {noOfTrades, totalNoOfLongs, totalNoOfShorts, winRate, totalNoOfWinningTrades} from '@root/common-calc'\nimport {AccountData, Trade} from '@root/types'\nimport {groupTradesByPair} from './utils'\nimport {PairsAnalysisTableCalc, TradesPerPair} from './types'\n\n\nconst pairsAnalysisTableCalc = (accountData: AccountData): PairsAnalysisTableCalc => {\n    const tradesPerPair: TradesPerPair = groupTradesByPair(accountData);\n    return Object.keys(tradesPerPair).map((pair) => {\n        const trades = tradesPerPair[pair];\n        return {\n            pair,\n            noOfTradesOnPair: trades.length,\n            noOfProfitableTradesOnPair: totalNoOfWinningTrades(trades),\n            profitableTradesOnPairPercent: winRate(trades),\n            noOfLosingTradesOnPair: noOfLosingTrades(trades),\n            losingTradesOnPairPercent: loseRate(trades),\n            noOfShortsOnPair: totalNoOfShorts(trades),\n            shortsOnPairPercent: shortsOnPairPercent(trades),\n            noOfLongsOnPair: totalNoOfLongs(trades),\n            longsOnPairPercent: longsOnPairPercent(trades),\n            noOfTpOnPair: noOfTpOnPair(trades),\n            tpOnPairPercent: tpOnPairPercent(trades),\n            noOfSlOnPair: noOfSlOnPair(trades),\n            slOnPairPercent: slOnPairPercent(trades)\n        }\n    });\n}\n\nconst longsOnPairPercent = (trades: Trade[]) => {\n    const noOfShorts = totalNoOfLongs(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (noOfShorts / totalNoOfTrades) * 100\n}\n\nconst shortsOnPairPercent = (trades: Trade[]) => {\n    const noOfShorts = totalNoOfShorts(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (noOfShorts / totalNoOfTrades) * 100\n}\n\nconst noOfLosingTrades = (trades: Trade[]) => {\n    const lossTrades = trades.filter((trade) => trade.profitLoss < 0);\n    return lossTrades.length\n}\n\nconst loseRate = (trades: Trade[]) => {\n    const lossTrades = noOfLosingTrades(trades);\n    const totalNoOfTrades = noOfTrades(trades);\n    if(totalNoOfTrades === 0) return 0\n    return (lossTrades / totalNoOfTrades) * 100\n}\n\nconst noOfTpOnPair = (trades: Trade[]) => {\n    let tpOnPair = 0;\n    trades.forEach((trade) => {\n        if(trade.closePrice == trade.takeProfit){\n            tpOnPair += 1;\n        }\n    })\n    return tpOnPair;\n}\n\nconst noOfSlOnPair = (trades: Trade[]) => {\n    let slOnPair = 0;\n    trades.forEach((trade) => {\n        if(trade.closePrice == trade.stopLoss){\n            slOnPair += 1;\n        }\n    })\n    return slOnPair;\n}\n\nconst tpOnPairPercent = (trades: Trade[]) => {\n    return (noOfTpOnPair(trades) / trades.length) * 100;\n}\n\nconst slOnPairPercent = (trades: Trade[]) => {\n    return (noOfSlOnPair(trades) / trades.length) * 100;\n}\n\nexport default pairsAnalysisTableCalc","import {AccountData, Trade} from '@root/types'\nimport {TradesPerPair} from './types'\n\n\nconst groupTradesByPair = (accountData: AccountData) => {\n    const tradesPerPair: TradesPerPair = {};\n    for(const trade of accountData.trades){\n        if(!(trade.pair in tradesPerPair)){\n            tradesPerPair[trade.pair] = [];\n        }\n        tradesPerPair[trade.pair].push(trade);\n    }\n    return tradesPerPair\n}\n\nexport {\n    groupTradesByPair\n}","import {AccountData} from '@root/types'\nimport returnsPerPeriodGraphCalc from './returns-per-period-graph-calc'\nimport {PeriodAnalysisCalculations} from './types'\n\nconst periodAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: PeriodAnalysisCalculations = {\n        returnsPerPeriodGraphCalc: returnsPerPeriodGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default periodAnalysisCalculations","import {AccountData, Trade} from '@root/types'\nimport {DayKey, MonthKey, ReturnsPerPeriodGraphCalc} from './types'\n\n\nconst returnsPerPeriodGraphCalc = (accountData: AccountData) => {\n    const calculations: ReturnsPerPeriodGraphCalc = {\n        daily: dailyReturnsPerPeriod(accountData.trades),\n        monthly: monthlyReturnsPerPeriod(accountData.trades),\n        yearly: yearlyReturnsPerPeriodGraphCalc(accountData.trades)\n    }\n    return calculations\n}\n\nconst dailyReturnsPerPeriod = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {\n        [MONDAY]: 0, [TUESDAY]: 0, [WEDNESDAY]: 0,\n        [THURSDAY]: 0, [FRIDAY]: 0\n    };\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const date = new Date(trade.closeTime);\n            const day = date.getDay();\n            returnsPerPeriod[day] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((day: string) => (\n            {day: dayNoToString[parseInt(day)], result: returnsPerPeriod[parseInt(day)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod();\n}\n\nconst monthlyReturnsPerPeriod = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {\n        [JANUARY]: 0, [FEBRUARY]: 0, [MARCH]: 0,\n        [APRIL]: 0, [MAY]: 0, [JUNE]: 0, [JULY]: 0, [AUGUST]: 0, [SEPTEMBER]: 0,\n        [OCTOBER]: 0, [NOVEMBER]: 0, [DECEMBER]: 0\n    };\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const date = new Date(trade.closeTime);\n            const month = date.getMonth();\n            returnsPerPeriod[month] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((month: string) => (\n            {month: monthNoToString[parseInt(month)], result: returnsPerPeriod[parseInt(month)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod()\n}\n\nconst yearlyReturnsPerPeriodGraphCalc = (trades: Trade[]) => {\n    const returnsPerPeriod: {[key: number]: number} = {}\n    const calculateReturnsPerPeriod = () => {\n        for(const trade of trades){\n            const year = new Date(trade.closeTime).getFullYear();\n            if(!(year in returnsPerPeriod)){\n                returnsPerPeriod[year] = 0;\n            }\n            returnsPerPeriod[year] += trade.profitLoss;\n        }\n    }\n    const formatReturnsPerPeriod = () => {\n        return Object.keys(returnsPerPeriod).map((year: string) => (\n            {year: parseInt(year), result: returnsPerPeriod[parseInt(year)]}\n        ))\n    }\n    calculateReturnsPerPeriod();\n    return formatReturnsPerPeriod();\n}\n\nconst MONDAY = 1;\nconst TUESDAY = 2;\nconst WEDNESDAY = 3;\nconst THURSDAY = 4;\nconst FRIDAY = 5;\n\nconst JANUARY = 0;\nconst FEBRUARY = 1;\nconst MARCH = 2;\nconst APRIL = 3;\nconst MAY = 4;\nconst JUNE = 5;\nconst JULY = 6;\nconst AUGUST = 7;\nconst SEPTEMBER = 8;\nconst OCTOBER = 9;\nconst NOVEMBER = 10;\nconst DECEMBER = 11;\n\nconst dayNoToString: {[key: number]: DayKey} = {\n    [MONDAY]: 'Monday',\n    [TUESDAY]: 'Tuesday',\n    [WEDNESDAY]: 'Wednesday',\n    [THURSDAY]: 'Thursday',\n    [FRIDAY]: 'Friday'\n}\n\nconst monthNoToString: {[key: number]: MonthKey} = {\n    [JANUARY]: 'January',\n    [FEBRUARY]: 'February',\n    [MARCH]: 'March',\n    [APRIL]: 'April',\n    [MAY]: 'May',\n    [JUNE]: 'June',\n    [JULY]: 'July',\n    [AUGUST]: 'August',\n    [SEPTEMBER]: 'September',\n    [OCTOBER]: 'October',\n    [NOVEMBER]: 'November',\n    [DECEMBER]: 'December'\n}\n\nexport default returnsPerPeriodGraphCalc","import {AccountData} from '@root/types'\nimport tradeDurationTableCalc from './trade-duration-table-calc'\nimport openHourTableCalc from './open-hour-table-calc'\nimport timeAnalysisGraphCalc from './time-analysis-graph-calc'\nimport {TradingTimeAnalysisCalculations} from './types'\n\n\nconst tradingTimeAnalysisCalculations = (accountData: AccountData) => {\n    const calculations: TradingTimeAnalysisCalculations = {\n        tradeDurationTableCalc: tradeDurationTableCalc(accountData),\n        openHourTableCalc: openHourTableCalc(accountData),\n        timeAnalysisGraphCalc: timeAnalysisGraphCalc(accountData)\n    }\n    return calculations\n}\n\nexport default tradingTimeAnalysisCalculations","import {AccountData} from '@root/types'\nimport {OpenHourTableCalcItem} from '..'\nimport {OpenHourTableCalc} from './types'\n\nconst openHourTableCalc = (accountData: AccountData): OpenHourTableCalc => {\n    const openHourMap: {[key: string]: Omit<OpenHourTableCalcItem, 'hour'>} = {}\n    for(const trade of accountData.trades){\n        const hour = formatTime(trade.openTime);\n        if(!(hour in openHourMap)){\n            openHourMap[hour] = {result: 0, noOfTrades: 0};\n        }\n        openHourMap[hour].result += trade.profitLoss;\n        openHourMap[hour].noOfTrades += 1;\n    }\n    return Object.keys(openHourMap).map((hour) => ({\n        hour, result: openHourMap[hour].result, noOfTrades: openHourMap[hour].noOfTrades\n    }))\n}\n\nconst formatTime = (rawTimeStr: string): string => {\n    // In the general sense\n    // extract the 18 in '2022-04-12T18:09:00+00:00' and return '18:00-18:59'\n    const hour = rawTimeStr.split('T')[1].split(':')[0];\n    return `${hour}:00 - ${hour}:59`\n}\n\nexport default openHourTableCalc","import {AccountData, Trade} from '@root/types'\nimport {sameDay, sameWeek, sameMonth, sameYear} from '@root/utils'\nimport {TimeAnalysisGraphCalcItem} from '..'\nimport {TimeAnalysisGraphCalc} from './types'\n\n/**\n * Graph of open hour against results\n */\n\nconst timeAnalysisGraphCalc = (accountData: AccountData, today: Date = new Date) => {\n    const calculations: TimeAnalysisGraphCalc = {\n        todayGraphCalc: todayGraphCalc(accountData, today),\n        thisWeekGraphCalc: thisWeekGraphCalc(accountData, today),\n        thisMonthGraphCalc: thisMonthGraphCalc(accountData, today),\n        thisYearGraphCalc: thisYearGraphCalc(accountData, today),\n        allTimeGraphCalc: allTimeGraphCalc(accountData, today)\n    }\n    return calculations\n}\n\nconst todayGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameDay(trade.openTime, today))\n    );\n}\n\nconst thisWeekGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameWeek(trade.openTime, today))\n    );\n}\n\nconst thisMonthGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameMonth(trade.openTime, today))\n    );\n}\n\nconst thisYearGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(\n        accountData.trades.filter((trade) => sameYear(trade.openTime, today))\n    );\n}\n\nconst allTimeGraphCalc = (accountData: AccountData, today: Date) => {\n    return graphCalc(accountData.trades);\n}\n\nconst graphCalc = (trades: Trade[]): TimeAnalysisGraphCalcItem[] => {\n    const tradeHourToResultMap: {[key: string]: number} = {};\n    for(const trade of trades){\n        // extract the 06 in '2022-10-23T06:03:00Z'\n        const hour = trade.openTime.split('T')[1].split(':')[0];\n        if(!(hour in tradeHourToResultMap)){\n            tradeHourToResultMap[hour] = 0;\n        }\n        tradeHourToResultMap[hour] += trade.profitLoss;\n    }\n    return Object.keys(tradeHourToResultMap).map((hour) => ({\n        openHour: hour + ':00', result: tradeHourToResultMap[hour]\n    }))\n}\n\nexport default timeAnalysisGraphCalc","import {AccountData} from '@root/types'\nimport {TradeDurationTableCalc, TradeDurationTableCalcItem} from './types'\n\n\nconst tradeDurationTableCalc = (accountData: AccountData): TradeDurationTableCalc => {\n    const durationMap: {[key: string]: Omit<TradeDurationTableCalcItem, 'duration'>} = {}\n    for(const trade of accountData.trades){\n        const duration = durationStr(trade.openTime, trade.closeTime);\n        if(!(duration in durationMap)){\n            durationMap[duration] = {result: 0, noOfTrades: 0}\n        }\n        durationMap[duration].result += trade.profitLoss;\n        durationMap[duration].noOfTrades += 1;\n    }\n    return Object.keys(durationMap).map((duration) => ({\n        duration,\n        noOfTrades: durationMap[duration].noOfTrades,\n        result: durationMap[duration].result\n    }))\n}\n\n/**\n * Accepts the open time and close times of a trade\n * and returns an approximate duration in a string, like 1 week,\n * 2 mins, 1 hour.\n */\nconst durationStr = (openTimeStr: string, closeTimeStr: string): string => {\n    const [openTimeDateStr, openTimeTimeStr] = openTimeStr.split('T');\n    const [openTimeYearStr, openTimeMonthStr, openTimeDayStr] = openTimeDateStr.split('-');\n    const [openTimeHourStr, openTimeMinutesStr] = openTimeTimeStr.split(':');\n\n    const [closeTimeDateStr, closeTimeTimeStr] = closeTimeStr.split('T');\n    const [closeTimeYearStr, closeTimeMonthStr, closeTimeDayStr] = closeTimeDateStr.split('-');\n    const [closeTimeHourStr, closeTimeMinutesStr] = closeTimeTimeStr.split(':');\n    \n    let [minutes, hours] = (() => {\n        // instantiate date objects with randoms dates\n        // the days, months, and years aren't needed\n        // all that these dates are used for are the time differences\n        const randomYear = 2022;\n        const randomMonth = 2;\n        const randomDay = 2;\n        const closeTimeDate = new Date(randomYear, randomMonth, randomDay);\n        closeTimeDate.setHours(parseInt(closeTimeHourStr));\n        closeTimeDate.setMinutes(parseInt(closeTimeMinutesStr));\n        const openTimeDate = new Date(randomYear, randomMonth, randomDay);\n        openTimeDate.setHours(parseInt(openTimeHourStr));\n        openTimeDate.setMinutes(parseInt(openTimeMinutesStr));\n        const difference = closeTimeDate.getTime() - openTimeDate.getTime();\n        const totalMins = (difference / 1000) / 60;\n        const hours = parseInt(`${totalMins / 60}`);\n        const minutes = totalMins % 60;\n        return [minutes, hours];\n    })()\n    let [days, weeks, months, years] = (() => {\n        const closeTimeDate = new Date(\n            parseInt(closeTimeYearStr),\n            parseInt(closeTimeMonthStr) - 1,\n            parseInt(closeTimeDayStr)\n        );\n        const openTimeDate = new Date(\n            parseInt(openTimeYearStr),\n            parseInt(openTimeMonthStr) - 1,\n            parseInt(openTimeDayStr)\n        );\n        // The absolute difference in milliseconds\n        const difference = closeTimeDate.getTime() - openTimeDate.getTime();\n        // From milliseconds to days\n        const totalDays = difference/1000/60/60/24;\n        // How many weeks can the days fit in\n        const totalWeeks = parseInt(`${totalDays / 7}`);\n        // How many months can the weeks fit in\n        const totalMonths = parseInt(`${totalWeeks / 4}`);\n        // The remaining days that couldn't fit into the weeks\n        const days = totalDays % 7;\n        // The remaining weeks that couldn't fit into the months\n        const weeks = totalWeeks % 4;\n        // The remaining months that couldn't fit into years\n        const months = totalMonths % 12;\n        // How many years can the months fit in\n        const years = parseInt(`${totalMonths / 12}`);\n        return [days, weeks, months, years];\n    })()\n    if(minutes > 50){\n        minutes = 0;\n        hours += 1;\n    }\n    if(hours > 22){\n        hours = 0;\n        days += 1;\n    }\n    if(days > 3){\n        days = 0;\n        weeks += 1;\n    }\n    if(weeks > 3){\n        weeks = 0;\n        months += 1;\n    }\n    if(months > 11){\n        months = 0;\n        years += 1;\n    }\n    const durationInString = (n: number, unit: string) => {\n        return n === 1 ? `1 ${unit}` : `${n} ${unit}s`\n    }\n    if(years > 0){\n        return durationInString(years, 'year');\n    }\n    if(months > 0){\n        return durationInString(months, 'month');\n    }\n    if(weeks > 0){\n        return durationInString(weeks, 'week');\n    }\n    if(days > 0){\n        return durationInString(days, 'day');\n    }\n    if(hours > 0){\n        return durationInString(hours, 'hour');\n    }\n    if(minutes > 0){\n        return durationInString(minutes, 'min');\n    }\n    return durationInString(1, 'min');\n}\n\nexport default tradeDurationTableCalc","/**\n * A year to be used in date sentinels to represent dates whose values\n * are to far in the future for real date to be ahead of the same way \n * infinity is used in number sentinels to represent \n * \"a number no other number is larger than\"\n * */\nconst FAR_IN_THE_FUTURE_YEAR = 200000;\n\n/**\n * Performs the same function as FAR_IN_THE_FUTURE_YEAR\n * the -infinity for date sentinels\n */\nconst FAR_IN_THE_PAST_YEAR = 100;\n\n/**\n * Does the date in @param dateStr fall in the same day as @param otherDate\n */\n const sameDay = (dateStr: string, otherDate: Date): boolean => {\n    const date = new Date(dateStr);\n    // If they fall on the same year, month and day, then they fell on the same day\n    return date.getFullYear() === otherDate.getFullYear() && date.getMonth() === otherDate.getMonth()\n        && date.getDate() === otherDate.getDate()\n}\n\n/**\n * Does the date in @param dateStr fall in the same week as @param otherDate\n */\nconst sameWeek = (dateStr: string | Date, otherDate: Date) => {\n    const date = typeof(dateStr) === 'object' ? dateStr : new Date(dateStr);\n    /**\n     * Upper bound is Sunday 12 am and lower bound is Saturday 11:59 pm\n     * If today is Sunday, then date will have to be subtracted 0 times (it's date index: 0)\n     * If today is Monday, then date will have to be subtracted 1 time (it's date index: 1)\n     * If today is Tuesday, then date will have to be subtracted 2 times (it's date index: 2)\n     * In general, to get Sunday from any day, you take the date back by the day's date index\n     * which happen to be 0, 1, 2, 3, 4, 5, 6 for Sunday, ..., Saturday respectively\n     */\n    const getLowerBound = (otherDate: Date) => {\n        // Initialize to the otherDate\n        let lowerBound = new Date(otherDate);\n        // Take the date back by the day's date index\n        lowerBound.setDate(lowerBound.getDate() - lowerBound.getDay());\n        // Set the Sunday's time to 12 am on the dot\n        lowerBound.setHours(12);\n        lowerBound.setMinutes(0);\n        lowerBound.setSeconds(0);\n        lowerBound.setMilliseconds(0);\n        return lowerBound;\n    }\n    const lowerBound = getLowerBound(otherDate);\n    /**\n     * Lower bound is Saturday 11:59 pm\n     * If today is Sunday, then date will have to be moved forward by 6 (6 - 0)\n     * If today is Monday, then date will have to be moved forward by 5 (6 - 1)\n     * If today is Tuesday, then date will have to be moved forward by 4 (6 - 2)\n     * ...\n     * To get get Saturday from any day, you take the date forward by 6 - day's date index\n     */\n    const getUpperBound = (otherDate: Date) => {\n        let upperBound = new Date(otherDate);\n        // Make it a Saturday\n        upperBound.setDate(upperBound.getDate() + (6 - upperBound.getDay()));\n        // Set the Saturday's time to 11:59:59 p.m.\n        upperBound.setHours(23);\n        upperBound.setMinutes(59);\n        upperBound.setSeconds(59);\n        return upperBound;\n    }\n    const upperBound = getUpperBound(otherDate);\n    /**\n     * Does @param date fall between @param upperBound and @param lowerBound?\n     */\n    const dateFallsWithinRange = (date: Date, upperBound: Date, lowerBound: Date) => {\n        return date >= lowerBound && date <= upperBound\n    }\n    return dateFallsWithinRange(date, upperBound, lowerBound);\n}\n\n/**\n * Does the date in @param dateStr fall in the same month as @param otherDate\n */\nconst sameMonth = (dateStr: string, otherDate: Date) => {\n    const date = new Date(dateStr);\n    // If they fell in the same year, and the same month,\n    // then they fell in the same month\n    return date.getFullYear() === otherDate.getFullYear() && date.getMonth() === otherDate.getMonth()\n}\n\n/**\n * Does the date in @param dateStr fall in the same year as @param otherDate\n */\n const sameYear = (dateStr: string, otherDate: Date) => {\n    const date = new Date(dateStr);\n    return date.getFullYear() === otherDate.getFullYear()\n}\n\nexport {\n    sameDay,\n    sameWeek,\n    sameMonth,\n    sameYear,\n    FAR_IN_THE_FUTURE_YEAR,\n    FAR_IN_THE_PAST_YEAR\n}","const randomNumber = (min: number, max: number) => {\n    return (Math.random() * (max - min)) + min\n}\n\nconst randomInt = (min: number, max: number) => {\n    return Math.round(randomNumber(min, max));\n}\n\nconst mergeArrays = (...arrays: Array<Array<any>>) => {\n    let newArray: any[] = [];\n    for(const array of arrays){\n        newArray = [...newArray, ...array];\n    }\n    return newArray\n}\n\nconst sum = (arr: Array<number>) => {\n    let sum = 0;\n    for(const i in arr){\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst sumObjArray = (objs: Array<{[key: string]: any}>, objKey: string) => {\n    return sum(objs.map((obj) => obj[objKey]))\n}\n\nconst cloneObj = (obj: {[key: string]: any}) => {\n    return JSON.parse(JSON.stringify(obj));\n}\n\nconst approximate = (n: number): number => {\n    return parseFloat(n.toFixed(10));\n}\n\n\nexport {\n    randomNumber,\n    mergeArrays,\n    sum,\n    sumObjArray,\n    cloneObj,\n    randomInt,\n    approximate\n}\n\nexport * from './date-utils'"],"names":["children","style","P","color","getColor","fontFamily","subMenu","subMenuIsOpen","subMenuName","selectedSubMenuName","selectedSubMenuItemIndex","onSubMenuItemSelect","Collapse","in","timeout","unmountOnExit","List","disablePadding","component","undefined","map","item","i","ListItemButton","sx","width","pl","selected","onClick","e","name","Icon","index","ListItem","disableGutters","padding","marginTop","getDimen","flexDirection","ListItemIcon","fontSize","ExpandLess","ExpandMore","SvgIcon","xmlns","fill","className","viewBox","d","fillRule","TRADER_OVERVIEW_ROUTE","RouteConst","TRADER_JOURNAL_ROUTE","TRADER_LONG_AND_SHORT_ANALYSIS_ROUTE","TRADER_CASH_AND_GAINS_ROUTE","TRADER_SETTINGS_ROUTE","mainMenuItems","icon","HouseIcon","route","CalendarIcon","AnalyticsChartIcon","NotesIcon","bottomMenuItems","logout","SettingsIcon","LogOutIcon","action","getMenuInfo","menuItems","Object","keys","itemsKey","length","menuItemIndex","adjustIndexForBottomMenuItems","stripSlashes","startsWith","substr","endsWith","location","pageRoute","locationList","pathname","split","getPageRouteName","initialSubMenuName","initialMainMenuItemIndex","initialSubMenuIsOpen","initialSelectedSubMenuItemIndex","initialSubMenuItemSelected","createNavbarItem","selectedMainMenuItemIndex","onMainMenuItemClick","setMenuIsOpen","useLocation","getIntialNavbarListStateValues","useState","setSelectedMainMenuItemIndex","subMenuItemSelected","setSubMenuItemSelected","setSelectedSubMenuItemIndex","setSelectedSubMenuName","setSubMenuIsOpen","navigate","useNavigate","unselectMainMenuItem","closeSubMenu","closeMenu","carryOutItemAction","itemJustSelectedIndex","doesntHaveSubMenu","itemInSubMenuIsSelected","openSubMenu","selectSubMenuItem","alignItems","marginBottom","Divider","mx","Toast","useContext","ToastContext","menuIsOpen","isScreenSmall","useScreenIsSmall","BASE_URL","HttpConst","LOGOUT_URL","Http","url","successFunc","localStorage","removeItem","INFO_LOGIN_ROUTE","errorFunc","err","console","log","error","dontShowOnBigScreen","links","sidebar","SwipeableDrawer","variant","open","onClose","onOpen","showLogo","onSidebarMenuButtonClick","Drawer","ModalProps","keepMounted","screenIsSmall","getDimenInNo","paddingBottom","marginLeft","height","themeWithSpecificBrkpoints","createTheme","breakpoints","values","xs","sm","md","lg","xl","globalData","GlobalDataContext","permissions","PermissionsContext","dataIsRefreshing","DataIsRefreshingContext","refreshData","RefreshDataContext","lastDataRefreshDisplay","Date","getFullYear","lastDataRefreshTime","format","subscriptionStatusTextStyle","fontWeight","marginRight","TRADER_APP_ROUTE","TRADER_SUBSCRIBE_NOW_ROUTE","ThemeProvider","theme","Grid","container","paddingTop","justifyContent","canRefreshAccount","text","userHasPaid","size","ReactGA","getUserId","disabled","showDataStatusBar","heading","dontShowSelector","H4","accounts","getTradeAccountNames","currentAccountName","getCurrentTradeAccountName","onCurrentAccountChange","CurrentAccountChangerContext","value","onChange","getTradeAccountIdOf","target","options","placeholder","title","selectorOptions","onSelectorSelectedOptionChange","paddingLeft","paddingRight","H6","option","data","xAxisKey","yAxisKey","tooltipName","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","CartesianGrid","vertical","strokeDasharray","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","axisLine","tickLine","tick","dataKey","YAxis","Tooltip","Area","type","stroke","strokeWidth","fillOpacity","barSize","Legend","Bar","opacity","initialGraphDataStateValues","initialXAxisKeyStateValue","outline","headerIsOutside","headerPaddingTop","testId","props","graphVariant","graphData","setGraphData","currentXAxisKey","setcurrentXAxisKey","useEffect","assign","border","borderRadius","getConditionalStyles","conditionalStyle","conditionalStylesArray","Array","isArray","push","stylesArray","condition","mergeObject","objArray","lastObj","pop","formatHeaders","headers","processHeaders","headerRowToAdd","headerItem","headerRows","headerItems","processMultipleHeaders","rows","bodyColumnConditionalStyle","headerStyle","headerRowConditionalStyle","headerColumnConditionalStyle","headerColumnTextConditionalStyle","headerTextStyle","headerRowTextConditionalStyle","bodyStyle","bodyRowConditionalStyle","TableContainer","Paper","boxShadow","TableHead","rowi","conditionalRowStyle","conditionalRowTextStyle","TableRow","coli","conditionalColumnTextStyle","conditionalColumnStyle","headerCellStyle","textStyle","globalStyle","TableCell","textAlign","colSpan","BP","TableBody","row","conditionalRowStyles","cell","conditionalColumnStyles","bodyCellStyle","align","calcFunc","updateComponentCalcState","afterCalcFunc","hasLoaded","accountData","getCurrentTradeAccountData","newCalc","defaultAccountReturnsGraphItem","cardsCalc","totalBalance","noOfTrades","winRate","absGain","statsCalc","aveProfit","aveLoss","longsWonPercent","noOfLongsWon","noOfLongs","shortsWonPercent","noOfShortsWon","noOfShorts","bestTrade","worstTrade","highestBalance","aveRRR","profitFactor","expectancy","lots","commissions","weeklySummaryCalc","accountReturnsGraphCalc","todayGraphCalc","thisWeekGraphCalc","thisMonthGraphCalc","thisYearGraphCalc","allTimeGraphCalc","content","backgroundColor","H5","balance","calc","formatMoney","toString","formatPercent","objObjArrayTo2dp","createCell","StatsTableCell","stats","to2dpstring","createRows","columnIndex","background","resultInColor","result","summary","date","trades","defaultOverviewCalc","overviewCalc","setOverviewCalc","useRecalc","overviewCalculations","defaultGraphCalc","cashGraphCalc","gainsGraphCalc","defaultCashAndGainsCalc","cashAndGainsCalc","setCashAndGainsCalc","cashAndGainsCalculations","calcs","pair","commission","swap","expensesTableCalc","defaultExpensesCalc","expensesCalc","setExpensesCalc","setRows","expensesCalculations","newExpensesCalc","long","short","rrr","refinedData","objArrayTo2dp","defaultLongShortComparisonTableCalcItem","longShortComparisonGraphCalc","label","longBalanceGraphCalc","shortBalanceGraphCalc","longShortComparisonTableCalc","defaultLongShortAnalysisCalc","longShortAnalysisCalc","setLongShortAnalysisCalc","longShortAnalysisCalculations","noWithPercent","n","percent","noOfTradesOnPair","noOfProfitableTradesOnPair","profitableTradesOnPairPercent","noOfLosingTradesOnPair","losingTradesOnPairPercent","noOfShortsOnPair","shortsOnPairPercent","noOfLongsOnPair","longsOnPairPercent","to2dp","noOfTpOnPair","tpOnPairPercent","noOfSlOnPair","slOnPairPercent","headerObj","obj","defaultPairsAnalysisCalc","aveReturnsPerPairGraphCalc","aveRrrPerPairGraphCalc","pairsAnalysisTableCalc","pairsAnalysisCalc","setPairsAnalysisCalc","pairsAnalysisCalculations","returnsPerPeriodGraphCalc","daily","day","monthly","month","yearly","defaultPeriodAnalysisCalc","periodAnalysisCalc","setPeriodAnalysisCalc","periodAnalysisCalculations","year","openHour","duration","hour","timeAnalysisGraphCalc","tradeDurationTableCalc","openHourTableCalc","defaultTradingTimeAnalysisCalc","tradingTimeAnalysisCalc","setTradingTimeAnalysisCalc","tradingTimeAnalysisCalculations","email","INFO_CHANGE_PASSWORD_ROUTE","href","rel","firstRequest","followUpNo","TIME_TO_WAIT_BEFORE_NEXT_PENDING_REQUEST","MAX_NO_OF_FOLLOW_UP_REQUESTS","deleteAccount","userId","thenFunc","DELETE_ACCOUNT_URL","setTimeout","resp","dialogIsOpen","setDialogIsOpen","accountIsDeleting","setAccountIsDeleting","okButtonColor","okButtonContent","okButtonProps","onOkClick","onCancelClick","showCancelButton","display","userCanAddAccount","TRADER_ADD_ACCOUNT_ROUTE","noOfAccounts","maxAccounts","removeAccount","accountId","removeAccountFromData","REMOVE_TRADING_ACCOUNT_URL","defaultAccountData","deposits","withdrawals","userIsOnFreeTrial","userIsSubscribed","accountToDelete","setAccountToDelete","isDeleting","setIsDeleting","maxNoOfAccounts","ConfigConst","account","cancelSubscription","onSubscriptionCancel","CANCEL_SUBSCRIPTION_URL","FreeTrialInfo","daysLeftBeforeFreeTrialExpires","includes","subscriptionPlan","subscriptionIsCancelling","setSubscriptionIsCancelling","SubscriptionCancelContext","plan","removeAccountFromGlobalData","getUserEmail","getAllAccounts","getUserSubscriptionPlan","getDaysLeftBeforeFreeTrialExpires","canSubmit","errors","canAddAccount","baseCanSubmit","submitValuesSuccessFunc","setNonFieldError","onAccountAdded","method","submitValuesErrorFunc","setBrokerNotSupportedProcessNeeded","setErrors","setSuccessMsg","buildErrors","response","login","server","password","platform","serverErrorMsg","toBase64","file","Promise","resolve","reject","fileReader","FileReader","readAsDataURL","onload","onerror","platforms","submitValues","brokerNotSupportedProcessNeeded","formInitialValues","brokerInfo","initialValues","validationSchema","Yup","required","integer","moreThan","positive","typeError","FormMsg","min","test","toLowerCase","oneOf","context","parent","onSubmit","processedValues","setSubmitting","setInfoMsg","fileName","then","brokerInfoContent","brokerInfoName","catch","underTitleComponent","isSubmitting","submitForm","accept","makeFollowUpRequests","PENDING_ADD_TRADING_ACCOUNT_URL","networkErrorFunc","timeoutErrorFunc","config","ADD_TRADING_ACCOUNT_URL","RECORD_NEW_SUBSCRIPTION_URL","amount","React","ref","abortSubscription","onSubscriptionFinished","onSubscriptionRecordFailed","handleFlutterPayment","useFlutterwave","callback","saveSubscriptionStatus","postActionsPending","closePaymentModal","others","public_key","payment_plan","tx_ref","now","currency","payment_options","customer","phonenumber","customizations","description","logo","userHasPaidOnce","subscribing","setSubscribing","onNewSubscription","NewSubscriptionContext","monthlySubscriptionTrigger","yearlySubscriptionTrigger","subscriptionIsOngoing","navbar","subscribeContent","subscribeEnabled","subscribeAction","current","click","cloneObject","JSON","parse","stringify","GlobalData","rawData","this","initialEmptyRawData","bind","getCurrentTradeAccountId","changeCurrentTradeAccountId","numberOfAccounts","subscribeUser","unsubscribeUser","user_data","trade_data","current_account_id","parseInt","accountIds","accountNames","forEach","newCurrentAccountId","rawDataClone","currentAccountId","accountName","newAccounts","filter","newRawData","is_subscribed","has_paid","subscription_plan","last_data_refresh_time","ds_username","days_left_before_free_trial_expires","on_free","hasPaid","logins_after_ask","current_feedback_question","defaultPermissions","canCreateNote","canModifyNotes","baseSetGlobalData","setPermissions","GET_INIT_DATA_URL","setGlobalData","arg","permissionFuncs","funcName","createPermissions","setDataIsRefreshing","PENDING_REFRESH_DATA_URL","newGlobalData","REFRESH_DATA_URL","makeFollowUpSubscriptionRequests","Notebook","lazy","Journal","createContext","pageMapConfig","keepPageLoading","addAccountComponentConfig","settingsComponentConfig","notebookProps","pageStillLoadingComponent","TRADER_PAIRS_ANALYSIS_ROUTE","TRADER_TIME_ANALYSIS_ROUTE","TRADER_PERIOD_ANALYSIS_ROUTE","TRADER_EXPENSES_ROUTE","TRADER_NOTES_ROUTE","addAccountComponent","subscribeNowComponent","subscribeNowRouteComponent","to","noAccounts","useGlobalData","setKeepPageLoading","noteData","useNoteData","Provider","refreshAccountData","info","pageMap","Suspense","fallback","path","element","columns","field","renderHeader","trade","openTime","closeTime","toUpperCase","fee","profit","profitLoss","pageSize","components","Toolbar","GridToolbar","Note","lastEdited","isSaving","saveQueue","last_edited","httpMethod","SAVE_NOTE_URL","UPDATE_NOTE_URL","latestChangeToSave","_save","toISOString","toNoteData","DELETE_NOTE_URL","toDateString","noteItem","active","removeNoteFromList","noteIndex","ListItemText","primary","secondary","lastEditedToString","CircularProgress","IconButton","delete","Delete","noteItems","onNoteSelect","isEditing","listContainerRef","useRef","Slide","direction","editor","getPluginType","MARK_BOLD","FormatBold","tooltip","MARK_ITALIC","FormatItalic","onMouseDown","addMark","MARK_UNDERLINE","FormatUnderlined","MARK_STRIKETHROUGH","FormatStrikethrough","MARK_SUPERSCRIPT","clear","Superscript","MARK_SUBSCRIPT","Subscript","FormatAlignLeft","FormatAlignCenter","FormatAlignRight","FormatAlignJustify","noMoreRedos","history","redos","noMoreUndos","undos","Undo","undo","Redo","redo","ELEMENT_UL","FormatListBulleted","ELEMENT_OL","FormatListNumbered","createHeaderRowNode","headerRow","colNo","createRow","tableNode","isElement","rowNo","autoFocus","setColumns","setNewValueIfValidNumber","newValue","setValue","num","isNaN","validNumber","createTableNode","newParagraphNode","ELEMENT_PARAGRAPH","Transforms","TableView","imageUrl","setImageUrl","setResolve","closeDialog","Image","getImageUrl","prevResolve","setUrl","Link","getLinkUrl","prevFunc","ELEMENT_H1","LooksOne","ELEMENT_H2","LooksTwo","ELEMENT_H3","Looks3","ELEMENT_H4","Looks4","ELEMENT_H5","Looks5","ELEMENT_H6","Looks6","ELEMENT_BLOCKQUOTE","FormatQuote","usePlateEditorState","attributes","textDecoration","onMouseOver","createPlugins","createParagraphPlugin","createBlockquotePlugin","createHeadingPlugin","createListPlugin","createResetNodePlugin","createSoftBreakPlugin","createExitBreakPlugin","createTablePlugin","createLinkPlugin","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createStrikethroughPlugin","createSuperscriptPlugin","createSubscriptPlugin","createAlignPlugin","inject","validTypes","createImagePlugin","createPlateUI","ELEMENT_LINK","LinkElement","ELEMENT_TD","TdElement","setTitle","Input","note","setContent","plugins","editableProps","showAllNotes","createNewNote","currentNoteIndex","setCurrentNoteIndex","setIsEditing","notesHasLoaded","setNotesHasLoaded","setNoteItems","setEditorValue","usePlateStore","set","rawNoteData","hasBeenSaved","newNoteItems","newNote","save","GET_ALL_NOTES_URL","setNoteData","LOGIN_ROUTE","handleRequest","status","BaseHttp","get","put","post","initNavigate","toFixed","parseFloat","objArrayKey","objKey","data2dp","cloneDeep","skey","key","onKeyPress","today","accData","cloneObj","sameDay","graphCalc","sameWeek","sameMonth","sameYear","initialDeposit","tradeNo","balanceCalc","tradesIndex","withdrawalsIndex","depositsIndex","currentBalance","currentDeposit","currentWithdrawal","currentTrade","getDatePos","depositPos","withdrawalPos","depositIsEarliest","addTradeToBalance","decreaseWithdrawalFromBalance","addDepositToBalance","deposit","withdrawal","depositDate","FAR_IN_THE_FUTURE_YEAR","time","withdrawalDate","tradeDate","posTriple","UNSET","posAlreadySet","pos","sameDate","date1","date2","todayGainsPercent","gainsPercent","thisWeekGainsPercent","thisMonthGainsPercent","thisYearGainsPercent","allTimeGainsPercent","gain","totalNoOfLongs","noOfLongsFromTradeArray","noOfLongsFromAccountData","totalNoOfShorts","noOfShortsFromTradesArray","noOfShortsFromAccountData","totalNoOfLongsWon","totalNoOfShortsWon","totalNoOfWinningTrades","totalNoOfWinningTradesFromTradesArray","totalNoOfWinningTradesFromAccountData","noOfWinningTrades","noOfTradess","calcExpensesPerPair","expensesPerPair","totalLongsProfitLoss","totalProfitLoss","totalShortsProfitLoss","cummulativeResult","aveLongsProfitLoss","longsProfit","aveShortsProfitLoss","shortsProfit","longsRrr","shortsRrr","periodCondition","cummulativeProfitLoss","totalDeposits","totalWithdrawals","totalExpenses","expenses","totalProfit","loss","totalLoss","noOfLosingTrades","totalNoOfLosingTrades","balanceData","Infinity","winrate","totalLots","totalCommissions","getWeekDates","dates","FRIDAY","getDay","dayToAdd","SUNDAY","setDate","getDate","MONDAY","dateToString","monthMap","getMonth","dateToTradeDateFormat","monthStr","dayStr","extractDateStr","dateStr","calculations","weekDates","weekDate","strDate","calcGraphData","perPairData","aveReturns","calcPerPairData","pairToTradesMap","groupTradesByPair","totalNoOfTrades","loseRate","lossTrades","tpOnPair","closePrice","takeProfit","slOnPair","stopLoss","tradesPerPair","dailyReturnsPerPeriod","returnsPerPeriod","TUESDAY","WEDNESDAY","THURSDAY","calculateReturnsPerPeriod","dayNoToString","monthlyReturnsPerPeriod","JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER","monthNoToString","yearlyReturnsPerPeriodGraphCalc","formatTime","rawTimeStr","openHourMap","tradeHourToResultMap","durationStr","openTimeStr","closeTimeStr","openTimeDateStr","openTimeTimeStr","openTimeYearStr","openTimeMonthStr","openTimeDayStr","openTimeHourStr","openTimeMinutesStr","closeTimeDateStr","closeTimeTimeStr","closeTimeYearStr","closeTimeMonthStr","closeTimeDayStr","closeTimeHourStr","closeTimeMinutesStr","closeTimeDate","setHours","setMinutes","openTimeDate","totalMins","getTime","minutes","hours","totalDays","totalWeeks","totalMonths","days","weeks","months","years","durationInString","unit","durationMap","FAR_IN_THE_PAST_YEAR","otherDate","lowerBound","setSeconds","setMilliseconds","getLowerBound","upperBound","getUpperBound","dateFallsWithinRange","randomNumber","max","Math","random","randomInt","round","mergeArrays","newArray","arrays","array","sum","arr","sumObjArray","objs","approximate"],"sourceRoot":""}